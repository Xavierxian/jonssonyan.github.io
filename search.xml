<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>封装一些JavaScript时间相关的方法，精确到微秒</title>
    <url>/2023/02/02/%E5%B0%81%E8%A3%85%E4%B8%80%E4%BA%9BJavaScript%E6%97%B6%E9%97%B4%E7%9B%B8%E5%85%B3%E7%9A%84%E6%96%B9%E6%B3%95%EF%BC%8C%E7%B2%BE%E7%A1%AE%E5%88%B0%E5%BE%AE%E7%A7%92/</url>
    <content><![CDATA[<meta name="referrer" content="no-referrer"/>
每次网上搜太浪费时间了，一次性整理齐，其他时间段可以推导代码写法。

<span id="more"></span>

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> now = <span class="keyword">new</span> <span class="title class_">Date</span>(); <span class="comment">//当前日期</span></span><br><span class="line"><span class="keyword">var</span> nowDayOfWeek = now.<span class="title function_">getDay</span>() - <span class="number">1</span>; <span class="comment">//今天本周的第几天</span></span><br><span class="line"><span class="keyword">var</span> nowDay = now.<span class="title function_">getDate</span>(); <span class="comment">//当前日</span></span><br><span class="line"><span class="keyword">var</span> nowMonth = now.<span class="title function_">getMonth</span>(); <span class="comment">//当前月</span></span><br><span class="line"><span class="keyword">var</span> nowYear = now.<span class="title function_">getYear</span>(); <span class="comment">//当前年</span></span><br><span class="line">nowYear += (nowYear &lt; <span class="number">2000</span>) ? <span class="number">1900</span> : <span class="number">0</span>;</span><br><span class="line"><span class="keyword">var</span> lastMonthDate = <span class="keyword">new</span> <span class="title class_">Date</span>(); <span class="comment">//上月日期</span></span><br><span class="line">lastMonthDate.<span class="title function_">setDate</span>(<span class="number">1</span>);</span><br><span class="line">lastMonthDate.<span class="title function_">setMonth</span>(lastMonthDate.<span class="title function_">getMonth</span>() - <span class="number">1</span>);</span><br><span class="line"><span class="keyword">var</span> lastYear = lastMonthDate.<span class="title function_">getYear</span>();</span><br><span class="line"><span class="keyword">var</span> lastMonth = lastMonthDate.<span class="title function_">getMonth</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">//格式化时间：yyyy-MM-dd hh:mm:ss</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">formatDate</span>(<span class="params">date</span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> myyear = date.<span class="title function_">getFullYear</span>();</span><br><span class="line">    <span class="keyword">var</span> mymonth = date.<span class="title function_">getMonth</span>() + <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">var</span> myweekday = date.<span class="title function_">getDate</span>();</span><br><span class="line">    <span class="keyword">var</span> myhours = date.<span class="title function_">getHours</span>();</span><br><span class="line">    <span class="keyword">var</span> myminutes = date.<span class="title function_">getMinutes</span>();</span><br><span class="line">    <span class="keyword">var</span> myseconds = date.<span class="title function_">getSeconds</span>();</span><br><span class="line">    <span class="keyword">if</span> (mymonth &lt; <span class="number">10</span>) &#123;</span><br><span class="line">        mymonth = <span class="string">&quot;0&quot;</span> + mymonth;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (myweekday &lt; <span class="number">10</span>) &#123;</span><br><span class="line">        myweekday = <span class="string">&quot;0&quot;</span> + myweekday;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> (myyear + <span class="string">&quot;-&quot;</span> + mymonth + <span class="string">&quot;-&quot;</span> + myweekday + <span class="string">&quot; &quot;</span> + myhours + <span class="string">&quot;:&quot;</span> + myminutes + <span class="string">&quot;:&quot;</span> + myseconds);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//获得某月的天数</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">getMonthDays</span>(<span class="params">myMonth</span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> monthStartDate = <span class="keyword">new</span> <span class="title class_">Date</span>(nowYear, myMonth, <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">var</span> monthEndDate = <span class="keyword">new</span> <span class="title class_">Date</span>(nowYear, myMonth + <span class="number">1</span>, <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">var</span> days = (monthEndDate - monthStartDate) / (<span class="number">1000</span> * <span class="number">60</span> * <span class="number">60</span> * <span class="number">24</span>);</span><br><span class="line">    <span class="keyword">return</span> days;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//获得本季度的开始月份</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">getQuarterStartMonth</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> quarterStartMonth = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span> (nowMonth &lt; <span class="number">3</span>) &#123;</span><br><span class="line">        quarterStartMonth = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (<span class="number">2</span> &lt; nowMonth &amp;&amp; nowMonth &lt; <span class="number">6</span>) &#123;</span><br><span class="line">        quarterStartMonth = <span class="number">3</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (<span class="number">5</span> &lt; nowMonth &amp;&amp; nowMonth &lt; <span class="number">9</span>) &#123;</span><br><span class="line">        quarterStartMonth = <span class="number">6</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (nowMonth &gt; <span class="number">8</span>) &#123;</span><br><span class="line">        quarterStartMonth = <span class="number">9</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> quarterStartMonth;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//获得本周的开始时间</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">getWeekStartDate</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> weekStartDate = <span class="keyword">new</span> <span class="title class_">Date</span>(nowYear, nowMonth, nowDay - nowDayOfWeek);</span><br><span class="line">    <span class="keyword">return</span> <span class="title function_">formatDate</span>(weekStartDate);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//获得本周的结束时间</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">getWeekEndDate</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> weekEndDate = <span class="keyword">new</span> <span class="title class_">Date</span>(nowYear, nowMonth, nowDay + (<span class="number">6</span> - nowDayOfWeek), <span class="number">23</span>, <span class="number">59</span>, <span class="number">59</span>, <span class="number">999</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="title function_">formatDate</span>(weekEndDate);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//获得上周的开始时间</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">getLastWeekStartDate</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> weekStartDate = <span class="keyword">new</span> <span class="title class_">Date</span>(nowYear, nowMonth, nowDay - nowDayOfWeek - <span class="number">7</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="title function_">formatDate</span>(weekStartDate);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//获得上周的结束时间</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">getLastWeekEndDate</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> weekEndDate = <span class="keyword">new</span> <span class="title class_">Date</span>(nowYear, nowMonth, nowDay - nowDayOfWeek - <span class="number">1</span>, <span class="number">23</span>, <span class="number">59</span>, <span class="number">59</span>, <span class="number">999</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="title function_">formatDate</span>(weekEndDate);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//获得本月的开始时间</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">getMonthStartDate</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> monthStartDate = <span class="keyword">new</span> <span class="title class_">Date</span>(nowYear, nowMonth, <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="title function_">formatDate</span>(monthStartDate);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//获得本月的结束时间</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">getMonthEndDate</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> monthEndDate = <span class="keyword">new</span> <span class="title class_">Date</span>(nowYear, nowMonth, <span class="title function_">getMonthDays</span>(nowMonth), <span class="number">23</span>, <span class="number">59</span>, <span class="number">59</span>, <span class="number">999</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="title function_">formatDate</span>(monthEndDate);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//获得上月开始时间</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">getLastMonthStartDate</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (lastMonth == <span class="number">11</span>) &#123;</span><br><span class="line">        <span class="keyword">var</span> lastMonthStartDate = <span class="keyword">new</span> <span class="title class_">Date</span>(nowYear - <span class="number">1</span>, lastMonth, <span class="number">1</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">var</span> lastMonthStartDate = <span class="keyword">new</span> <span class="title class_">Date</span>(nowYear, lastMonth, <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="title function_">formatDate</span>(lastMonthStartDate);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//获得上月结束时间</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">getLastMonthEndDate</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (lastMonth == <span class="number">11</span>) &#123;</span><br><span class="line">        <span class="keyword">var</span> lastMonthEndDate = <span class="keyword">new</span> <span class="title class_">Date</span>(nowYear - <span class="number">1</span>, lastMonth, <span class="title function_">getMonthDays</span>(lastMonth), <span class="number">23</span>, <span class="number">59</span>, <span class="number">59</span>, <span class="number">999</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">var</span> lastMonthEndDate = <span class="keyword">new</span> <span class="title class_">Date</span>(nowYear, lastMonth, <span class="title function_">getMonthDays</span>(lastMonth), <span class="number">23</span>, <span class="number">59</span>, <span class="number">59</span>, <span class="number">999</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="title function_">formatDate</span>(lastMonthEndDate);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//获得本季度的开始时间</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">getQuarterStartDate</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> quarterStartDate = <span class="keyword">new</span> <span class="title class_">Date</span>(nowYear, <span class="title function_">getQuarterStartMonth</span>(), <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="title function_">formatDate</span>(quarterStartDate);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//获得本季度的结束时间</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">getQuarterEndDate</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> quarterEndMonth = <span class="title function_">getQuarterStartMonth</span>() + <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">var</span> quarterStartDate = <span class="keyword">new</span> <span class="title class_">Date</span>(nowYear, quarterEndMonth,</span><br><span class="line">        <span class="title function_">getMonthDays</span>(quarterEndMonth), <span class="number">23</span>, <span class="number">59</span>, <span class="number">59</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="title function_">formatDate</span>(quarterStartDate);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//获得昨天的开始时间</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">getYesterdayStartTime</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> yesterdayStartDate = <span class="keyword">new</span> <span class="title class_">Date</span>(nowYear, nowMonth, nowDay - <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="title function_">formatDate</span>(yesterdayStartDate);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//获得昨天的结束时间</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">getYesterdayEndTime</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> yesterdayEndDate = <span class="keyword">new</span> <span class="title class_">Date</span>(nowYear, nowMonth, nowDay - <span class="number">1</span>, <span class="number">23</span>, <span class="number">59</span>, <span class="number">59</span>, <span class="number">999</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="title function_">formatDate</span>(yesterdayEndDate);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//获得过去7天的开始时间</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">get7AgoStartTime</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> sevenDayStartDate = <span class="keyword">new</span> <span class="title class_">Date</span>(nowYear, nowMonth, nowDay - <span class="number">7</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="title function_">formatDate</span>(sevenDayStartDate)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//获得过去7天的结束时间</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">get7AgoEndTime</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> sevenDayStartDate = <span class="keyword">new</span> <span class="title class_">Date</span>(nowYear, nowMonth, nowDay - <span class="number">1</span>, <span class="number">23</span>, <span class="number">59</span>, <span class="number">59</span>, <span class="number">999</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="title function_">formatDate</span>(sevenDayStartDate)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//获得过去30天的开始时间</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">get30AgoStartTime</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> sevenDayStartDate = <span class="keyword">new</span> <span class="title class_">Date</span>(nowYear, nowMonth, nowDay - <span class="number">30</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="title function_">formatDate</span>(sevenDayStartDate)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//获得过去7天的结束时间</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">get30AgoEndTime</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> sevenDayEndDate = <span class="keyword">new</span> <span class="title class_">Date</span>(nowYear, nowMonth, nowDay - <span class="number">1</span>, <span class="number">23</span>, <span class="number">59</span>, <span class="number">59</span>, <span class="number">999</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="title function_">formatDate</span>(sevenDayEndDate)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;获得本周的开始时间:&#x27;</span> + <span class="title function_">getWeekStartDate</span>())</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;获得本周的结束时间:&#x27;</span> + <span class="title function_">getWeekEndDate</span>())</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;获得上周的开始时间:&#x27;</span> + <span class="title function_">getLastWeekStartDate</span>())</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;获得上周的结束时间:&#x27;</span> + <span class="title function_">getLastWeekEndDate</span>())</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;获得本月的开始时间:&#x27;</span> + <span class="title function_">getMonthStartDate</span>())</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;获得本月的结束时间:&#x27;</span> + <span class="title function_">getMonthEndDate</span>())</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;获得上月开始时间:&#x27;</span> + <span class="title function_">getLastMonthStartDate</span>())</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;获得上月结束时间:&#x27;</span> + <span class="title function_">getLastMonthEndDate</span>())</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;获得本季度的开始时间:&#x27;</span> + <span class="title function_">getQuarterStartDate</span>())</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;获得本季度的结束时间:&#x27;</span> + <span class="title function_">getQuarterEndDate</span>())</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;获得昨天的开始时间:&#x27;</span> + <span class="title function_">getYesterdayStartTime</span>())</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;获得昨天的结束时间:&#x27;</span> + <span class="title function_">getYesterdayEndTime</span>())</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;获得过去7天的开始时间:&#x27;</span> + <span class="title function_">get7AgoStartTime</span>())</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;获得过去7天的结束时间:&#x27;</span> + <span class="title function_">get7AgoEndTime</span>())</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;获得过去30天的开始时间:&#x27;</span> + <span class="title function_">get30AgoStartTime</span>())</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;获得过去30天的结束时间:&#x27;</span> + <span class="title function_">get30AgoEndTime</span>())</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Web开发</category>
      </categories>
      <tags>
        <tag>javascript</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue.js工程开发规范</title>
    <url>/2023/01/31/Vue.js%E5%B7%A5%E7%A8%8B%E5%BC%80%E5%8F%91%E8%A7%84%E8%8C%83/</url>
    <content><![CDATA[<meta name="referrer" content="no-referrer"/>
学习了太多的语言和框架，最终会导致很多语法和规范会搞混，相比较Java和Go统一的文件和文件命名来说，Vue.js的规范更多一些，养成一个好的开发习惯，可以让我们的项目一目了然。

<span id="more"></span>

<h1 id="命名规范"><a href="#命名规范" class="headerlink" title="命名规范"></a>命名规范</h1><h2 id="组件命名"><a href="#组件命名" class="headerlink" title="组件命名"></a>组件命名</h2><p>全部统一大驼峰（PascalCase）或者肉串（kebab-case）</p>
<h2 id="文件夹命名"><a href="#文件夹命名" class="headerlink" title="文件夹命名"></a>文件夹命名</h2><p>属于components文件夹下的子文件夹，使用大写字母开头的PascalBase风格，其他文件夹统一使用kebab-case的风格</p>
<ol>
<li>全局通用的组件放在 /src/components下</li>
<li>其他业务页面中的组件，放在各自页面下的 ./components文件夹下</li>
<li>每个components文件夹下最多只有一层文件夹，且文件夹名称为组件的名称，文件夹下必须有index.vue或index.js，其他.vue文件统一大写开头（Pascal
case），components下的子文件夹名称统一大写开头（PascalCase）</li>
</ol>
<h2 id="文件命名"><a href="#文件命名" class="headerlink" title="文件命名"></a>文件命名</h2><ol>
<li>*.js文件命名规范</li>
</ol>
<ul>
<li>属于类的.js文件，除index.js外，使用PascalBase风格</li>
<li>其他类型的.js文件，使用kebab-case风格</li>
<li>属于Api的，统一加上Api后缀</li>
</ul>
<ol start="2">
<li>*.vue文件命名规范 除index.vue之外，其他.vue文件统一用PascalBase风格</li>
<li>*.less文件命名规范 统一使用kebab-case命名风格</li>
</ol>
<h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ol>
<li><a href="https://v2.cn.vuejs.org/v2/style-guide/index.html">vue.js风格指南</a></li>
<li><a href="https://developer.aliyun.com/article/645697">Vue项目中的文件/文件夹命名规范</a></li>
<li><a href="https://developer.aliyun.com/article/616973">Vue前端开发规范</a></li>
</ol>
]]></content>
      <categories>
        <category>Web开发</category>
      </categories>
      <tags>
        <tag>vue.js</tag>
      </tags>
  </entry>
  <entry>
    <title>HTML中使用CDN引入形式进行Vue.js+Axios+Echarts+Element+AntDesignVue开发</title>
    <url>/2023/01/31/HTML%E4%B8%AD%E4%BD%BF%E7%94%A8CDN%E5%BC%95%E5%85%A5%E5%BD%A2%E5%BC%8F%E8%BF%9B%E8%A1%8CVue.js+Axios+Echarts+Element+AntDesignVue%E5%BC%80%E5%8F%91/</url>
    <content><![CDATA[<meta name="referrer" content="no-referrer"/>
不是所有的前端项目都适合使用node.js开发，有时候我们只是进行一些简单页面的开发。比如每次开发java
web，thymeleaf和freemarker写的很难受，不如vue.js开发来的迅速，而且对于一个有前后端分离开发习惯的人来说，几乎可以无学习成本直接上手。
特别在一些公司的老项目中，往往只能使用最原始的jsp形式开发，这是如果在jsp中使用vue.js的形式开发前端，往往事半功倍，还可以避免学习淘汰技术，顺便学习vue.js。

<span id="more"></span>

<h1 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h1><p>使用CDN形式引入<code>vue.js</code> <code>axios</code> <code>echarts</code> <code>element ui</code> <code>ant design vue</code></p>
<p>如果是本地开发，可以将CDN指向的资源文件下载到本地进行引入</p>
<h2 id="vue-js-2"><a href="#vue-js-2" class="headerlink" title="vue.js 2"></a>vue.js 2</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- vue.js 2.7.14 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://unpkg.com/vue@2.7.14/dist/vue.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- element 2.15.12 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;https://unpkg.com/element-ui@2.15.12/lib/theme-chalk/index.css&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://unpkg.com/element-ui@2.15.12/lib/index.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- ant design vue 1.7.8 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;https://unpkg.com/ant-design-vue@1.7.8/dist/antd.min.css&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://unpkg.com/ant-design-vue@1.7.8/dist/antd.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- axios 1.1.2 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://unpkg.com/axios@1.1.2/dist/axios.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- echarts 5.4.1 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://unpkg.com/echarts@5.4.1/dist/echarts.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">el</span>: <span class="string">&#x27;#app&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">data</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">return</span> &#123;&#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;,</span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">mounted</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        &#125;,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">methods</span>: &#123;&#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="vue-js-3"><a href="#vue-js-3" class="headerlink" title="vue.js 3"></a>vue.js 3</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- vue.js 3.2.45 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://unpkg.com/vue@3.2.45/dist/vue.global.prod.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- element plus 2.2.28 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;https://unpkg.com/element-plus@2.2.28/dist/index.css&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://unpkg.com/@element-plus/icons-vue&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://unpkg.com/element-plus@2.2.28&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- ant design vue 3.2.15 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://unpkg.com/dayjs/dayjs.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://unpkg.com/dayjs/plugin/customParseFormat.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://unpkg.com/dayjs/plugin/weekday.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://unpkg.com/dayjs/plugin/localeData.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://unpkg.com/dayjs/plugin/weekOfYear.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://unpkg.com/dayjs/plugin/weekYear.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://unpkg.com/dayjs/plugin/advancedFormat.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;https://unpkg.com/ant-design-vue@3.2.15/dist/antd.min.css&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://unpkg.com/ant-design-vue@3.2.15/dist/antd.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- axios 1.1.2 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://unpkg.com/axios@1.1.2/dist/axios.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- echarts 5.4.1 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://unpkg.com/echarts@5.4.1/dist/echarts.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> <span class="title class_">App</span> = &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">setup</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">return</span> &#123;&#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;,</span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">mounted</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        &#125;,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">methods</span>: &#123;&#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> &#123;createApp, ref, reactive&#125; = <span class="title class_">Vue</span></span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">createApp</span>(<span class="title class_">App</span>).<span class="title function_">use</span>(<span class="title class_">ElementPlus</span>).<span class="title function_">use</span>(antd).<span class="title function_">mount</span>(<span class="string">&#x27;#app&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h1 id="CSS样式"><a href="#CSS样式" class="headerlink" title="CSS样式"></a>CSS样式</h1><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* 横向弹性布局 */</span></span><br><span class="line"><span class="attribute">flex</span>: <span class="number">1</span>;</span><br><span class="line"><span class="attribute">display</span>: flex;</span><br><span class="line"><span class="attribute">flex-flow</span>: row wrap;</span><br><span class="line"><span class="comment">/*去除内边距和外边距*/</span></span><br><span class="line"><span class="attribute">margin</span>: <span class="number">0</span>;</span><br><span class="line"><span class="attribute">padding</span>: <span class="number">0</span>;</span><br><span class="line"><span class="comment">/*让边框不占宽度和高度*/</span></span><br><span class="line"><span class="attribute">box-sizing</span>: border-box;</span><br><span class="line"><span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line"><span class="attribute">height</span>: <span class="number">100%</span>;</span><br></pre></td></tr></table></figure>

<h1 id="相关开发文档"><a href="#相关开发文档" class="headerlink" title="相关开发文档"></a>相关开发文档</h1><ol>
<li><a href="https://v2.cn.vuejs.org/v2/guide/">vue.js 2</a></li>
<li><a href="https://cn.vuejs.org/guide/quick-start.html">vue.js 3</a></li>
<li><a href="https://element.eleme.io/#/zh-CN/component/installation">element</a></li>
<li><a href="https://element-plus.gitee.io/zh-CN/component/button.html">element plus</a></li>
<li><a href="https://1x.antdv.com/docs/vue/introduce-cn/">ant design vue 1.7.8</a></li>
<li><a href="https://antdv.com/components/input-number-cn">ant design vue 3.2.14</a></li>
<li><a href="https://www.axios-http.cn/docs/intro">axios</a></li>
<li><a href="https://echarts.apache.org/examples/zh/index.html">echarts</a></li>
<li><a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS">css</a></li>
</ol>
]]></content>
      <categories>
        <category>Web开发</category>
      </categories>
      <tags>
        <tag>vue.js</tag>
      </tags>
  </entry>
  <entry>
    <title>2022年个人总结</title>
    <url>/2022/12/31/2022%E5%B9%B4%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/</url>
    <content><![CDATA[<meta name="referrer" content="no-referrer"/>


<span id="more"></span>
<p>2022 年发生的事情太多了，最后几天也没逃过阳的命运，不过听说得过一次就不会再得同类型的毒株，早点晚点都一样。</p>
<p>工作方面，跳槽了，平台也变大了。总的来说变化比较多，中间有三个月因为其他部门缺人，去支援了一下服务端开发，后来又调了三次项目，本身我对这些是无所谓的，
写什么都一样，我是一块砖，哪里需要哪里搬，真正印证了那句话“面试造航母，工作拧螺丝”。前后申请了四十多个系统，你说代码能力提升了多少真没见的，就只积累了一些经验。还是那句话吧，工作的本质是雇佣关系，想要学习真技术还是自己找办法，多参与开源，多投资自己，要是想着靠工作学习到东西，那就玩完了，学习永远是自己的事情。</p>
<p>个人项目方面，今年最主要的就是写了一个项目，项目从 2021 年 6 月开始构思，2022 年 2 月发布第一个版本，差不多算是更新了一年了，一年下来积累的体量还可以：Docker Hub 150k+ pull，GitHub 800+
Star（本来计划 2022 年底能破 1K Star 看看现在的趋势应该达不成了），社区人数
1K+，结果还算可以吧，打算持续稳定维护下去。这个应该是一个人完成的最完整项目，从运维到后端开发，再到前端开发，还有推广（做视频）都是一个人完成的，学到了很多。</p>
<p><img src="https://files.mdnice.com/user/10819/80d71abd-bee2-4c7e-8145-1053d759cbc2.png" alt="2022年我的GitHub提交记录"></p>
<p>开源方面，个人的开源项目一直处于半开源状态（只开源了自动化部署脚本）。加入的一个开源团队在年初新开了一个项目，但是后来项目没人去跟进迭代了，大家都挺忙的，到了 6
月份基本没人管了，靠着广告一直维持。不过前期在队长的头部技术号流量加持下，注册用户也突破了 10 万，GitHub 2K+ 不管项目质量如何，只要有流量数据还是很好看的。</p>
<p>自媒体方面，因为个人项目的原因，基本所有的业余时间都放到了个人项目的开发，做视频的频率变低了，还有一部分原因是做视频没有什么起色，可能要考虑一下视频定位的问题了，今年做的几个视频都是关于个人项目的介绍。</p>
<p>考试方面，架构师要三战了，虽然说考了以后证明不了能力多牛，就是想生活有点目标总是好的，丰富一下生活。第一次是 2021 年下半年，论文没过，第二次是 2022 年下半年，论文过了居然上午的选择没过，我也是服了，不过每次考试都只复习 2
个星期，结果也是在预期之内。之后考心里就有数了，基本不会畏惧论文 2700 字该怎么写了。</p>
<p>线下活动方面，参加了支付宝开发者大会，基本上讲的都是文档上的东西。明年准备开发一个可以在线支付的电商系统，也是 2021 年已经构思过了，当时写了个初版但是没有用心打磨业务。</p>
<p>生活方面，养了一只蓝猫，升级为一名铲屎官，养的不错，快 5 斤了。另外，因为疫情原因 2020 年到现在都没怎么出去，这不 2022 年底国家放开了，希望明年能去远一点地方，看看祖国的大好河山。</p>
<p><img src="https://files.mdnice.com/user/10819/fb08a4e6-3e8e-49c7-8eec-8bcd9a53f46e.jpg" alt="我家的小阿喵"></p>
<p>就这些吧，2023 加油！</p>
]]></content>
      <categories>
        <category>个人总结</category>
      </categories>
  </entry>
  <entry>
    <title>Python实现查询域名的IP地址+归属地+备案信息</title>
    <url>/2022/12/29/Python%E5%AE%9E%E7%8E%B0%E6%9F%A5%E8%AF%A2%E5%9F%9F%E5%90%8D%E7%9A%84IP%E5%9C%B0%E5%9D%80+%E5%BD%92%E5%B1%9E%E5%9C%B0+%E5%A4%87%E6%A1%88%E4%BF%A1%E6%81%AF/</url>
    <content><![CDATA[<meta name="referrer" content="no-referrer"/>


<span id="more"></span>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="keyword">import</span> socket</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">from</span> lxml <span class="keyword">import</span> etree</span><br><span class="line"><span class="keyword">from</span> tld <span class="keyword">import</span> get_fld</span><br><span class="line"></span><br><span class="line">url = <span class="string">&#x27;https://sp1.baidu.com/8aQDcjqpAAV3otqbppnN2DJv/api.php?query=&#123;&#125;&amp;resource_id=5809&amp;format=json&#x27;</span></span><br><span class="line">record_url = <span class="string">&#x27;https://icp.chinaz.com/&#123;&#125;&#x27;</span></span><br><span class="line">proxies = &#123;<span class="string">&quot;http&quot;</span>: <span class="literal">None</span>, <span class="string">&quot;https&quot;</span>: <span class="literal">None</span>&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">GetHost</span>:</span><br><span class="line">    <span class="comment"># 域名</span></span><br><span class="line">    domain = <span class="string">&#x27;&#x27;</span></span><br><span class="line">    <span class="comment"># IP地址</span></span><br><span class="line">    ip = <span class="string">&#x27;&#x27;</span></span><br><span class="line">    <span class="comment"># IP归属地</span></span><br><span class="line">    location = <span class="string">&#x27;&#x27;</span></span><br><span class="line">    <span class="comment"># 主办单位名称</span></span><br><span class="line">    org_name = <span class="string">&#x27;&#x27;</span></span><br><span class="line">    <span class="comment"># 主办单位性质</span></span><br><span class="line">    sponsor_nature = <span class="string">&#x27;&#x27;</span></span><br><span class="line">    <span class="comment"># 网站名称</span></span><br><span class="line">    website_name = <span class="string">&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, domain, ip</span>):</span><br><span class="line">        self.domain = domain</span><br><span class="line">        self.ip = ip</span><br><span class="line">        self.get_host_info()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">get_host_info</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">if</span> self.ip == <span class="string">&#x27;&#x27;</span>:</span><br><span class="line">            self.ip = socket.gethostbyname(self.domain)</span><br><span class="line">        response = requests.get(url.<span class="built_in">format</span>(self.ip), proxies=proxies)</span><br><span class="line">        json_obj = json.loads(response.text)</span><br><span class="line">        info = json_obj[<span class="string">&#x27;data&#x27;</span>]</span><br><span class="line">        self.location = info[<span class="number">0</span>][<span class="string">&#x27;location&#x27;</span>]</span><br><span class="line">        <span class="keyword">if</span> self.domain != <span class="string">&#x27;&#x27;</span>:</span><br><span class="line">            response = requests.get(record_url.<span class="built_in">format</span>(get_fld(self.domain, fix_protocol=<span class="literal">True</span>)),</span><br><span class="line">                                    proxies=proxies)</span><br><span class="line">            html = etree.HTML(response.content)</span><br><span class="line">            record_info = html.xpath(<span class="string">&#x27;//li[@class=\&#x27;bg-gray clearfix\&#x27;]&#x27;</span>)</span><br><span class="line">            self.org_name = record_info[<span class="number">0</span>].xpath(<span class="string">&#x27;./p/a/text()&#x27;</span>)[<span class="number">0</span>]</span><br><span class="line">            record_info_1 = html.xpath(<span class="string">&#x27;//li[@class=\&#x27;clearfix\&#x27;]&#x27;</span>)</span><br><span class="line">            self.sponsor_nature = record_info_1[<span class="number">0</span>].xpath(<span class="string">&#x27;./p/strong/text()&#x27;</span>)[<span class="number">0</span>]</span><br><span class="line">            self.website_name = record_info_1[<span class="number">1</span>].xpath(<span class="string">&#x27;./p/text()&#x27;</span>)[<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    host = GetHost(<span class="string">&#x27;www.qq.com&#x27;</span>, <span class="string">&#x27;&#x27;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;域名：&#123;&#125;&#x27;</span>.<span class="built_in">format</span>(host.domain))</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;IP：&#123;&#125;&#x27;</span>.<span class="built_in">format</span>(host.ip))</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;归属地：&#123;&#125;&#x27;</span>.<span class="built_in">format</span>(host.location))</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;主办单位名称：&#123;&#125;&#x27;</span>.<span class="built_in">format</span>(host.org_name))</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;主办单位性质：&#123;&#125;&#x27;</span>.<span class="built_in">format</span>(host.sponsor_nature))</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;网站名称：&#123;&#125;&#x27;</span>.<span class="built_in">format</span>(host.website_name))</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>输出结果</p>
<figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line">域名：www<span class="selector-class">.qq</span><span class="selector-class">.com</span></span><br><span class="line">IP：<span class="number">101.91</span>.<span class="number">22.57</span></span><br><span class="line">归属地：上海市 电信</span><br><span class="line">主办单位名称：深圳市腾讯计算机系统有限公司</span><br><span class="line">主办单位性质：企业</span><br><span class="line">网站名称：腾讯网</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>实用工具</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>socket</tag>
        <tag>xpath</tag>
      </tags>
  </entry>
  <entry>
    <title>Python实现对特定IP进行端口扫描</title>
    <url>/2022/12/28/Python%E5%AE%9E%E7%8E%B0%E5%AF%B9%E7%89%B9%E5%AE%9AIP%E8%BF%9B%E8%A1%8C%E7%AB%AF%E5%8F%A3%E6%89%AB%E6%8F%8F/</url>
    <content><![CDATA[<meta name="referrer" content="no-referrer"/>


<span id="more"></span>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> telnetlib</span><br><span class="line"><span class="keyword">from</span> socket <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用socket</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">socket_scan</span>(<span class="params">host, port</span>):</span><br><span class="line">    conn = socket(AF_INET, SOCK_STREAM)</span><br><span class="line">    conn.settimeout(<span class="number">2</span>)</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        conn.connect((host, port))</span><br><span class="line">        <span class="built_in">print</span>(host, port, <span class="string">&#x27;is available&#x27;</span>)</span><br><span class="line">    <span class="keyword">except</span> Exception:</span><br><span class="line">        <span class="built_in">print</span>(host, port, <span class="string">&#x27;is not available&#x27;</span>)</span><br><span class="line">    <span class="keyword">finally</span>:</span><br><span class="line">        conn.close()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用telnet</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">telnet_scan</span>(<span class="params">host, port</span>):</span><br><span class="line">    t = telnetlib.Telnet()</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        t.<span class="built_in">open</span>(host, port, timeout=<span class="number">2</span>)</span><br><span class="line">        <span class="built_in">print</span>(host, port, <span class="string">&#x27;is available&#x27;</span>)</span><br><span class="line">    <span class="keyword">except</span> Exception:</span><br><span class="line">        <span class="built_in">print</span>(host, port, <span class="string">&#x27;is not available&#x27;</span>)</span><br><span class="line">    <span class="keyword">finally</span>:</span><br><span class="line">        t.close()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    host = <span class="string">&#x27;127.0.0.1&#x27;</span></span><br><span class="line">    <span class="keyword">for</span> port <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">80</span>, <span class="number">90</span>):</span><br><span class="line">        socket_scan(host, port)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    main()</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>运行结果:</p>
<figure class="highlight txt"><table><tr><td class="code"><pre><span class="line">127.0.0.1 80 is not available</span><br><span class="line">127.0.0.1 81 is not available</span><br><span class="line">127.0.0.1 82 is not available</span><br><span class="line">127.0.0.1 83 is not available</span><br><span class="line">127.0.0.1 84 is not available</span><br><span class="line">127.0.0.1 85 is not available</span><br><span class="line">127.0.0.1 86 is not available</span><br><span class="line">127.0.0.1 87 is not available</span><br><span class="line">127.0.0.1 88 is not available</span><br><span class="line">127.0.0.1 89 is not available</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>实用工具</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>telnet</tag>
        <tag>socket</tag>
      </tags>
  </entry>
  <entry>
    <title>查看Linux服务器的客户端连接情况</title>
    <url>/2022/12/28/%E6%9F%A5%E7%9C%8BLinux%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%9A%84%E5%AE%A2%E6%88%B7%E7%AB%AF%E8%BF%9E%E6%8E%A5%E6%83%85%E5%86%B5/</url>
    <content><![CDATA[<meta name="referrer" content="no-referrer"/>
Shell实现服务器客户端连接数统计

<span id="more"></span>

<h1 id="安装net-tools"><a href="#安装net-tools" class="headerlink" title="安装net-tools"></a>安装net-tools</h1><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">apt install net-tools</span><br></pre></td></tr></table></figure>

<h1 id="执行命令"><a href="#执行命令" class="headerlink" title="执行命令"></a>执行命令</h1><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">netstat -nt | tail -n +3 | awk -F &quot;[ :]+&quot; -v OFS=&quot;&quot; &#x27;&#123;printf(&quot;%45s =&gt; %s:%-5s\n&quot;,$6,$4,$5)&#125;&#x27; | sort | uniq -c | sort -rn</span><br></pre></td></tr></table></figure>

<p>参数解释：</p>
<ul>
<li><a href="https://www.runoob.com/linux/linux-comm-netstat.html">netstat -nt</a>: 查看客户端链接情况</li>
<li><a href="https://www.runoob.com/linux/linux-comm-tail.html">tail -n +3</a>: 从第3行（包括）开始显示</li>
<li><a href="https://www.runoob.com/linux/linux-comm-awk.html">awk -F “[ :]+”</a>: 指定文件的分隔符为一个或多个的空格或冒号</li>
<li><a href="https://www.runoob.com/linux/linux-comm-awk.html">-v OFS=””</a>: 设置变量OFS（输出字段分隔符）为””</li>
<li><a href="https://www.runoob.com/linux/linux-comm-awk.html">{printf(“%45s =&gt; %s:%-5s\n”,$6,$4,$5)}</a>: 格式化输出结果</li>
<li><a href="https://www.runoob.com/linux/linux-comm-uniq.html">sort | uniq -c</a>: 去重并显示重复出现的次数，即端口连接数（uniq只会去重相邻的，所以使用前必须使用sort）</li>
<li><a href="https://www.runoob.com/linux/linux-comm-sort.html">sort -rn</a>: 端口连接数从大到小排序</li>
</ul>
<h1 id="输出"><a href="#输出" class="headerlink" title="输出"></a>输出</h1><figure class="highlight txt"><table><tr><td class="code"><pre><span class="line">3                                 61.177.173.22 =&gt; 66.42.76.76:22   </span><br><span class="line">3                                36.154.116.131 =&gt; 66.42.76.76:22   </span><br><span class="line">3                                     127.0.0.1 =&gt; 127.0.0.1:9507 </span><br><span class="line">2                                     127.0.0.1 =&gt; 127.0.0.1:6378 </span><br><span class="line">1                                     127.0.0.1 =&gt; 127.0.0.1:53870</span><br><span class="line">1                                     127.0.0.1 =&gt; 127.0.0.1:51814</span><br><span class="line">1                                     127.0.0.1 =&gt; 127.0.0.1:47646</span><br><span class="line">1                                     127.0.0.1 =&gt; 127.0.0.1:40952</span><br><span class="line">1                                     127.0.0.1 =&gt; 127.0.0.1:33292</span><br></pre></td></tr></table></figure>

<p>从输入结果我们可以看到有哪些IP连接了我们的服务器，并且可以看到连接的数量和连接的端口</p>
]]></content>
      <categories>
        <category>DevOps</category>
      </categories>
      <tags>
        <tag>linux</tag>
        <tag>awk</tag>
        <tag>netstat</tag>
      </tags>
  </entry>
  <entry>
    <title>使用iptables动态映射Docker容器端口</title>
    <url>/2022/08/31/%E4%BD%BF%E7%94%A8iptables%E5%8A%A8%E6%80%81%E6%98%A0%E5%B0%84Docker%E5%AE%B9%E5%99%A8%E7%AB%AF%E5%8F%A3/</url>
    <content><![CDATA[<meta name="referrer" content="no-referrer"/>


<span id="more"></span>

<h1 id="0x0-安装-telnet"><a href="#0x0-安装-telnet" class="headerlink" title="0x0. 安装 telnet"></a>0x0. 安装 telnet</h1><blockquote>
<p>telnet 介绍：<a href="https://zh.wikipedia.org/wiki/Telnet">https://zh.wikipedia.org/wiki/Telnet</a></p>
</blockquote>
<p>本文用于测试指定端口是否开放，命令如下：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">telnet [ip] [port]</span><br></pre></td></tr></table></figure>

<p>参数解释：</p>
<ul>
<li>ip：ip 地址</li>
<li>port：端口</li>
</ul>
<p>如果指定端口开放则结果如下：</p>
<p><img src="https://img-blog.csdnimg.cn/e2206ee7da2c4059ae4f893ce14fa8ee.png" alt="telnet"></p>
<p>如果指定端口未开放则结果如下：</p>
<p><img src="https://img-blog.csdnimg.cn/03c3e866369d4b6491dfb8d220711216.png" alt="telnet"></p>
<p><strong>PS：可以通过快捷键 ctrl+]退出连接，然后输入 q 退出 telnet</strong></p>
<h1 id="0x1-安装-Docker"><a href="#0x1-安装-Docker" class="headerlink" title="0x1. 安装 Docker"></a>0x1. 安装 Docker</h1><blockquote>
<p>Docker 官方安装文档：<a href="https://docs.docker.com/engine/install/">https://docs.docker.com/engine/install/</a></p>
</blockquote>
<h1 id="0x2-实战"><a href="#0x2-实战" class="headerlink" title="0x2. 实战"></a>0x2. 实战</h1><p><strong>目标：开放 js-redis 容器的 443 端口</strong></p>
<p>如下图所示，容器名称为 js-redis，仅映射了 6378 =&gt; 6379</p>
<p><img src="https://img-blog.csdnimg.cn/60149c9c8999451da0a6daae2219173e.png" alt="dockerps"></p>
<p>使用以下命令进行动态映射 Docker 容器的端口</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">iptables -t nat -A DOCKER -p tcp --dport <span class="variable">$&#123;宿主机端口&#125;</span> -j DNAT --to-dest <span class="variable">$&#123;容器ip&#125;</span>:<span class="variable">$&#123;容器端口&#125;</span></span><br><span class="line">iptables -t nat -A POSTROUTING -p tcp -s <span class="variable">$&#123;容器ip&#125;</span> -d <span class="variable">$&#123;容器ip&#125;</span> -dport <span class="variable">$&#123;容器端口&#125;</span> -j MASQUERADE</span><br><span class="line">iptables -A DOCKER -p tcp -d <span class="variable">$&#123;容器ip&#125;</span> --dport <span class="variable">$&#123;容器端口&#125;</span> -j ACCEPT</span><br></pre></td></tr></table></figure>

<p>我们映射 js-redis 容器的 8081 =&gt; 8082</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">iptables -t nat -A DOCKER -p tcp --dport 8081 -j DNAT --to-dest 172.18.0.4:8082</span><br><span class="line">iptables -t nat -A POSTROUTING -p tcp -s 172.18.0.4 -d 172.18.0.4 -dport 8082 -j MASQUERADE</span><br><span class="line">iptables -A DOCKER -p tcp -d 172.18.0.4 --dport 8888 -j ACCEPT</span><br></pre></td></tr></table></figure>

<p><strong>补充：</strong></p>
<ol>
<li>iptables 其他常用命令：</li>
</ol>
<ul>
<li>列出 Dcoker 已设置的规则，带行号</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">iptables -t nat -vnL DOCKER --line-number</span><br></pre></td></tr></table></figure>

<ul>
<li>根据行号删除规则</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">iptables -t nat -D DOCKER 3</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>查看容器 ip 命令</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker inspect [容器<span class="built_in">id</span>或者容器名称] | grep IPAddress</span><br></pre></td></tr></table></figure>

<p><img src="https://img-blog.csdnimg.cn/6605fb83ca62437ebb9baadd25557da0.png" alt="在这里插入图片描述"></p>
<h1 id="0x3-参考"><a href="#0x3-参考" class="headerlink" title="0x3. 参考"></a>0x3. 参考</h1><ol>
<li><a href="https://wangchujiang.com/linux-command/c/iptables.html">iptables</a></li>
<li><a href="https://docs.docker.com/network/iptables/">Docker and iptables</a></li>
<li><a href="https://stackoverflow.com/questions/19335444/how-do-i-assign-a-port-mapping-to-an-existing-docker-container">How do I assign a port mapping to an existing Docker container?</a></li>
</ol>
]]></content>
      <categories>
        <category>DevOps</category>
      </categories>
      <tags>
        <tag>docker</tag>
      </tags>
  </entry>
  <entry>
    <title>玩转微服务之gRPC快速入门</title>
    <url>/2022/08/23/%E7%8E%A9%E8%BD%AC%E5%BE%AE%E6%9C%8D%E5%8A%A1%E4%B9%8BgRPC%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8/</url>
    <content><![CDATA[<meta name="referrer" content="no-referrer"/>
通过一个简单的Demo快速入门gRPC

<span id="more"></span>

<h1 id="0x0-Demo结构"><a href="#0x0-Demo结构" class="headerlink" title="0x0. Demo结构"></a>0x0. Demo结构</h1><p><img src="https://files.mdnice.com/user/10819/f80ff1dd-1246-45fc-a5aa-121064740550.png" alt="目录结构"></p>
<p>依赖参考：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">module grpc-example</span><br><span class="line"></span><br><span class="line">go 1.18</span><br><span class="line"></span><br><span class="line">require (</span><br><span class="line">	github.com/golang/protobuf v1.5.2 // indirect</span><br><span class="line">	golang.org/x/net v0.0.0-20201021035429-f5854403a974 // indirect</span><br><span class="line">	golang.org/x/sys v0.0.0-20210119212857-b64e53b001e4 // indirect</span><br><span class="line">	golang.org/x/text v0.3.3 // indirect</span><br><span class="line">	google.golang.org/genproto v0.0.0-20200526211855-cb27e3aa2013 // indirect</span><br><span class="line">	google.golang.org/grpc v1.48.0 // indirect</span><br><span class="line">	google.golang.org/grpc/cmd/protoc-gen-go-grpc v1.2.0 // indirect</span><br><span class="line">	google.golang.org/protobuf v1.28.1 // indirect</span><br><span class="line">)</span><br></pre></td></tr></table></figure>

<h1 id="0x1-环境准备"><a href="#0x1-环境准备" class="headerlink" title="0x1. 环境准备"></a>0x1. 环境准备</h1><ol>
<li>安装依赖</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">go get google.golang.org/grpc</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>安装插件</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">go install google.golang.org/protobuf/cmd/protoc-gen-go@latest // 用于生成*.pb.go文件</span><br><span class="line">go install google.golang.org/grpc/cmd/protoc-gen-go-grpc@latest // 用于生成*_grpc.pb.go文件</span><br></pre></td></tr></table></figure>

<h1 id="0x2-安装protoc编译器"><a href="#0x2-安装protoc编译器" class="headerlink" title="0x2. 安装protoc编译器"></a>0x2. 安装protoc编译器</h1><blockquote>
<p>protobuf GitHub：<a href="https://github.com/protocolbuffers/protobuf/releases">https://github.com/protocolbuffers/protobuf/releases</a></p>
</blockquote>
<p>安装好之后将bin文件夹添加至环境变量</p>
<h1 id="0x3-编写proto文件"><a href="#0x3-编写proto文件" class="headerlink" title="0x3. 编写proto文件"></a>0x3. 编写proto文件</h1><figure class="highlight protobuf"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 这个就是protobuf的中间文件</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 指定的当前proto语法的版本，有2和3</span></span><br><span class="line">syntax = <span class="string">&quot;proto3&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 指定包位置和名称</span></span><br><span class="line"><span class="keyword">option</span> go_package = <span class="string">&quot;.;api&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 方法</span></span><br><span class="line"><span class="keyword">service </span><span class="title class_">MessageSender</span> &#123;</span><br><span class="line">  <span class="function"><span class="keyword">rpc</span> Send(MessageRequest) <span class="keyword">returns</span> (MessageResponse) </span>&#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 响应体</span></span><br><span class="line"><span class="keyword">message </span><span class="title class_">MessageResponse</span> &#123;</span><br><span class="line">  <span class="type">string</span> responseSomething = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 请求体</span></span><br><span class="line"><span class="keyword">message </span><span class="title class_">MessageRequest</span> &#123;</span><br><span class="line">  <span class="type">string</span> saySomething = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="0x4-生成代码"><a href="#0x4-生成代码" class="headerlink" title="0x4. 生成代码"></a>0x4. 生成代码</h1><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">// 进入proto文件所在的文件夹</span><br><span class="line"><span class="built_in">cd</span> ./server/api</span><br><span class="line">// 自动生成代码</span><br><span class="line">protoc --go_out=. --go-grpc_out=. *.proto</span><br></pre></td></tr></table></figure>

<p>运行过后，<code>server/api</code>文件夹内会多两个文件，<code>*pb.go</code>和<code>*_grpc.pb.go</code></p>
<h1 id="0x5-Client"><a href="#0x5-Client" class="headerlink" title="0x5. Client"></a>0x5. Client</h1><p><code>client/client.go</code>文件内容如下：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">	<span class="string">&quot;context&quot;</span></span><br><span class="line">	<span class="string">&quot;fmt&quot;</span></span><br><span class="line">	<span class="string">&quot;google.golang.org/grpc&quot;</span></span><br><span class="line">	<span class="string">&quot;grpc-example/server/api&quot;</span></span><br><span class="line">	<span class="string">&quot;log&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	conn, err := grpc.Dial(fmt.Sprintf(<span class="string">&quot;127.0.0.1:%d&quot;</span>, <span class="number">8082</span>), grpc.WithInsecure())</span><br><span class="line">	<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">		log.Println(err)</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">defer</span> conn.Close()</span><br><span class="line"></span><br><span class="line">	client := api.NewMessageSenderClient(conn)</span><br><span class="line">	send, err := client.Send(context.Background(), &amp;api.MessageRequest&#123;</span><br><span class="line">		SaySomething: <span class="string">&quot;你好!&quot;</span>,</span><br><span class="line">	&#125;)</span><br><span class="line">	<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">		log.Println(err)</span><br><span class="line">	&#125;</span><br><span class="line">	fmt.Println(send.ResponseSomething)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="0x6-Server"><a href="#0x6-Server" class="headerlink" title="0x6. Server"></a>0x6. Server</h1><p><code>server/api/api.go</code>文件内容如下：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> api</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">	<span class="string">&quot;context&quot;</span></span><br><span class="line">	<span class="string">&quot;fmt&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> ServerApi <span class="keyword">struct</span> &#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(s *ServerApi)</span></span> mustEmbedUnimplementedMessageSenderServer() &#123;</span><br><span class="line">	fmt.Println(<span class="string">&quot;implement me&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(s *ServerApi)</span></span> Send(ctx context.Context, request *MessageRequest) (*MessageResponse, <span class="type">error</span>) &#123;</span><br><span class="line">	<span class="keyword">return</span> &amp;MessageResponse&#123;ResponseSomething: fmt.Sprintf(<span class="string">&quot;收到了，你说的是：%s&quot;</span>, request.GetSaySomething())&#125;, <span class="literal">nil</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>server/server.go</code>文件内容如下：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">	<span class="string">&quot;google.golang.org/grpc&quot;</span></span><br><span class="line">	<span class="string">&quot;grpc-example/server/api&quot;</span></span><br><span class="line">	<span class="string">&quot;log&quot;</span></span><br><span class="line">	<span class="string">&quot;net&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	<span class="comment">// 1. new一个grpc的server</span></span><br><span class="line">	rpcServer := grpc.NewServer()</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 2. 将刚刚我们新建的ProdService注册进去</span></span><br><span class="line">	api.RegisterMessageSenderServer(rpcServer, <span class="built_in">new</span>(api.ServerApi))</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 3. 新建一个listener，以tcp方式监听8082端口</span></span><br><span class="line">	listener, err := net.Listen(<span class="string">&quot;tcp&quot;</span>, <span class="string">&quot;:8082&quot;</span>)</span><br><span class="line">	<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">		log.Fatal(<span class="string">&quot;服务监听端口失败&quot;</span>, err)</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 4. 运行rpcServer，传入listener</span></span><br><span class="line">	_ = rpcServer.Serve(listener)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="0x7-运行"><a href="#0x7-运行" class="headerlink" title="0x7. 运行"></a>0x7. 运行</h1><p>首先运行<code>server/server.go</code>然后运行<code>client/client.go</code>，运行效果如下：</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">GOROOT=D:\Applications\Go <span class="comment">#gosetup</span></span><br><span class="line">GOPATH= <span class="comment">#gosetup</span></span><br><span class="line">D:\Applications\Go\bin\go.exe build -o C:\Windows\Temp\GoLand\___go_build_grpc_example_client.exe grpc-example/client <span class="comment">#gosetup</span></span><br><span class="line">C:\Windows\Temp\GoLand\___go_build_grpc_example_client.exe</span><br><span class="line">收到了，你说的是：你好!</span><br><span class="line"></span><br><span class="line">Process finished with the <span class="keyword">exit</span> code <span class="number">0</span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>微服务</category>
      </categories>
      <tags>
        <tag>golang</tag>
        <tag>gRPC</tag>
      </tags>
  </entry>
  <entry>
    <title>CentOS7部署K8s集群</title>
    <url>/2022/07/18/CentOS7%E9%83%A8%E7%BD%B2K8s%E9%9B%86%E7%BE%A4/</url>
    <content><![CDATA[<meta name="referrer" content="no-referrer"/>
K8s+Istio+Golang = 微服务+服务网格+云原生

<span id="more"></span>

<h1 id="0x0-环境准备"><a href="#0x0-环境准备" class="headerlink" title="0x0. 环境准备"></a>0x0. 环境准备</h1><p>本文服务器的公网IP：192.168.56.101</p>
<ul>
<li>OS version: CentOS 7</li>
<li>CPU Architecture: x86_64/amd64</li>
<li>K8s version: v1.23.17</li>
<li>Docker version: 20.10.23</li>
</ul>
<h1 id="0x1-安装依赖"><a href="#0x1-安装依赖" class="headerlink" title="0x1. 安装依赖"></a>0x1. 安装依赖</h1><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">yum install -y \</span><br><span class="line">    curl \</span><br><span class="line">    wget \</span><br><span class="line">    systemd \</span><br><span class="line">    bash-completion \</span><br><span class="line">    lrzsz</span><br></pre></td></tr></table></figure>

<h1 id="0x2-安装前准备"><a href="#0x2-安装前准备" class="headerlink" title="0x2. 安装前准备"></a>0x2. 安装前准备</h1><ol>
<li>同步服务器时间</li>
</ol>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">timedatectl set-timezone Asia/Shanghai &amp;&amp; timedatectl set-local-rtc 0</span><br><span class="line">systemctl restart rsyslog</span><br><span class="line">systemctl restart crond</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>修改主机名</li>
</ol>
<p>方便通过主机名访问对于的服务器</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">主节点</span></span><br><span class="line">hostnamectl set-hostname k8s-master</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">从节点</span></span><br><span class="line">hostnamectl set-hostname k8s-node1</span><br><span class="line">hostnamectl set-hostname k8s-node2</span><br></pre></td></tr></table></figure>

<p>修改hosts</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cat</span> &gt;/etc/hosts &lt;&lt;<span class="string">EOF</span></span><br><span class="line"><span class="string">192.168.56.101    k8s-master</span></span><br><span class="line"><span class="string">192.168.56.102    k8s-node1</span></span><br><span class="line"><span class="string">192.168.56.103    k8s-node2</span></span><br><span class="line"><span class="string">EOF</span></span><br></pre></td></tr></table></figure>

<ol start="3">
<li>开启必要的端口</li>
</ol>
<ul>
<li><p><a href="https://kubernetes.io/zh-cn/docs/reference/networking/ports-and-protocols/">开启端口</a></p>
</li>
<li><p>直接关闭防火墙</p>
</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">systemctl disable firewalld.service &amp;&amp; systemctl stop firewalld.service</span><br></pre></td></tr></table></figure>

<h1 id="0x3-容器运行时"><a href="#0x3-容器运行时" class="headerlink" title="0x3. 容器运行时"></a>0x3. 容器运行时</h1><ol>
<li>转发IPv4并让iptables看到桥接流量</li>
</ol>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cat &gt;/etc/modules-load.d/k8s.conf &lt;&lt;EOF</span><br><span class="line">overlay</span><br><span class="line">br_netfilter</span><br><span class="line">EOF</span><br><span class="line">modprobe overlay</span><br><span class="line">modprobe br_netfilter</span><br><span class="line"></span><br><span class="line">cat &gt;/etc/sysctl.d/k8s.conf &lt;&lt;EOF</span><br><span class="line">net.bridge.bridge-nf-call-iptables=1</span><br><span class="line">net.bridge.bridge-nf-call-ip6tables=1</span><br><span class="line">net.ipv4.ip_forward=1</span><br><span class="line">EOF</span><br><span class="line">sysctl --system</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">通过运行以下指令确认 br_netfilter 和 overlay 模块被加载</span></span><br><span class="line">lsmod | egrep &#x27;overlay|br_netfilter&#x27;</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">通过运行以下指令确认 net.bridge.bridge-nf-call-iptables、net.bridge.bridge-nf-call-ip6tables 系统变量在你的 sysctl 配置中被设置为 1</span></span><br><span class="line">sysctl net.bridge.bridge-nf-call-iptables net.bridge.bridge-nf-call-ip6tables net.ipv4.ip_forward</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>安装容器运行时</li>
</ol>
<p><strong>注意：k8s v1.24及以后不在支持Docker Engine</strong></p>
<ul>
<li>安装Docker</li>
</ul>
<blockquote>
<p><a href="https://docs.docker.com/engine/install/centos/">Install Docker Engine on CentOS</a></p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">yum install -y yum-utils</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">设置yum阿里云镜像</span></span><br><span class="line">yum-config-manager --add-repo http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo</span><br><span class="line">mkdir -p /etc/docker</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">设置阿里云镜像/日志/cgroup驱动</span></span><br><span class="line">cat &gt;/etc/docker/daemon.json &lt;&lt;EOF</span><br><span class="line">&#123;</span><br><span class="line">&quot;exec-opts&quot;: [&quot;native.cgroupdriver=systemd&quot;],</span><br><span class="line">&quot;log-driver&quot;: &quot;json-file&quot;,</span><br><span class="line">&quot;log-opts&quot;: &#123;</span><br><span class="line">  &quot;max-size&quot;: &quot;100m&quot;</span><br><span class="line">&#125;,</span><br><span class="line">&quot;storage-driver&quot;: &quot;overlay2&quot;,</span><br><span class="line">&quot;storage-opts&quot;: [</span><br><span class="line">  &quot;overlay2.override_kernel_check=true&quot;</span><br><span class="line">],</span><br><span class="line">&quot;registry-mirrors&quot;:[&quot;https://hub-mirror.c.163.com&quot;,&quot;https://docker.mirrors.ustc.edu.cn&quot;,&quot;https://registry.docker-cn.com&quot;]</span><br><span class="line">&#125;</span><br><span class="line">EOF</span><br><span class="line">yum makecache fast</span><br><span class="line">yum install -y docker-ce-20.10.23 docker-ce-cli-20.10.23 containerd.io</span><br><span class="line">systemctl daemon-reload</span><br><span class="line">systemctl enable docker &amp;&amp; systemctl restart docker</span><br></pre></td></tr></table></figure>

<ul>
<li>安装containerd</li>
</ul>
<blockquote>
<p><a href="https://kubernetes.io/zh-cn/docs/setup/production-environment/container-runtimes/">container-runtimes</a></p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">yum install -y yum-utils</span><br><span class="line">yum-config-manager --add-repo http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo</span><br><span class="line">yum makecache fast</span><br><span class="line">yum install -y containerd.io</span><br><span class="line">mkdir -p /etc/containerd</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">生成默认文件</span></span><br><span class="line">containerd config default &gt; /etc/containerd/config.toml</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">编辑配置文件 设置驱动方式为systemd 设置pause镜像 镜像仓库的加速器</span></span><br><span class="line">sed -i &quot;s#SystemdCgroup = false#SystemdCgroup = true#g&quot; /etc/containerd/config.toml</span><br><span class="line">sed -i &quot;s#registry.k8s.io#registry.cn-hangzhou.aliyuncs.com/google_containers#g&quot; /etc/containerd/config.toml</span><br><span class="line">sed -i &quot;/\[plugins.\&quot;io.containerd.grpc.v1.cri\&quot;.registry.mirrors\]/a\        [plugins.\&quot;io.containerd.grpc.v1.cri\&quot;.registry.mirrors.\&quot;docker.io\&quot;]&quot; /etc/containerd/config.toml</span><br><span class="line">sed -i &quot;/\[plugins.\&quot;io.containerd.grpc.v1.cri\&quot;.registry.mirrors.\&quot;docker.io\&quot;\]/a\          endpoint = [\&quot;https://hub-mirror.c.163.com\&quot;,\&quot;https://docker.mirrors.ustc.edu.cn\&quot;,\&quot;https://registry.docker-cn.com\&quot;]&quot; /etc/containerd/config.toml</span><br><span class="line">sed -i &quot;/endpoint = \[\&quot;https:\/\/hub-mirror.c.163.com\&quot;,\&quot;https:\/\/docker.mirrors.ustc.edu.cn\&quot;,\&quot;https:\/\/registry.docker-cn.com\&quot;]/a\        [plugins.\&quot;io.containerd.grpc.v1.cri\&quot;.registry.mirrors.\&quot;registry.k8s.io\&quot;]&quot; /etc/containerd/config.toml</span><br><span class="line">sed -i &quot;/\[plugins.\&quot;io.containerd.grpc.v1.cri\&quot;.registry.mirrors.\&quot;registry.k8s.io\&quot;\]/a\          endpoint = [\&quot;registry.cn-hangzhou.aliyuncs.com/google_containers\&quot;]&quot; /etc/containerd/config.toml</span><br><span class="line">sed -i &quot;/endpoint = \[\&quot;registry.cn-hangzhou.aliyuncs.com\/google_containers\&quot;]/a\        [plugins.\&quot;io.containerd.grpc.v1.cri\&quot;.registry.mirrors.\&quot;k8s.gcr.io\&quot;]&quot; /etc/containerd/config.toml</span><br><span class="line">sed -i &quot;/\[plugins.\&quot;io.containerd.grpc.v1.cri\&quot;.registry.mirrors.\&quot;k8s.gcr.io\&quot;\]/a\          endpoint = [\&quot;registry.cn-hangzhou.aliyuncs.com/google_containers\&quot;]&quot; /etc/containerd/config.toml</span><br><span class="line">systemctl daemon-reload</span><br><span class="line">systemctl enable containerd &amp;&amp; systemctl restart containerd</span><br></pre></td></tr></table></figure>

<h1 id="0x4-安装k8s"><a href="#0x4-安装k8s" class="headerlink" title="0x4. 安装k8s"></a>0x4. 安装k8s</h1><blockquote>
<p><a href="https://kubernetes.io/zh/docs/reference/setup-tools/kubeadm/kubeadm-init/">kubeadm init</a></p>
<p><a href="https://kubernetes.io/zh-cn/docs/reference/command-line-tools-reference/kubelet/">kubelet</a></p>
</blockquote>
<ol>
<li>关闭swap分区或者禁用swap文件</li>
</ol>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">swapoff -a &amp;&amp; sed -ri &#x27;s/.*swap.*/#&amp;/&#x27; /etc/fstab</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>关闭selinux</li>
</ol>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">setenforce 0 &amp;&amp; sed -i &#x27;s/^SELINUX=enforcing$/SELINUX=permissive/&#x27; /etc/selinux/config</span><br></pre></td></tr></table></figure>

<ol start="3">
<li>安装k8s</li>
</ol>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">使用阿里云k8s源</span></span><br><span class="line">cat &gt;/etc/yum.repos.d/kubernetes.repo &lt;&lt;EOF</span><br><span class="line">[kubernetes]</span><br><span class="line">name=Kubernetes</span><br><span class="line">baseurl=https://mirrors.aliyun.com/kubernetes/yum/repos/kubernetes-el7-x86_64/</span><br><span class="line">enabled=1</span><br><span class="line">gpgcheck=0</span><br><span class="line">repo_gpgcheck=0</span><br><span class="line">gpgkey=https://mirrors.aliyun.com/kubernetes/yum/doc/yum-key.gpg https://mirrors.aliyun.com/kubernetes/yum/doc/rpm-package-key.gpg</span><br><span class="line">EOF</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">安装工具kubelet、kubeadm、kubectl</span></span><br><span class="line">yum install -y kubelet-1.23.17 kubeadm-1.23.17 kubectl-1.23.17 --disableexcludes=kubernetes</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">设置驱动方式为systemd</span></span><br><span class="line">cat &gt;/etc/sysconfig/kubelet &lt;&lt;EOF</span><br><span class="line">KUBELET_EXTRA_ARGS=&quot;--cgroup-driver=systemd&quot;</span><br><span class="line">EOF</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">设置容器运行时</span></span><br><span class="line">crictl config runtime-endpoint unix:///var/run/containerd/containerd.sock</span><br><span class="line">crictl config image-endpoint unix:///var/run/containerd/containerd.sock</span><br><span class="line">sed -i &#x27;/KUBELET_KUBEADM_ARGS/s/&quot;$/ --container-runtime=remote --container-runtime-endpoint=unix:\/\/\/run\/containerd\/containerd.sock&quot;/&#x27; /var/lib/kubelet/kubeadm-flags.env</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">kubelet开机自启</span></span><br><span class="line">systemctl enable --now kubelet</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看kubelet状态</span></span><br><span class="line">systemctl status kubelet</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">如果报错，查询错误信息</span></span><br><span class="line">journalctl -xe</span><br></pre></td></tr></table></figure>

<h1 id="0x5-运行k8s"><a href="#0x5-运行k8s" class="headerlink" title="0x5. 运行k8s"></a>0x5. 运行k8s</h1><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">mkdir -p /k8sdata/log/</span><br><span class="line">kubeadm init \</span><br><span class="line">  --apiserver-advertise-address=192.168.56.101 \</span><br><span class="line">  --image-repository=registry.cn-hangzhou.aliyuncs.com/google_containers \</span><br><span class="line">  --kubernetes-version=v1.23.17 \</span><br><span class="line">  --service-cidr=10.96.0.0/12 \</span><br><span class="line">  --pod-network-cidr=10.244.0.0/16 | tee /k8sdata/log/kubeadm-init.log</span><br><span class="line"></span><br><span class="line">mkdir -p &quot;$HOME&quot;/.kube</span><br><span class="line">cp -i /etc/kubernetes/admin.conf &quot;$HOME&quot;/.kube/config</span><br><span class="line">chown &quot;$(id -u)&quot;:&quot;$(id -g)&quot; &quot;$HOME&quot;/.kube/config</span><br></pre></td></tr></table></figure>

<p>提示：</p>
<ol>
<li>如果是搭建的服务器是主节点，则服务器至少2核2G，如果没有达到该配置但是仍想安装，则可以在<code>kubeadm init</code>命令行中使用<code>–ignore-preflight-errors=CpuNum</code>即可忽略报错。</li>
<li>如果初始化失败，通过<code>kubeadm reset</code>进行重设</li>
</ol>
<h1 id="0x6-安装网络系统"><a href="#0x6-安装网络系统" class="headerlink" title="0x6. 安装网络系统"></a>0x6. 安装网络系统</h1><ul>
<li>flannel</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">mkdir -p /k8sdata/network/</span><br><span class="line">wget --no-check-certificate -O /k8sdata/network/flannelkube-flannel.yml https://raw.githubusercontent.com/coreos/flannel/master/Documentation/kube-flannel.yml</span><br><span class="line">kubectl create -f /k8sdata/network/flannelkube-flannel.yml</span><br></pre></td></tr></table></figure>

<ul>
<li>calico</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">mkdir -p /k8sdata/network/</span><br><span class="line">wget --no-check-certificate -O /k8sdata/network/calico.yml https://docs.projectcalico.org/manifests/calico.yaml</span><br><span class="line">kubectl create -f /k8sdata/network/calico.yml</span><br></pre></td></tr></table></figure>

<h1 id="0x7-k8s命令行补全"><a href="#0x7-k8s命令行补全" class="headerlink" title="0x7. k8s命令行补全"></a>0x7. k8s命令行补全</h1><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">! grep -q kubectl &quot;$HOME/.bashrc&quot; &amp;&amp; echo &quot;source /usr/share/bash-completion/bash_completion&quot; &gt;&gt;&quot;$HOME/.bashrc&quot;</span><br><span class="line">! grep -q kubectl &quot;$HOME/.bashrc&quot; &amp;&amp; echo &quot;source &lt;(kubectl completion bash)&quot; &gt;&gt;&quot;$HOME/.bashrc&quot;</span><br><span class="line">! grep -q kubeadm &quot;$HOME/.bashrc&quot; &amp;&amp; echo &quot;source &lt;(kubeadm completion bash)&quot; &gt;&gt;&quot;$HOME/.bashrc&quot;</span><br><span class="line">! grep -q crictl &quot;$HOME/.bashrc&quot; &amp;&amp; echo &quot;source &lt;(crictl completion bash)&quot; &gt;&gt;&quot;$HOME/.bashrc&quot;</span><br><span class="line">source &quot;$HOME/.bashrc&quot;</span><br></pre></td></tr></table></figure>

<h1 id="0x8-k8s常用命令"><a href="#0x8-k8s常用命令" class="headerlink" title="0x8. k8s常用命令"></a>0x8. k8s常用命令</h1><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">获取节点</span></span><br><span class="line">kubectl get nodes -o wide</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">实时查询nodes状态</span></span><br><span class="line">watch kubectl get nodes -o wide</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">获取pod</span></span><br><span class="line">kubectl get pods --all-namespaces -o wide</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看镜像列表</span></span><br><span class="line">kubeadm config images list</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">节点加入集群</span></span><br><span class="line">kubeadm token create --print-join-command</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">描述node</span></span><br><span class="line">kubectl describe node k8s-master</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">描述pod</span></span><br><span class="line">kubectl describe pod kube-flannel-ds-hs8bq --namespace=kube-flannel</span><br></pre></td></tr></table></figure>

<h1 id="0x9-总结"><a href="#0x9-总结" class="headerlink" title="0x9. 总结"></a>0x9. 总结</h1><p>按照本教程可以部署一个可以正常运行的k8s，但本文仍存在一些待优化的地方，如在部署或者使用过程中遇到问题会在本文进行补充。</p>
]]></content>
      <categories>
        <category>DevOps</category>
      </categories>
      <tags>
        <tag>k8s</tag>
      </tags>
  </entry>
  <entry>
    <title>玩转微服务之Nacos</title>
    <url>/2022/06/20/%E7%8E%A9%E8%BD%AC%E5%BE%AE%E6%9C%8D%E5%8A%A1%E4%B9%8BNacos/</url>
    <content><![CDATA[<meta name="referrer" content="no-referrer"/>


<span id="more"></span>
<p>本文主要介绍 Nacos，它是阿里巴巴开源的管理微服务的平台，在国内很多公司都在使用 Nacos
作为微服务的注册中心和全局配置中心，而且它在国内的中文文档比较丰富，比较是国产开源的，而且背后有阿里撑腰，目前软件还是一直在更新当中，于是我就开始学习 Nacos，全局配置管理和配置共享这两个功能还是很实用的。废话不多说，开始今天的教程。</p>
<h1 id="0x0-介绍"><a href="#0x0-介绍" class="headerlink" title="0x0. 介绍"></a>0x0. 介绍</h1><p>Nacos 主要作用有 2 个</p>
<ol>
<li>实现服务注册与发现</li>
<li>作为配置中心</li>
</ol>
<h1 id="0x1-安装-Nacos"><a href="#0x1-安装-Nacos" class="headerlink" title="0x1. 安装 Nacos"></a>0x1. 安装 Nacos</h1><p>本文使用的是 Docker 部署 Nacos。</p>
<blockquote>
<p>Docker Hub nacos-server: <a href="https://hub.docker.com/r/nacos/nacos-server">https://hub.docker.com/r/nacos/nacos-server</a></p>
</blockquote>
<p>Nacos 单节点版运行命令如下:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker run --name forum-nacos -e MODE=standalone -p 8848:8848 --restart=always -d nacos/nacos-server</span><br></pre></td></tr></table></figure>

<p>参数解释</p>
<ul>
<li><strong>–name</strong> 容器的名称</li>
<li><strong>–name</strong> 容器的名称</li>
<li><strong>-e</strong> 传入参数</li>
<li><strong>-p</strong> 映射端口</li>
<li><strong>–restart=always</strong> 随着 Docker 启动而启动</li>
<li><strong>-d</strong> 后台运行</li>
</ul>
<p>运行好之后，访问<code>http://Nacos服务器的IP:8848/nacos</code>就可以访问 Nacos 控制台。</p>
<h1 id="0x2-Nacos-实现服务注册与发现"><a href="#0x2-Nacos-实现服务注册与发现" class="headerlink" title="0x2. Nacos 实现服务注册与发现"></a>0x2. Nacos 实现服务注册与发现</h1><h2 id="1-服务提供者-生产者"><a href="#1-服务提供者-生产者" class="headerlink" title="1. 服务提供者(生产者)"></a>1. 服务提供者(生产者)</h2><ol>
<li><p>新建一个名称为: <code>nacos-discovery-consumer</code>的 Spring Boot 工程。</p>
</li>
<li><p>引入依赖</p>
</li>
</ol>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-alibaba-nacos-config<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-alibaba-nacos-discovery<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ol start="3">
<li>在主类上添加<code>@EnableDiscoveryClient</code>注解</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableDiscoveryClient</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">NacosDiscoveryProviderApplication</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        SpringApplication.run(NacosDiscoveryProviderApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ol start="4">
<li>配置服务名称和 Nacos 地址</li>
</ol>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">server.port</span>=<span class="string">8081</span></span><br><span class="line"><span class="attr">spring.application.name</span>=<span class="string">nacos-discovery-consumer</span></span><br><span class="line"><span class="attr">spring.cloud.nacos.discovery.server-addr</span>=<span class="string">127.0.0.1:8848</span></span><br><span class="line"><span class="comment"># nacos认证信息</span></span><br><span class="line"><span class="attr">spring.cloud.nacos.username</span>=<span class="string">nacos</span></span><br><span class="line"><span class="attr">spring.cloud.nacos.password</span>=<span class="string">nacos</span></span><br></pre></td></tr></table></figure>

<ol start="5">
<li>启动应用，打开 Nacos 控制台-&gt;服务管理-&gt;服务列表</li>
</ol>
<h2 id="2-服务消费者-消费者"><a href="#2-服务消费者-消费者" class="headerlink" title="2. 服务消费者(消费者)"></a>2. 服务消费者(消费者)</h2><ol>
<li><p>新建一个名称为: <code>nacos-discovery-consumer</code>的 Spring Boot 工程。</p>
</li>
<li><p>引入依赖</p>
</li>
</ol>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-alibaba-nacos-config<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-alibaba-nacos-discovery<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ol start="3">
<li><p>在主类上添加<code>@EnableDiscoveryClient</code>注解</p>
</li>
<li><p>配置服务名称和 Nacos 地址</p>
</li>
</ol>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">server.port</span>=<span class="string">9023</span></span><br><span class="line"><span class="attr">server.servlet.context-path</span>=<span class="string">/provider</span></span><br><span class="line"><span class="attr">spring.application.name</span>=<span class="string">service-provider</span></span><br><span class="line"><span class="attr">spring.cloud.nacos.discovery.server-addr</span>=<span class="string">127.0.0.1:8848</span></span><br><span class="line"><span class="comment"># nacos认证信息</span></span><br><span class="line"><span class="attr">spring.cloud.nacos.username</span>=<span class="string">nacos</span></span><br><span class="line"><span class="attr">spring.cloud.nacos.password</span>=<span class="string">nacos</span></span><br></pre></td></tr></table></figure>

<h2 id="3-消费者调用生产者接口"><a href="#3-消费者调用生产者接口" class="headerlink" title="3. 消费者调用生产者接口"></a>3. 消费者调用生产者接口</h2><ol>
<li>在<code>provider</code>工程中添加一个测试接口</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestController</span> &#123;</span><br><span class="line">    <span class="meta">@GetMapping(value = &quot;/echo/&#123;str&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">echo</span><span class="params">(<span class="meta">@PathVariable</span> String str)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Hello Nacos Discovery &quot;</span> + str;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>在<code>consumer</code>工程中调用接口</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestController</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> RestTemplate restTemplate;</span><br><span class="line">    <span class="meta">@GetMapping(value = &quot;/echo/&#123;str&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">echo</span><span class="params">(<span class="meta">@PathVariable</span> String str)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> restTemplate.getForObject(<span class="string">&quot;http://service-provider/provider/echo/&quot;</span> + str, String.class);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ol start="3">
<li>请求消费者的接口，消费者会调用生产者的接口</li>
</ol>
<h1 id="0x3-Nacos-作为配置中心"><a href="#0x3-Nacos-作为配置中心" class="headerlink" title="0x3. Nacos 作为配置中心"></a>0x3. Nacos 作为配置中心</h1><p>进入 Nacos 的控制页面，在配置列表功能页面中，点击右上角的 <strong>+</strong> 按钮，进入<strong>新建配置</strong>页面，如下图填写内容：</p>
<p><img src="https://files.mdnice.com/user/10819/386ec27f-c8bd-468a-9137-7987a6e42112.png"></p>
<p>新建 Spring Boot 项目并引入依赖</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-alibaba-nacos-config<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>在<code>resources</code>新建<code>bootstrap.properties</code>(文件名称必须是 bootstrap，文件类型可以是.properties 或者.yaml)，文件内容如下:</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">server.port</span>=<span class="string">8081</span></span><br><span class="line"><span class="attr">spring.application.name</span>=<span class="string">forum-service</span></span><br><span class="line"><span class="attr">spring.cloud.nacos.config.server-addr</span>=<span class="string">127.0.0.1:8848</span></span><br></pre></td></tr></table></figure>

<p>配置解析:</p>
<ol>
<li><code>Data ID</code> 填 <code>forum-service</code>: 对应客户端的配置 <code>spring.cloud.nacos.config.prefix</code>，默认值为`${spring.application.name}``，即：服务名</li>
<li>配置格式选 <code>properties</code>：对应客户端的配置 <code>spring.cloud.nacos.config.file-extension</code>，默认值为 <code>properties</code></li>
<li><code>Group</code> 的值 <code>DEFAULT_GROUP</code>：对应客户端的配置 <code>spring.cloud.nacos.config.group</code>，默认值为 <code>DEFAULT_GROUP</code></li>
</ol>
<h2 id="1-配置的加载规则"><a href="#1-配置的加载规则" class="headerlink" title="1. 配置的加载规则"></a>1. 配置的加载规则</h2><p>在采用默认值的应用要加载的配置规则就是：<code>Data ID=$&#123;spring.application.name&#125;.properties，Group=DEFAULT_GROUP</code></p>
<p>如果我们想通过自定义配置，实现加载 Data ID=example.yaml，Group=DEV 的配置内容，则按照如下配置即可:</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring.cloud.nacos.config.prefix</span>=<span class="string">example</span></span><br><span class="line"><span class="attr">spring.cloud.nacos.config.file-extension</span>=<span class="string">yaml</span></span><br><span class="line"><span class="attr">spring.cloud.nacos.config.group</span>=<span class="string">DEV</span></span><br></pre></td></tr></table></figure>

<h2 id="2-多环境管理"><a href="#2-多环境管理" class="headerlink" title="2. 多环境管理"></a>2. 多环境管理</h2><ol>
<li>使用<code>Data ID</code>与<code>profiles</code>实现</li>
</ol>
<p>默认情况下<code>Data ID</code>的名称格式是这样的：<code>$&#123;spring.application.name&#125;.properties</code>，其实还包含了环境逻辑，我们在启动应用时，可以通过<code>spring.profiles.active</code>
来指定具体的环境名称，此时客户端就会把要获取配置的<code>Data ID</code>设置为：<code>$&#123;spring.application.name&#125;-$&#123;spring.profiles.active&#125;.properties</code></p>
<ol start="2">
<li>使用<code>Group</code>实现</li>
</ol>
<p><code>Group</code>在 Nacos 中是用来对<code>Data ID</code>做集合管理的重要概念。所以，如果我们把一个环境的配置视为一个集合，那么也就可以实现不同环境的配置管理。</p>
<ol start="3">
<li>使用<code>Namespace</code>实现</li>
</ol>
<p><code>Namespace</code>的常用场景之一是不同环境的配置的区分隔离，例如：开发测试环境和生产环境的资源（如配置、服务）隔离等。</p>
<p>可通过以下方式指定项目的<code>Namespace</code></p>
<p><img src="https://files.mdnice.com/user/10819/c829563b-25dc-4332-b15e-5c741eb5a8b9.png"></p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring.cloud.nacos.config.namespace</span>=<span class="string">c3583494-5c1e-42be-b946-fb3b726dfebe</span></span><br></pre></td></tr></table></figure>

<p>总结:</p>
<p>对于指定环境的配置（<code>spring.profiles.active=dev</code>、<code>spring.cloud.nacos.config.group=DEV</code>
、<code>spring.cloud.nacos.config.namespace=c3583494-5c1e-42be-b946-fb3b726dfebe</code>），都不要配置在应用的 bootstrap.properties
中。而是在发布脚本的启动命令中，用<code>-Dspring.profiles.active=dev</code> 的方式来动态指定，会更加灵活！</p>
<h2 id="3-Nacos-配置的多文件加载与共享配置"><a href="#3-Nacos-配置的多文件加载与共享配置" class="headerlink" title="3. Nacos 配置的多文件加载与共享配置"></a>3. Nacos 配置的多文件加载与共享配置</h2><ol>
<li>加载多个配置</li>
</ol>
<p><img src="https://files.mdnice.com/user/10819/43bbd25a-6137-4800-8b34-3c312e6753ce.png"></p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring.cloud.nacos.config.shared-configs[0].data-id</span>=<span class="string">forum-service</span></span><br><span class="line"><span class="attr">spring.cloud.nacos.config.shared-configs[0].group</span>=<span class="string">DEFAULT_GROUP</span></span><br><span class="line"><span class="attr">spring.cloud.nacos.config.shared-configs[0].refresh</span>=<span class="string">true</span></span><br><span class="line"><span class="attr">spring.cloud.nacos.config.shared-configs[1].data-id</span>=<span class="string">forum-mybatis-plus</span></span><br><span class="line"><span class="attr">spring.cloud.nacos.config.shared-configs[1].group</span>=<span class="string">DEFAULT_GROUP</span></span><br><span class="line"><span class="attr">spring.cloud.nacos.config.shared-configs[1].refresh</span>=<span class="string">true</span></span><br></pre></td></tr></table></figure>

<p><code>spring.cloud.nacos.config.shared-configs</code>配置是一个数组 List 类型。每个配置中包含三个参数：<code>data-id</code>、<code>group</code>，<code>refresh</code>。<code>refresh</code>
参数控制这个配置文件中的内容时候支持自动刷新，默认情况下，只有默认加载的配置才会自动刷新，对于这些扩展的配置加载内容需要配置该设置时候才会实现自动刷新。</p>
<ol start="2">
<li>配置加载的优先级</li>
</ol>
<ul>
<li>A: 通过 <code>spring.cloud.nacos.config.shared-dataids</code> 定义的共享配置</li>
<li>B: 通过 <code>spring.cloud.nacos.config.ext-config[n]</code>定义的加载配置</li>
<li>C: 通过内部规则（<code>spring.cloud.nacos.config.prefix</code>、<code>spring.cloud.nacos.config.file-extension</code>
、<code>spring.cloud.nacos.config.group</code> 这几个参数）拼接出来的配置</li>
</ul>
<p>优先级关系是：A &lt; B &lt; C</p>
<h1 id="0x4-参考"><a href="#0x4-参考" class="headerlink" title="0x4. 参考"></a>0x4. 参考</h1><ol>
<li><a href="https://nacos.io/zh-cn/docs/what-is-nacos.html">Nacos</a></li>
</ol>
]]></content>
      <categories>
        <category>微服务</category>
      </categories>
      <tags>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title>Docker搭建ShadowsocksR服务进行手机卡免流详细教程</title>
    <url>/2022/06/07/Docker%E6%90%AD%E5%BB%BAShadowsocksR%E5%85%8D%E6%B5%81%E6%95%99%E7%A8%8B/</url>
    <content><![CDATA[<meta name="referrer" content="no-referrer"/>
基于Docker快速搭建ShadowsocksR服务

<span id="more"></span>

<h1 id="0x0-前言"><a href="#0x0-前言" class="headerlink" title="0x0. 前言"></a>0x0. 前言</h1><p>通常手机卡免流可以借助的常用工具是OpenVPN、Tiny、ShadowsocksR（以下简称SSR）。很久之前用过OpenVPN，但是搭建和配置比较麻烦，例如需要写”线路“文件。
本文主要是使用SSR这个开源工具，基于Docker快速搭建。</p>
<blockquote>
<p>SSR开源地址：<a href="https://github.com/shadowsocksrr/shadowsocksr">https://github.com/shadowsocksrr/shadowsocksr</a></p>
</blockquote>
<h1 id="0x1-安装教程"><a href="#0x1-安装教程" class="headerlink" title="0x1. 安装教程"></a>0x1. 安装教程</h1><h2 id="1-安装Docker并pull镜像"><a href="#1-安装Docker并pull镜像" class="headerlink" title="1). 安装Docker并pull镜像"></a>1). 安装Docker并pull镜像</h2><p>Docker安装教程可以参考官网的文档或者之前的文章。</p>
<ol>
<li><a href="https://docs.docker.com/engine/install/">Docker官方安装文档</a></li>
<li><a href="https://jonssonyan.com/2022/01/06/%E7%8E%A9%E8%BD%ACLinux%E4%B9%8BDocker/">玩转Linux之Docker</a></li>
</ol>
<p>以下是SSR的DockerHub地址，类似镜像很多，我找了一个可以使用的，按道理优先选择使用数量最多的镜像。</p>
<blockquote>
<p><a href="https://hub.docker.com/r/teddysun/shadowsocks-r/">https://hub.docker.com/r/teddysun/shadowsocks-r/</a></p>
</blockquote>
<h2 id="2-新建配置文件"><a href="#2-新建配置文件" class="headerlink" title="2). 新建配置文件"></a>2). 新建配置文件</h2><p>本文SSR配置文件路径为<code>/jsdata/ssr/config.json</code>，文件内容如下：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;server&quot;</span><span class="punctuation">:</span> <span class="string">&quot;0.0.0.0&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;server_ipv6&quot;</span><span class="punctuation">:</span> <span class="string">&quot;::&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;server_port&quot;</span><span class="punctuation">:</span> <span class="number">80</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;local_address&quot;</span><span class="punctuation">:</span> <span class="string">&quot;127.0.0.1&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;local_port&quot;</span><span class="punctuation">:</span> <span class="number">1080</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;password&quot;</span><span class="punctuation">:</span> <span class="string">&quot;123456&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;timeout&quot;</span><span class="punctuation">:</span> <span class="number">120</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;method&quot;</span><span class="punctuation">:</span> <span class="string">&quot;chacha20&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;protocol&quot;</span><span class="punctuation">:</span> <span class="string">&quot;auth_chain_a&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;protocol_param&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;obfs&quot;</span><span class="punctuation">:</span> <span class="string">&quot;http_simple&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;obfs_param&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;redirect&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;dns_ipv6&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;fast_open&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;workers&quot;</span><span class="punctuation">:</span> <span class="number">1</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<p>参数解释：</p>
<ul>
<li><code>server_port</code>：SSR端口，建议80</li>
<li><code>password</code>：SSR连接密码</li>
<li><code>method</code>：加密方式（不重要），常见的加密方式自行谷歌</li>
<li><code>protocol</code>：协议（不重要），常见的协议自行谷歌</li>
<li><code>obfs</code>：混淆方式（重要），<strong>必须是http_simple</strong></li>
</ul>
<h2 id="3-运行镜像"><a href="#3-运行镜像" class="headerlink" title="3). 运行镜像"></a>3). 运行镜像</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker pull teddysun/shadowsocks-r</span><br><span class="line">docker run -d --name js-ssr --restart=always \</span><br><span class="line">    -p 80:80 -p 80:80/udp \</span><br><span class="line">    -v /jsdata/ssr/config.json:/etc/shadowsocks-r/config.json \</span><br><span class="line">    teddysun/shadowsocks-r</span><br></pre></td></tr></table></figure>

<p>参数解释：</p>
<ul>
<li><code>-d</code>：后台运行容器，并返回容器ID</li>
<li><code>--restart=always</code>：随着Docker启动而启动</li>
<li><code>--name</code>：为容器指定一个名称</li>
<li><code>-p</code>：映射端口，格式为：宿主机端口:容器端口</li>
<li><code>-v</code>：映射卷</li>
</ul>
<h1 id="0x2-客户端推荐"><a href="#0x2-客户端推荐" class="headerlink" title="0x2. 客户端推荐"></a>0x2. 客户端推荐</h1><p>Android：<a href="https://github.com/shadowsocksrr/shadowsocksr-android/releases">shadowsocksr-android</a></p>
<p>IOS：<a href="https://apps.apple.com/us/app/shadowrocket/id932747118">Shadowrocket</a></p>
<p>Windows：<a href="https://github.com/shadowsocksrr/shadowsocksr-csharp/releases">shadowsocksr-csharp</a></p>
<h1 id="0x3-混淆参数"><a href="#0x3-混淆参数" class="headerlink" title="0x3. 混淆参数"></a>0x3. 混淆参数</h1><p>免流的核心是混淆参数，对应参数可以通过抓包获得，原理是利用运营商流量识别系统漏洞，欺骗流量计费系统从而达到免流使用流量的目的，例如我们设置混淆参数为<code>ltevod.tv189.cn</code>
（这是最经典的电信爱看免流混淆参数），当我们连接服务器使用流量时，计费系统会误以为是使用爱看的流量，自然也就是从爱看定向流量包里面扣除，而不是从我们通用流量中扣除。
目前通过定向流量免流的方式还是可以使用的，配合互联网卡还是很香。16年左右很好免，但是随着运营商系统识别能力变强，很多混淆参数都被和谐，只有定向流量的方式最稳定。</p>
<p>以下列举了常见的免流混淆参数（主要以定向流量为主），不保证所有都可以用，如果没有可以自行谷歌或者抓包。</p>
<figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line">全国阿里鱼卡阿里宝卡虾米音乐B</span><br><span class="line">m128<span class="selector-class">.xiami</span><span class="selector-class">.net</span></span><br><span class="line">全国阿里鱼卡优酷视频A</span><br><span class="line">vali<span class="selector-class">.cp31</span><span class="selector-class">.ott</span><span class="selector-class">.cibntv</span><span class="selector-class">.net</span></span><br><span class="line">全国电信天翼视讯A</span><br><span class="line"><span class="selector-tag">h5</span><span class="selector-class">.nty</span><span class="selector-class">.tv189</span><span class="selector-class">.com</span></span><br><span class="line">全国电信天翼视讯B</span><br><span class="line">vod3<span class="selector-class">.nty</span><span class="selector-class">.tv189</span><span class="selector-class">.cn</span></span><br><span class="line">全国网易白金卡爱奇艺</span><br><span class="line">msga<span class="selector-class">.cupid</span><span class="selector-class">.iqiyi</span><span class="selector-class">.com</span></span><br><span class="line">优酷A</span><br><span class="line">sdk<span class="selector-class">.m</span><span class="selector-class">.youku</span><span class="selector-class">.com</span></span><br><span class="line">全国阿里鱼卡钉钉</span><br><span class="line">g<span class="selector-class">.alicdn</span><span class="selector-class">.com</span></span><br><span class="line">全国阿里鱼卡卡支付宝</span><br><span class="line">ds<span class="selector-class">.alipay</span><span class="selector-class">.com</span></span><br><span class="line">全国阿里鱼卡优酷视频B</span><br><span class="line">actives<span class="selector-class">.youku</span><span class="selector-class">.com</span></span><br><span class="line">全国网易白金卡<span class="number">163</span>邮箱</span><br><span class="line">g6a49<span class="selector-class">.mail</span>.<span class="number">163</span><span class="selector-class">.com</span></span><br><span class="line">爱看<span class="number">4</span>G</span><br><span class="line">ltevod<span class="selector-class">.tv189</span><span class="selector-class">.cn</span></span><br><span class="line">爱听<span class="number">4</span>G</span><br><span class="line">clientst<span class="selector-class">.musicway</span><span class="selector-class">.cn</span></span><br><span class="line">爱玩<span class="number">4</span>G</span><br><span class="line">open.<span class="number">4</span>g<span class="selector-class">.play</span><span class="selector-class">.cn</span></span><br><span class="line">微博V卡A</span><br><span class="line">new<span class="selector-class">.vip</span><span class="selector-class">.weibo</span><span class="selector-class">.cn</span></span><br><span class="line">微博V卡B</span><br><span class="line">m<span class="selector-class">.weibo</span><span class="selector-class">.cn</span></span><br><span class="line">联通大王卡QQ音乐A</span><br><span class="line"><span class="selector-tag">dl</span><span class="selector-class">.stream</span><span class="selector-class">.qqmusic</span><span class="selector-class">.com</span></span><br><span class="line">全国百度圣卡爱奇艺</span><br><span class="line">baiducdncnc<span class="selector-class">.inter</span><span class="selector-class">.iqiyi</span><span class="selector-class">.com</span></span><br><span class="line">全国阿里宝卡钉钉</span><br><span class="line">tms<span class="selector-class">.dingtalk</span><span class="selector-class">.com</span></span><br><span class="line">全国联通沃音乐</span><br><span class="line">music<span class="selector-class">.hxll</span><span class="selector-class">.wostore</span><span class="selector-class">.cn</span></span><br><span class="line">联通大王卡</span><br><span class="line">szminorshort<span class="selector-class">.weixin</span><span class="selector-class">.qq</span><span class="selector-class">.com</span></span><br><span class="line">szshort<span class="selector-class">.weixin</span><span class="selector-class">.qq</span><span class="selector-class">.com</span></span><br><span class="line">dns<span class="selector-class">.weixin</span><span class="selector-class">.qq</span><span class="selector-class">.com</span></span><br><span class="line"><span class="selector-tag">dl</span><span class="selector-class">.stream</span><span class="selector-class">.qqmusic</span><span class="selector-class">.com</span></span><br><span class="line">m<span class="selector-class">.y</span><span class="selector-class">.qq</span><span class="selector-class">.com</span></span><br><span class="line">commdate<span class="selector-class">.vqq</span><span class="selector-class">.com</span></span><br><span class="line">联通哔哩哔哩卡</span><br><span class="line">app<span class="selector-class">.bilibili</span><span class="selector-class">.com</span></span><br><span class="line">m128<span class="selector-class">.xiami</span><span class="selector-class">.net</span></span><br><span class="line">g<span class="selector-class">.alicdn</span><span class="selector-class">.com</span></span><br><span class="line">ds<span class="selector-class">.alipay</span><span class="selector-class">.com</span></span><br><span class="line"><span class="selector-tag">h5</span><span class="selector-class">.m</span><span class="selector-class">.taobao</span><span class="selector-class">.com</span></span><br><span class="line">static<span class="selector-class">.shuqiread</span><span class="selector-class">.com</span></span><br><span class="line">wxapi<span class="selector-class">.taobao</span><span class="selector-class">.com</span></span><br><span class="line">pic<span class="selector-class">.xiami</span><span class="selector-class">.net</span></span><br><span class="line">优酷视频</span><br><span class="line">vali<span class="selector-class">.cp31</span><span class="selector-class">.ott</span><span class="selector-class">.cibntv</span><span class="selector-class">.net</span></span><br><span class="line">actives<span class="selector-class">.youku</span><span class="selector-class">.com</span></span><br><span class="line">sdk<span class="selector-class">.m</span><span class="selector-class">.youku</span><span class="selector-class">.com</span></span><br><span class="line">www<span class="selector-class">.youku</span><span class="selector-class">.com</span></span><br><span class="line">ding<span class="selector-class">.youku</span><span class="selector-class">.com</span></span><br><span class="line">电信百度圣卡</span><br><span class="line">msg.<span class="number">71</span><span class="selector-class">.am</span></span><br><span class="line">baiducdncnc<span class="selector-class">.inter</span><span class="selector-class">.iqiyi</span><span class="selector-class">.com</span></span><br><span class="line">cmonitor<span class="selector-class">.iqiyi</span><span class="selector-class">.com</span></span><br><span class="line">client<span class="selector-class">.map</span><span class="selector-class">.baidu</span><span class="selector-class">.com</span></span><br><span class="line">news<span class="selector-class">.baidu</span><span class="selector-class">.com</span></span><br><span class="line">天翼视讯</span><br><span class="line"><span class="selector-tag">h5</span><span class="selector-class">.nty</span><span class="selector-class">.tv189</span><span class="selector-class">.com</span></span><br><span class="line">vod3<span class="selector-class">.nty</span><span class="selector-class">.tv189</span><span class="selector-class">.cn</span></span><br><span class="line">www<span class="selector-class">.baidu</span>.com/<span class="selector-tag">h5</span><span class="selector-class">.nty</span><span class="selector-class">.tv189</span>.com</span><br></pre></td></tr></table></figure>

<h1 id="0x4-总结"><a href="#0x4-总结" class="headerlink" title="0x4. 总结"></a>0x4. 总结</h1><p>免流的方式有很多种，有的是识别host（多数情况也是这种），有的是识别user-agent。总的来说，定向流量免流还可以玩玩，其他的容易翻车。
不比当年，免流已经成为历史，不过偶尔玩一下还是可以的，比如我现在用的是电信的爱听和爱玩，每月加起来12G，够日常使用了。</p>
]]></content>
      <categories>
        <category>DevOps</category>
      </categories>
  </entry>
  <entry>
    <title>玩转Nginx之http强转https</title>
    <url>/2022/04/02/%E7%8E%A9%E8%BD%ACNginx%E4%B9%8Bhttp%E5%BC%BA%E8%BD%AChttps/</url>
    <content><![CDATA[<meta name="referrer" content="no-referrer"/>


<span id="more"></span>

<h1 id="0x0-准备"><a href="#0x0-准备" class="headerlink" title="0x0. 准备"></a>0x0. 准备</h1><ol>
<li>Nginx</li>
<li>域名证书</li>
</ol>
<h1 id="0x1-安装-Nginx"><a href="#0x1-安装-Nginx" class="headerlink" title="0x1. 安装 Nginx"></a>0x1. 安装 Nginx</h1><p>本文使用的是 Nginx 1.18.0，安装过程略。</p>
<ol>
<li>使用官方安装包安装</li>
</ol>
<blockquote>
<p>Nginx 官网：<a href="https://nginx.org/en/download.html">https://nginx.org/en/download.html</a></p>
</blockquote>
<ol start="2">
<li>使用 Docker 部署</li>
</ol>
<blockquote>
<p>Docker Hub - Nginx：<a href="https://hub.docker.com/_/nginx">https://hub.docker.com/_/nginx</a></p>
</blockquote>
<h1 id="0x2-http-强转-https"><a href="#0x2-http-强转-https" class="headerlink" title="0x2. http 强转 https"></a>0x2. http 强转 https</h1><h2 id="1-使用-return-rewrite"><a href="#1-使用-return-rewrite" class="headerlink" title="1). 使用 return/rewrite"></a>1). 使用 return/rewrite</h2><p>以下是 Nginx 配置</p>
<ol>
<li>return 写法</li>
</ol>
<figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">server</span> &#123;</span><br><span class="line">    <span class="keyword">listen</span>       <span class="number">80</span>;</span><br><span class="line">    server_name  your_domain;</span><br><span class="line">    <span class="keyword">return</span>  ^(.*)$  your_https_url;</span><br><span class="line"></span><br><span class="line">    # 自定义域名设置</span><br><span class="line">    #<span class="keyword">if</span> ($host = &quot;eq_domain&quot;) &#123;</span><br><span class="line">    #  <span class="keyword">return</span>  ^(.*)$  your_https_url;</span><br><span class="line">    #&#125;</span><br><span class="line"></span><br><span class="line">    access_log  /var/<span class="keyword">log</span>/nginx/host.<span class="keyword">access</span>.<span class="keyword">log</span>  main;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">location</span> / &#123;</span><br><span class="line">        root   /usr/<span class="keyword">share</span>/nginx/html;</span><br><span class="line">        <span class="keyword">index</span>  <span class="keyword">index</span>.html <span class="keyword">index</span>.htm;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>解释：</p>
<ul>
<li>your_domain：你的域名</li>
<li>eq_domain：匹配上的域名</li>
<li>your_https_url：你想要强转的 https URL</li>
</ul>
<ol start="2">
<li>rewrite 写法</li>
</ol>
<figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">server</span> &#123;</span><br><span class="line">    <span class="keyword">listen</span>       <span class="number">80</span>;</span><br><span class="line">    server_name  your_domain;</span><br><span class="line">    <span class="keyword">return</span>  <span class="number">301</span>  your_https_url;</span><br><span class="line"></span><br><span class="line">    # 自定义域名设置</span><br><span class="line">    #<span class="keyword">if</span> ($host = &quot;eq_domain&quot;) &#123;</span><br><span class="line">    #  <span class="keyword">return</span>  <span class="number">301</span>  your_https_url;</span><br><span class="line">    #&#125;</span><br><span class="line"></span><br><span class="line">    access_log  /var/<span class="keyword">log</span>/nginx/host.<span class="keyword">access</span>.<span class="keyword">log</span>  main;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">location</span> / &#123;</span><br><span class="line">        root   /usr/<span class="keyword">share</span>/nginx/html;</span><br><span class="line">        <span class="keyword">index</span>  <span class="keyword">index</span>.html <span class="keyword">index</span>.htm;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>解释：</p>
<ul>
<li>your_domain：你的域名</li>
<li>eq_domain：匹配上的域名</li>
<li>your_https_url：你想要强转的 https URL</li>
</ul>
<h2 id="2-使用-497-状态码"><a href="#2-使用-497-状态码" class="headerlink" title="2). 使用 497 状态码"></a>2). 使用 497 状态码</h2><p>以下是 Nginx 配置</p>
<ol>
<li>配置 80</li>
</ol>
<p>本机 80 端口强转至其他 https URL</p>
<figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">server</span> &#123;</span><br><span class="line">    <span class="keyword">listen</span>       <span class="number">80</span>;</span><br><span class="line">    server_name  your_domain;</span><br><span class="line"></span><br><span class="line">    access_log  /var/<span class="keyword">log</span>/nginx/host.<span class="keyword">access</span>.<span class="keyword">log</span>  main;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">location</span> / &#123;</span><br><span class="line">        root   /usr/<span class="keyword">share</span>/nginx/html;</span><br><span class="line">        <span class="keyword">index</span>  <span class="keyword">index</span>.html <span class="keyword">index</span>.htm;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    error_page  <span class="number">497</span>              your_https_url;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>解释：</p>
<ul>
<li>your_domain：你的域名</li>
<li>your_https_url：你想要强转的 https URL</li>
</ul>
<ol start="2">
<li>配置 80 和 443</li>
</ol>
<p>本机 80 端口的 http 强转至 本机 443 端口的 https</p>
<figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="section">server</span> &#123;</span><br><span class="line">    <span class="attribute">listen</span>       <span class="number">80</span>;</span><br><span class="line">    <span class="attribute">listen</span>       <span class="number">443</span> ssl;</span><br><span class="line">    <span class="attribute">server_name</span>  your_domain;</span><br><span class="line"></span><br><span class="line">    <span class="comment">#强制ssl</span></span><br><span class="line">    <span class="attribute">ssl</span> <span class="literal">on</span>;</span><br><span class="line">    <span class="attribute">ssl_certificate</span>      your_crt_path.crt;</span><br><span class="line">    <span class="attribute">ssl_certificate_key</span>  your_key_path.key;</span><br><span class="line">    <span class="comment">#缓存有效期</span></span><br><span class="line">    <span class="attribute">ssl_session_timeout</span>  <span class="number">5m</span>;</span><br><span class="line">    <span class="comment">#安全链接可选的加密协议</span></span><br><span class="line">    <span class="attribute">ssl_protocols</span>  TLSv1 TLSv1.<span class="number">1</span> TLSv1.<span class="number">2</span>;</span><br><span class="line">    <span class="comment">#加密算法</span></span><br><span class="line">    <span class="attribute">ssl_ciphers</span>  ECDHE-RSA-AES128-GCM-SHA256:ECDHE:ECDH:AES:HIGH:!NULL:!aNULL:!MD5:!ADH:!RC4;</span><br><span class="line">    <span class="comment">#使用服务器端的首选算法</span></span><br><span class="line">    <span class="attribute">ssl_prefer_server_ciphers</span>  <span class="literal">on</span>;</span><br><span class="line"></span><br><span class="line">    <span class="attribute">access_log</span>  /var/log/nginx/host.access.log  main;</span><br><span class="line"></span><br><span class="line">    <span class="section">location</span> / &#123;</span><br><span class="line">        <span class="attribute">root</span>   /usr/share/nginx/html;</span><br><span class="line">        <span class="attribute">index</span>  index.html index.htm;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="attribute">error_page</span>  <span class="number">497</span>              https://<span class="variable">$host</span><span class="variable">$uri</span>?<span class="variable">$args</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>解释：</p>
<ul>
<li>your_domain：你的域名</li>
<li>your_crt_path：证书 crt 文件位置</li>
<li>your_key_path：证书 key 文件位置</li>
</ul>
<h2 id="3-利用-meta-的刷新作用"><a href="#3-利用-meta-的刷新作用" class="headerlink" title="3). 利用 meta 的刷新作用"></a>3). 利用 meta 的刷新作用</h2><p>以下是 Nginx 配置</p>
<figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">server</span> &#123;</span><br><span class="line">    <span class="keyword">listen</span>       <span class="number">80</span>;</span><br><span class="line">    server_name  your_domain;</span><br><span class="line"></span><br><span class="line">    access_log  /var/<span class="keyword">log</span>/nginx/host.<span class="keyword">access</span>.<span class="keyword">log</span>  main;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">location</span> / &#123;</span><br><span class="line">        root   /usr/<span class="keyword">share</span>/nginx/html;</span><br><span class="line">        <span class="keyword">index</span>  <span class="keyword">index</span>.html <span class="keyword">index</span>.htm;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在<code>/usr/share/nginx/html</code>新建<code>index.html</code>/<code>index.htm</code>，文件内容如下：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;refresh&quot;</span> <span class="attr">content</span>=<span class="string">&quot;0;url=your_https_url&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>解释：</p>
<ul>
<li><code>your_domain</code>：你的域名</li>
<li><code>your_https_url</code>：你想要强转的 https URL</li>
</ul>
]]></content>
      <categories>
        <category>DevOps</category>
      </categories>
      <tags>
        <tag>nginx</tag>
      </tags>
  </entry>
  <entry>
    <title>Windows10配置Rust开发环境</title>
    <url>/2022/04/02/Windows10%E9%85%8D%E7%BD%AERust%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83/</url>
    <content><![CDATA[<meta name="referrer" content="no-referrer"/>


<span id="more"></span>

<h1 id="0x0-相关概念"><a href="#0x0-相关概念" class="headerlink" title="0x0. 相关概念"></a>0x0. 相关概念</h1><h2 id="1-channel"><a href="#1-channel" class="headerlink" title="1). channel"></a>1). channel</h2><p>Rust 发布在三个不同的 channel 上：stable、beta、nightly，简单说就是三种不同的版本。</p>
<ul>
<li>stable：Rust 的稳定版本，每 6 周发布一次。</li>
<li>beta：Rust 的公开测试版本，将是下一个 stable 版本。</li>
<li>nightly：每天更新，包含以一些实验性的新特性。</li>
</ul>
<h2 id="2-toolchain"><a href="#2-toolchain" class="headerlink" title="2). toolchain"></a>2). toolchain</h2><p>一套 Rust 组件，包括编译器及其相关工具，并且包含 channel，版本及支持的平台信息。</p>
<h2 id="3-target"><a href="#3-target" class="headerlink" title="3). target"></a>3). target</h2><p>指编译的目标平台，即：编译后的程序在哪种操作系统上运行。</p>
<h2 id="4-component"><a href="#4-component" class="headerlink" title="4). component"></a>4). component</h2><p>toolchain 是由 component 组成的。</p>
<p>查看所有可用和已经安装的组件命令如下：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">rustup component list</span><br></pre></td></tr></table></figure>

<p>rustup 默认安装的组件：</p>
<ul>
<li>rustc：Rust 编译器。</li>
<li>rust-std：Rust 标准库。</li>
<li>cargo：包管理和构建工具。</li>
<li>rust-docs：Rust 文档。</li>
<li>rustfmt：用来格式化 Rust 源代码。</li>
<li>clippy：Rust 的代码检查工具。</li>
</ul>
<h2 id="5-profile"><a href="#5-profile" class="headerlink" title="5). profile"></a>5). profile</h2><p>为了方便对 component 进行管理，使用 profile 定义一组 component。</p>
<p>不同的 profile 包含不同的组件，安装 rustup 时有三种 profile 可选：</p>
<table>
<thead>
<tr>
<th>Profile</th>
<th>components</th>
</tr>
</thead>
<tbody><tr>
<td>minimal</td>
<td>rustc, rust-std, cargo</td>
</tr>
<tr>
<td>default</td>
<td>rustc, rust-std, cargo, rust-docs, rustfmt, clippy</td>
</tr>
<tr>
<td>complete</td>
<td>all</td>
</tr>
</tbody></table>
<p>修改 profile 命令如下：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">rustup <span class="built_in">set</span> profile minimal</span><br></pre></td></tr></table></figure>

<h1 id="0x1-下载-Rust"><a href="#0x1-下载-Rust" class="headerlink" title="0x1. 下载 Rust"></a>0x1. 下载 Rust</h1><blockquote>
<p>Rust 官网：<a href="https://www.rust-lang.org/tools/install">https://www.rust-lang.org/tools/install</a></p>
</blockquote>
<h1 id="0x2-安装-Rust"><a href="#0x2-安装-Rust" class="headerlink" title="0x2. 安装 Rust"></a>0x2. 安装 Rust</h1><p><img src="https://files.mdnice.com/user/10819/f08cc248-8676-49ca-8685-e09aa19713a4.png"></p>
<p>默认情况，Rust 依赖 <code>C++ build tools</code>，没有安装也关系。</p>
<p><img src="https://files.mdnice.com/user/10819/3170ea3b-07d8-4757-85eb-65979bbed257.png"></p>
<p>这里我么选择 2，进行自定义安装。</p>
<p>输入：<code>x86_64-pc-windows-gnu</code>，其他的默认。</p>
<p>最后会确认安装信息，回车进行安装，会从网上下载文件，所以安装过程需要保证网络正常。</p>
<p>以下是一些常用的命令：</p>
<ol>
<li>rustup 相关</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 显示当前安装的工具链信息</span></span><br><span class="line">rustup show</span><br><span class="line"><span class="comment"># 检查安装更新</span></span><br><span class="line">rustup update</span><br><span class="line"><span class="comment"># 卸载</span></span><br><span class="line">rustup self uninstall</span><br><span class="line"><span class="comment"># 设置当前默认工具链</span></span><br><span class="line">rustup default stable-x86_64-pc-windows-gnu</span><br><span class="line"><span class="comment"># 查看帮助</span></span><br><span class="line">rustup -h</span><br><span class="line"><span class="comment"># --------------------------&gt;配置工具链</span></span><br><span class="line"><span class="comment"># 查看工具链</span></span><br><span class="line">rustup toolchain list</span><br><span class="line"><span class="comment"># 安装工具链</span></span><br><span class="line">rustup toolchain install stable-x86_64-pc-windows-gnu</span><br><span class="line"><span class="comment"># 卸载工具链</span></span><br><span class="line">rustup toolchain uninstall stable-x86_64-pc-windows-gnu</span><br><span class="line"><span class="comment"># 设置自定义工具链</span></span><br><span class="line">rustup toolchain <span class="built_in">link</span> &lt;toolchain-name&gt; <span class="string">&quot;&lt;toolchain-path&gt;&quot;</span></span><br><span class="line"><span class="comment"># --------------------------&gt;配置一个目录以及其子目录的默认工具链</span></span><br><span class="line"><span class="comment"># 查看已设置的默认工具链</span></span><br><span class="line">rustup override list</span><br><span class="line"><span class="comment"># 设置该目录以及其子目录的默认工具链</span></span><br><span class="line">rustup override <span class="built_in">set</span> &lt;toolchain&gt; --path &lt;path&gt;</span><br><span class="line"><span class="comment"># 取消目录以及其子目录的默认工具链</span></span><br><span class="line">rustup override <span class="built_in">unset</span> --path &lt;path&gt;</span><br><span class="line"><span class="comment"># --------------------------&gt;配置工具链的可用目标</span></span><br><span class="line"><span class="comment"># 查看目标列表</span></span><br><span class="line">rustup target list</span><br><span class="line"><span class="comment"># 安装目标</span></span><br><span class="line">rustup target add &lt;target&gt;</span><br><span class="line"><span class="comment"># 卸载目标</span></span><br><span class="line">rustup target remove &lt;target&gt;</span><br><span class="line"><span class="comment"># 为特定工具链安装目标</span></span><br><span class="line">rustup target add --toolchain &lt;toolchain&gt; &lt;target&gt;</span><br><span class="line"><span class="comment"># --------------------------&gt;配置 rustup 安装的组件</span></span><br><span class="line"><span class="comment"># 查看可用组件</span></span><br><span class="line">rustup component list</span><br><span class="line"><span class="comment"># 安装组件</span></span><br><span class="line">rustup component add &lt;component&gt;</span><br><span class="line"><span class="comment"># 卸载组件</span></span><br><span class="line">rustup component remove &lt;component&gt;</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>rustc 相关</li>
</ol>
<figure class="highlight applescript"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 查看rustc版本</span></span><br><span class="line">rustc <span class="comment">--version</span></span><br></pre></td></tr></table></figure>

<ol start="3">
<li>cargo 相关</li>
</ol>
<figure class="highlight smali"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 查看cargo版本</span></span><br><span class="line">cargo --version</span><br><span class="line"><span class="comment"># 新建项目</span></span><br><span class="line">cargo<span class="built_in"> new </span>&lt;project_name&gt;</span><br><span class="line"><span class="comment"># 构建项目</span></span><br><span class="line">cargo build</span><br><span class="line"><span class="comment"># 运行项目</span></span><br><span class="line">cargo run</span><br><span class="line"><span class="comment"># 检查项目</span></span><br><span class="line">cargo<span class="built_in"> check</span></span><br><span class="line"><span class="built_in"></span><span class="comment"># 安装Rust二进制文件</span></span><br><span class="line">cargo install</span><br><span class="line"><span class="comment"># 卸载Rust二进制文件</span></span><br><span class="line">cargo uninstall</span><br><span class="line"><span class="comment"># 查看帮助</span></span><br><span class="line">cargo -h</span><br></pre></td></tr></table></figure>

<h1 id="0x3-配置工具链安装位置"><a href="#0x3-配置工具链安装位置" class="headerlink" title="0x3. 配置工具链安装位置"></a>0x3. 配置工具链安装位置</h1><p>在系统环境变量中添加如下变量：</p>
<p><code>CARGO_HOME</code> 指定 <code>cargo</code> 的安装目录</p>
<p><code>RUSTUP_HOME</code> 指定 <code>rustup</code> 的安装目录</p>
<p>默认分别安装到用户目录下的<code>.cargo</code> 和<code>.rustup</code> 目录</p>
<h1 id="0x4-配置国内镜像"><a href="#0x4-配置国内镜像" class="headerlink" title="0x4. 配置国内镜像"></a>0x4. 配置国内镜像</h1><h2 id="1-配置-rustup-国内镜像"><a href="#1-配置-rustup-国内镜像" class="headerlink" title="1). 配置 rustup 国内镜像"></a>1). 配置 rustup 国内镜像</h2><p>在系统环境变量中添加如下变量：</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 中国科学技术大学</span></span><br><span class="line">RUSTUP_DIST_SERVER：https:<span class="regexp">//mi</span>rrors.ustc.edu.cn/rust-static</span><br><span class="line">RUSTUP_UPDATE_ROOT：https:<span class="regexp">//mi</span>rrors.ustc.edu.cn<span class="regexp">/rust-static/</span>rustup</span><br></pre></td></tr></table></figure>

<h2 id="2-配置-cargo-国内镜像"><a href="#2-配置-cargo-国内镜像" class="headerlink" title="2). 配置 cargo 国内镜像"></a>2). 配置 cargo 国内镜像</h2><p>在 cargo 安装目录下新建 config 文件（注意 config 没有任何后缀），文件内容如下：</p>
<figure class="highlight ini"><table><tr><td class="code"><pre><span class="line"><span class="section">[source.crates-io]</span></span><br><span class="line"><span class="attr">registry</span> = <span class="string">&quot;https://github.com/rust-lang/crates.io-index&quot;</span></span><br><span class="line"><span class="attr">replace-with</span> = <span class="string">&#x27;tuna&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 清华大学</span></span><br><span class="line"><span class="section">[source.tuna]</span></span><br><span class="line"><span class="attr">registry</span> = <span class="string">&quot;https://mirrors.tuna.tsinghua.edu.cn/git/crates.io-index.git&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 中国科学技术大学</span></span><br><span class="line"><span class="section">[source.ustc]</span></span><br><span class="line"><span class="attr">registry</span> = <span class="string">&quot;git://mirrors.ustc.edu.cn/crates.io-index&quot;</span></span><br><span class="line"><span class="comment"># 设置代理</span></span><br><span class="line"><span class="comment"># [http]</span></span><br><span class="line"><span class="comment"># proxy = &quot;127.0.0.1:8889&quot;</span></span><br><span class="line"><span class="comment"># [https]</span></span><br><span class="line"><span class="comment"># proxy = &quot;127.0.0.1:8889&quot;</span></span><br></pre></td></tr></table></figure>

<h1 id="0x5-Windows-交叉编译-Linux-程序"><a href="#0x5-Windows-交叉编译-Linux-程序" class="headerlink" title="0x5. Windows 交叉编译 Linux 程序"></a>0x5. Windows 交叉编译 Linux 程序</h1><p>目标服务器是 <code>Linux(CentOS 7) 64bit</code>, 所以我们添加的 target 应该是<code>x86_64-unknown-linux-gnu</code>(动态依赖) 或者<code>x86_64-unknown-linux-musl</code>（静态依赖）</p>
<p>解释：</p>
<ul>
<li><p>动态依赖：目标服务器需要包含动态依赖的相关库（用户共享库）</p>
</li>
<li><p>静态依赖，目标服务器不需要包含相应的库，但是打包文件会更大些</p>
<p>1). 添加需要的 target</p>
</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">rustup target add  x86_64-unknown-linux-musl</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>2). 在 cargo 安装目录下新建 config 文件（注意 config 没有任何后缀），添加的文件内容如下：</p>
<figure class="highlight ini"><table><tr><td class="code"><pre><span class="line"><span class="section">[target.x86_64-unknown-linux-musl]</span></span><br><span class="line"><span class="attr">linker</span> = <span class="string">&quot;rust-lld&quot;</span></span><br></pre></td></tr></table></figure>

<p>3). 构建</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">cargo build --target x86_64-unknown-linux-musl</span><br></pre></td></tr></table></figure>

<h1 id="0x6-参考"><a href="#0x6-参考" class="headerlink" title="0x6. 参考"></a>0x6. 参考</h1><ol>
<li>官方指南：<a href="https://kaisery.github.io/trpl-zh-cn/">https://kaisery.github.io/trpl-zh-cn/</a></li>
</ol>
]]></content>
      <categories>
        <category>开发环境</category>
      </categories>
      <tags>
        <tag>rust</tag>
      </tags>
  </entry>
  <entry>
    <title>Xshell无限标签和永久去更新教程</title>
    <url>/2022/03/16/Xshell%E6%97%A0%E9%99%90%E6%A0%87%E7%AD%BE%E5%92%8C%E6%B0%B8%E4%B9%85%E5%8E%BB%E6%9B%B4%E6%96%B0%E6%95%99%E7%A8%8B/</url>
    <content><![CDATA[<meta name="referrer" content="no-referrer"/>
Xshell 是一款强大的 SSH 客户端，可惜的是没有 Mac 系统的客户端，不过这丝毫不影响他在 SSH 终端领域绝对的王者地位。废话不多说，今天分享的是 Xshell 不限制标签和永久去更新方法。

<span id="more"></span>
<p>下图是 Xshell 软件主界面。</p>
<p><img src="https://files.mdnice.com/user/10819/bb3a8a2a-9237-4b6c-8dff-18ea27c027b4.png" alt="Xshell"></p>
<p>写这篇文章的起因是，最近在 Xshell 官网发公告，大意是 2022 年 2 月 6 号之后，免费版的 Xshell7
将不再限制标签的数量。此时白嫖用户拍手叫好，小编也下载了一个，体验一下被支配的快乐。结果也差强人意，但是哪有那么好的事情，总要用户牺牲点什么，这不官方设置了在每次关闭 Xshell 的时候都会弹出一个免费许可的提示框，但是会在 10s
之后自动关闭，但是对于我这样的强迫症来说这无疑是眼中钉，看着难受，于是经过一系列调研，小编我准备回退到 Xshell5
的版本然后设置永久不更新，哈哈哈，这样一个骚操作，岂不是美哉！这你就要问了，最新版不香么？其实他们区别并不大，总体体验上来说 5 和 7 版本几乎没有什么变化。下图是官方公告。</p>
<p><img src="https://files.mdnice.com/user/10819/c3279411-cad7-4cdd-becd-4ad52b34cc41.png" alt="官方公告"></p>
<p>众所周知，Xshell 有免费版和商业版，大家应该和我一样都是用的免费版，毕竟白嫖真的舒服，但是免费版有些问题，最臭名昭著的就是强制更新，还有就是在 Xshell6 之后开始限制免费版同时开标签的数量不得超过 4 个，Xshell7
开始不限制标签数量了，结果又会有烦人的弹窗。唯独 Xshell5 限制比较少。以下是下载正版的 Xshell5 并去更新的方法。</p>
<h1 id="首先下载-Xshell5-最后一个版本"><a href="#首先下载-Xshell5-最后一个版本" class="headerlink" title="首先下载 Xshell5 最后一个版本"></a>首先下载 Xshell5 最后一个版本</h1><h2 id="Xshell5-文件如下"><a href="#Xshell5-文件如下" class="headerlink" title="Xshell5 文件如下"></a>Xshell5 文件如下</h2><figure class="highlight dts"><table><tr><td class="code"><pre><span class="line">链接：https:<span class="comment">//wwi.lanzout.com/i8KDw01iqzsj</span></span><br><span class="line">密码：<span class="number">9</span>na1</span><br><span class="line"><span class="symbol"></span></span><br><span class="line"><span class="symbol">Size:</span> <span class="number">33012688</span> bytes</span><br><span class="line">File Version: <span class="number">5.0</span><span class="number">.1339</span></span><br><span class="line"><span class="symbol">MD5:</span> AB1A4AFB4894B71A3DC4DE84A84E7126</span><br><span class="line"><span class="symbol">SHA1:</span> D2DA24229554139AEF8D21F737D6F78F7BEF7A7F</span><br><span class="line"><span class="symbol">CRC32:</span> <span class="number">305847</span>D5</span><br></pre></td></tr></table></figure>

<h2 id="Xftp5-文件如下"><a href="#Xftp5-文件如下" class="headerlink" title="Xftp5 文件如下"></a>Xftp5 文件如下</h2><figure class="highlight dts"><table><tr><td class="code"><pre><span class="line">链接：https:<span class="comment">//wwi.lanzout.com/ignmd01iu3jc</span></span><br><span class="line">密码：i8u4</span><br><span class="line"><span class="symbol"></span></span><br><span class="line"><span class="symbol">Size:</span> <span class="number">32115152</span> bytes</span><br><span class="line">File Version: <span class="number">5.0</span><span class="number">.1235</span></span><br><span class="line"><span class="symbol">MD5:</span> <span class="number">5119</span>C3AEAC80299EF57858756B3A9EC4</span><br><span class="line"><span class="symbol">SHA1:</span> <span class="number">3</span>CC4350D4ED36A1BE557E0D114B755414D6F747B</span><br><span class="line"><span class="symbol">CRC32:</span> CC18CE46</span><br></pre></td></tr></table></figure>

<p>大家下载好文件之后一定要校验一下文件是否被更改过。</p>
<h1 id="安装-Xshell5"><a href="#安装-Xshell5" class="headerlink" title="安装 Xshell5"></a>安装 Xshell5</h1><p>正常安装软件就可以了</p>
<h1 id="修改安装目录下的nslicense-dll"><a href="#修改安装目录下的nslicense-dll" class="headerlink" title="修改安装目录下的nslicense.dll"></a>修改安装目录下的<code>nslicense.dll</code></h1><p>小编用的是 VSCode+Hex Editor 插件修改的文件并保存，大家可以使用自己的 16 进制编辑器去修改文件。如果没有权限修改，就使用管理员权限或者复制一个文件，修改好之后复制到该目录下面，将<code>nslicense.dll</code>
文件替换即可。</p>
<p>将文件中的：</p>
<figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">7F</span> <span class="number">0</span>C <span class="number">81</span> F9 <span class="number">80</span> <span class="number">33</span> E1 <span class="number">01</span> <span class="number">0</span>F <span class="number">86</span> <span class="number">80</span></span><br></pre></td></tr></table></figure>

<p>替换为：</p>
<figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">7F</span> <span class="number">0</span>C <span class="number">81</span> F9 <span class="number">80</span> <span class="number">33</span> E1 <span class="number">01</span> <span class="number">0</span>F <span class="number">83</span> <span class="number">80</span></span><br></pre></td></tr></table></figure>

<p><img src="https://files.mdnice.com/user/10819/b21ff962-596a-429c-a2b1-847a729ee6a4.png" alt="nslicense.dll"></p>
<p><img src="https://files.mdnice.com/user/10819/4558faa1-b88f-4a0e-9253-a9971be1f83c.png" alt="Hex Editor"></p>
<p><img src="https://files.mdnice.com/user/10819/206baca7-4f36-468a-8723-b7a7cb90227f.png" alt="修改文件并保存"></p>
<h1 id="起飞咯"><a href="#起飞咯" class="headerlink" title="起飞咯"></a>起飞咯</h1><p>舒服了。Xshell YYDS!!</p>
<p><img src="https://files.mdnice.com/user/10819/be2ca15b-8d11-4176-a06e-51885d3bc0a1.png" alt="没有了标签数量的限制后的Xshell5"></p>
<p>最后把自动更新去掉就行了。</p>
<p><img src="https://files.mdnice.com/user/10819/be904d07-ea4b-4eca-bf81-a90ed26e57c8.png" alt="关闭自动更新"></p>
]]></content>
      <categories>
        <category>实用工具</category>
      </categories>
      <tags>
        <tag>tool</tag>
      </tags>
  </entry>
  <entry>
    <title>工欲善其事，必先利其器。JetBrains IDE全家桶免费使用方法</title>
    <url>/2022/02/26/%E5%B7%A5%E6%AC%B2%E5%96%84%E5%85%B6%E4%BA%8B%EF%BC%8C%E5%BF%85%E5%85%88%E5%88%A9%E5%85%B6%E5%99%A8%E3%80%82JetBrains-IDE%E5%85%A8%E5%AE%B6%E6%A1%B6%E5%85%8D%E8%B4%B9%E4%BD%BF%E7%94%A8%E6%96%B9%E6%B3%95/</url>
    <content><![CDATA[<meta name="referrer" content="no-referrer"/>


<span id="more"></span>
<p>JetBrains 家的 IDE 很智能，但是大部分都是收费的。不花钱使用正版的方式有两个</p>
<ol>
<li><p>使用教育邮箱申请，申请地址: <a href="https://www.jetbrains.com/zh-cn/community/education/">https://www.jetbrains.com/zh-cn/community/education/</a></p>
</li>
<li><p>使用持续维护 3 个月以上的开源项目申请（对项目的要求不高，不要是 Hello World）申请地址: <a href="https://www.jetbrains.com/zh-cn/community/opensource/#support">https://www.jetbrains.com/zh-cn/community/opensource/#support</a></p>
</li>
</ol>
<p>最后说的就是它的和谐方法</p>
<h1 id="无限重设脚本"><a href="#无限重设脚本" class="headerlink" title="无限重设脚本"></a>无限重设脚本</h1><p>网上大部分教程都是出自 zhile 的博客 <a href="https://zhile.io/">https://zhile.io</a> 安装方法是直接拖到 IDE 中就会自动安装，如果不可以，就在插件系统里面去手动安装。插件中有个选项 <code>Auto reset before per restart</code>
，将它勾选，意思就是在每次关闭 IDE 的时候自动重设试用期，懒人专用。</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">无限重设脚本</span><br><span class="line">https:<span class="regexp">//</span>wwi.lanzout.com/iEpdczsepsf</span><br><span class="line">密码:<span class="number">5</span>khy</span><br></pre></td></tr></table></figure>

<p><img src="https://files.mdnice.com/user/10819/3057196e-c20e-4b8f-832c-c3318920f7f0.png" alt="无限重设脚本"></p>
<h1 id="javaagent"><a href="#javaagent" class="headerlink" title="javaagent"></a>javaagent</h1><p>无限重设脚本在 2021.2 及以前版本是可以稳定使用的，但是在最新版本是不可用的。ja-netfilter GitHub：<a href="https://github.com/ja-netfilter/ja-netfilter">https://github.com/ja-netfilter/ja-netfilter</a> 这个项目是 zhile
发起的，使用 Java 语言封装的一个脚手架，配合单独开发的“插件”可以实现通过反射修改类，屏蔽掉网络请求，简单点说就是网络过滤程序。理论上可以作用于所有 JVM 平台的程序。只要稍加改造就可以用于和谐 JetBrains
IDE。zhile 在自己的博客说明了用于和谐 JetBrains IDE 的插件规则，不过有大佬已经为我们整合好了。</p>
<p>jetbra.in 在 ja-netfilter 基础上整合了和谐 JetBrians IDE 的定制版，文件见下文，解压文件之后，按照 readme.txt 说明操作。</p>
<blockquote>
<p>ja-netfilter-all下载地址：<a href="https://wwi.lanzout.com/i9Kdw00ifnhe">https://wwi.lanzout.com/i9Kdw00ifnhe</a> 密码:c6yr 或者 <a href="https://jetbra.in/s">https://jetbra.in/s</a></p>
</blockquote>
<p><img src="https://files.mdnice.com/user/10819/2ff96909-4ef3-44b2-b327-20f1c8e6ce0b.png" alt="解压文件的目录"></p>
<p><strong>具体步骤如下：</strong></p>
<ol>
<li>打开 scripts 文件夹。如果你是 Linux/MacOS，运行 install.sh，如果你是 Windows，运行 install-all-users.vbs 或者
install-current-user.vbs（此操作作用是配置 IDE 的 JVM 参数，并添加至环境变量），顾名思义，第一个是为所有用户安装，第二个是为当前用户安装。</li>
</ol>
<p><img src="https://files.mdnice.com/user/10819/f99881f3-15ac-4285-b3ed-031acc311c48.png" alt="懒人脚本"></p>
<ol start="2">
<li>打开 IDE，我们选择激活码的方式激活，激活码到 <a href="https://jetbra.in/s">https://jetbra.in/s</a> 这个站点找，寻找对应 IDE 的激活码即可。最后就可以进入到
IDE 后并且可以无限期使用了(提示：在 jetbra.in 也有插件对应的激活码)。</li>
</ol>
<p><strong>Tips：</strong></p>
<ol>
<li>解压的文件夹路径建议不要有中文，并且之后也不要移动。</li>
<li>默认授权用户名是 MyMap，默认激活日期是 2023-12-31，这个不用管，只是一个形式，如果你想修改的话就修改 config-jetbrains/mymap.conf
文件，授权用户名和到期时间想改多久就该多久。最终都不会影响使用，只是自己看着舒服而已。</li>
</ol>
<p><img src="https://files.mdnice.com/user/10819/08ac6b6e-a362-424c-87c6-191a51f7fad1.png" alt="mymap配置文件"></p>
<p>最后建议使用每个大版本的最后一个版本，相比较是稳定的，Bug 比较少，比如 20 年的 IDEA 的最后一个版本 2020.3.4。</p>
<p>相关链接：</p>
<ol>
<li>ja-netfilter：<a href="https://github.com/ja-netfilter/ja-netfilter">https://github.com/ja-netfilter/ja-netfilter</a></li>
<li>jetbra.in：<a href="https://jetbra.in/s">https://jetbra.in/s</a></li>
</ol>
]]></content>
      <categories>
        <category>实用工具</category>
      </categories>
      <tags>
        <tag>tool</tag>
      </tags>
  </entry>
  <entry>
    <title>使用Syncthing搭建自己的私人网盘</title>
    <url>/2022/02/26/%E4%BD%BF%E7%94%A8Syncthing%E6%90%AD%E5%BB%BA%E8%87%AA%E5%B7%B1%E7%9A%84%E7%A7%81%E4%BA%BA%E7%BD%91%E7%9B%98/</url>
    <content><![CDATA[<meta name="referrer" content="no-referrer"/>


<span id="more"></span>
<p>Syncthing 是一款开源免费跨平台的文件同步工具，是基于 P2P
技术实现设备间的文件同步，不懂得可以问下搜索引擎。本期教程是教你如何搭建远程服务，与本地服务配合，达到文件实时备份的目的。同步网速取决于自己机器带宽的上限，理论是同步的节点越多同步越快。</p>
<p><strong>Syncthing 优缺点：</strong></p>
<p>优点：</p>
<ol>
<li>开源安全跨平台，TLS 加密，开发活跃</li>
<li>安装简单，网络要求低</li>
<li>提供完善的<strong>版本控制</strong></li>
</ol>
<p>缺点：</p>
<ol start="4">
<li>更适合用于<strong>私有分享</strong>，而不适合用于<strong>公有分享</strong></li>
<li>无 iOS 客户端</li>
<li>病毒扩散问题</li>
</ol>
<blockquote>
<p>Syncthing 官网：<a href="https://syncthing.net/">https://syncthing.net/</a></p>
</blockquote>
<h1 id="在服务器上部署-Docker"><a href="#在服务器上部署-Docker" class="headerlink" title="在服务器上部署 Docker"></a>在服务器上部署 Docker</h1><blockquote>
<p>Centos 安装 Docker：<a href="https://docs.docker.com/engine/install/centos/">https://docs.docker.com/engine/install/centos/</a></p>
</blockquote>
<h1 id="拉取-syncthing-镜像"><a href="#拉取-syncthing-镜像" class="headerlink" title="拉取 syncthing 镜像"></a>拉取 syncthing 镜像</h1><p><code>docker pull syncthing/syncthing</code></p>
<h1 id="运行容器"><a href="#运行容器" class="headerlink" title="运行容器"></a>运行容器</h1><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker run -d -p 8384:8384 -p 22000:22000 -v /jonssonyan/syncthing:/var/syncthing --restart=always syncthing/syncthing:latest</span><br></pre></td></tr></table></figure>

<p>参数解释：</p>
<ul>
<li>-d：后台运行</li>
<li>-p 8384:8384： 暴露 8384 端口，8384 是 Web 界面端口</li>
<li>-p 22000:22000：暴露 22000 端口，22000 是通讯端口</li>
<li>-v /jonssonyan/syncthing:/var/syncthing：映射文件夹，将备份的文件映射至宿主机的/jonssonyan/syncthing 目录下</li>
<li>–restart=always：容器随着 Docker 的启动而启动</li>
<li>syncthing/syncthing:latest：镜像版本</li>
</ul>
<p>如果你购买的服务器有控制面板，需要在控制面板开放<code>8384</code>（TCP）和<code>22000</code>（TCP 和 UDP 都要开）</p>
<p>至此，syncthing 已经部署到了服务器上，下一步我们只需要在本地也启动一个 syncthing，与服务器进行实时同步即可。</p>
<h1 id="本地运行-syncthing"><a href="#本地运行-syncthing" class="headerlink" title="本地运行 syncthing"></a>本地运行 syncthing</h1><blockquote>
<p>syncthing 下载地址：<a href="https://syncthing.net/downloads/">https://syncthing.net/downloads/</a></p>
</blockquote>
<p>Windows 有两个客户端：</p>
<ol>
<li><a href="https://github.com/canton7/SyncTrayzor/releases/latest">SyncTrayzor</a></li>
<li><a href="https://github.com/syncthing/syncthing/releases/download/v1.19.0/syncthing-windows-amd64-v1.19.0.zip">Base Syncthing</a></li>
</ol>
<p>本文使用的是<code>Base Syncthing</code></p>
<p><img src="https://files.mdnice.com/user/10819/683eb95b-45bc-41ec-996b-7bac3ed1ce61.png"></p>
<p>启动好后会自动打开浏览器<code>http://127.0.0.1:8384/</code>，如果没有自动打开，请手动在浏览器访问这个网址，这个是 syncthing 的默认 Web 界面。</p>
<h1 id="正确使用-syncthing-方法"><a href="#正确使用-syncthing-方法" class="headerlink" title="正确使用 syncthing 方法"></a>正确使用 syncthing 方法</h1><h2 id="设置-syncthingWeb-面板的用户名和密码"><a href="#设置-syncthingWeb-面板的用户名和密码" class="headerlink" title="设置 syncthingWeb 面板的用户名和密码"></a>设置 syncthingWeb 面板的用户名和密码</h2><p><img src="https://files.mdnice.com/user/10819/5b310f5f-87e0-44c8-9649-19152915acb9.png"></p>
<h2 id="添加远程设备"><a href="#添加远程设备" class="headerlink" title="添加远程设备"></a>添加远程设备</h2><p><img src="https://files.mdnice.com/user/10819/87914596-9c20-46ef-b15a-d1677b88fefa.png"></p>
<p>如何查看设备 ID？</p>
<p><img src="https://files.mdnice.com/user/10819/ba623c55-188e-49fb-b36a-b7eed3c2a5cb.png"></p>
<h2 id="设置共享文件夹，并设置它的密码"><a href="#设置共享文件夹，并设置它的密码" class="headerlink" title="设置共享文件夹，并设置它的密码"></a>设置共享文件夹，并设置它的密码</h2><p><img src="https://files.mdnice.com/user/10819/632b8bb3-0c0f-4df3-95fc-ad0e3724a531.png"></p>
<h2 id="版本控制"><a href="#版本控制" class="headerlink" title="版本控制"></a>版本控制</h2><p><img src="https://files.mdnice.com/user/10819/f5bcb8e2-bc2d-4abe-85f2-725293e18fc1.png"></p>
<h2 id="忽略模式"><a href="#忽略模式" class="headerlink" title="忽略模式"></a>忽略模式</h2><p><img src="https://files.mdnice.com/user/10819/de3ad69d-7023-4ec7-a9ad-60e1c104c59c.png"></p>
]]></content>
      <categories>
        <category>实用工具</category>
      </categories>
      <tags>
        <tag>tool</tag>
      </tags>
  </entry>
  <entry>
    <title>IDE问题汇总</title>
    <url>/2022/02/22/IDE%E9%97%AE%E9%A2%98%E6%B1%87%E6%80%BB/</url>
    <content><![CDATA[<meta name="referrer" content="no-referrer"/>
开发环境/开发工具使用过程中的错误记录

<span id="more"></span>

<h1 id="解决IDEA输入法切换不了的问题"><a href="#解决IDEA输入法切换不了的问题" class="headerlink" title="解决IDEA输入法切换不了的问题"></a>解决IDEA输入法切换不了的问题</h1><p>问题描述：除了 Git 提交界面输入法切换不了以外，只要是弹窗的交互界面输入法都切换不了。除了 IDEA，2020 所有其他的 IDE 也都存在这个问题。</p>
<p>是 JetBrains 官方的问题，IDEA 内置的 jre 的 Bug，需要替换成可用的版本。</p>
<p>JetBrains 官方 issue：<a href="https://youtrack.jetbrains.com/issue/IDEA-265128">issue 地址</a></p>
<p>解决方案如下：</p>
<ol>
<li>下载官方提供的可用的 jre 版本</li>
</ol>
<p><a href="https://cache-redirector.jetbrains.com/intellij-jbr/jbr_jcef-11_0_9_1-windows-x64-b1145.63.tar.gz">点击这里下载</a></p>
<ol start="2">
<li>替换 IDEA 自带的 jre</li>
</ol>
<p>点击主菜单上的 Help | Find Action （帮助 | 查找操作)，输入 Choose Boot Java Runtime for the IDE (选择 IDE 的启动 Java 运行时)，回车，然后点击 New (新建)
的下拉菜单，往下拉，找到 Add Custom Runtime（添加自定义运行时) 的选项，然后选择这个压缩了的 JRE 运行，并重启 IDE。</p>
<p>补充：版本是 2020.3 及以上需要安装插件 Choose Runtime</p>
<p><a href="https://plugins.jetbrains.com/plugin/12836-choose-runtime">点击这里跳转至插件页面</a></p>
<p>演示图如下：</p>
<p><img src="https://files.mdnice.com/user/10819/88f5e5b0-36bd-499a-ae90-de03d0e73cd0.png"></p>
<p><img src="https://files.mdnice.com/user/10819/954e2dd2-cb67-4c11-a653-c1f35f439afb.png"></p>
<p><img src="https://files.mdnice.com/user/10819/b407c3b3-0e66-48af-b282-c2a4f0eb4a68.png"></p>
]]></content>
      <categories>
        <category>活捉Bug</category>
      </categories>
      <tags>
        <tag>idea</tag>
        <tag>ide</tag>
      </tags>
  </entry>
  <entry>
    <title>IDEA线上排错神器之JVM远程Debug</title>
    <url>/2022/02/22/IDEA%E7%BA%BF%E4%B8%8A%E6%8E%92%E9%94%99%E7%A5%9E%E5%99%A8%E4%B9%8BJVM%E8%BF%9C%E7%A8%8BDebug/</url>
    <content><![CDATA[<meta name="referrer" content="no-referrer"/>


<span id="more"></span>
<p>你是否为线上排查问题而苦恼，今天教你不发版的情况下进行线上 Debug。</p>
<h1 id="搭建环境"><a href="#搭建环境" class="headerlink" title="搭建环境"></a>搭建环境</h1><p>首先我们新建一个最简单的 Spring Boot 项目，输出 12345 是为了方便我们调试</p>
<p><img src="https://files.mdnice.com/user/10819/62b1c09f-993d-4d76-a003-38707aaf8edd.png"></p>
<p>通过 Maven 进行打包，并上传至远程服务器，我这里使用的虚拟机</p>
<p><img src="https://files.mdnice.com/user/10819/9c25be65-f301-4271-88f1-9ef0d95e488d.png"></p>
<p>使用以下命令运行 jar</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># JDK5-8</span></span><br><span class="line">java -agentlib:jdwp=transport=dt_socket,server=y,<span class="built_in">suspend</span>=n,address=5005 -jar remote-jvm-debug-0.0.1-SNAPSHOT.jar</span><br></pre></td></tr></table></figure>

<p>以上参数可以在 IDEA 中找到，根据自己 JDK 的版本 copy 参数，本例使用的是 JDK8</p>
<p><img src="https://files.mdnice.com/user/10819/54979d58-fa48-44c8-8400-8b9c6acf401b.png"></p>
<p>参数说明:</p>
<ul>
<li><p>transport: 监听 Socket 端口连接方式（也可以 dt_shmem 共享内存方式，但限于 Windows 机器，并且服务提供端和调试端只能位于同一台机）</p>
</li>
<li><p>server: =y 表示当前是调试服务端，=n 表示当前是调试客户端</p>
</li>
<li><p>suspend: =n 表示启动时不中断（如果启动时中断，一般用于调试启动不了的问题）</p>
</li>
<li><p>address: =5005 表示本地监听 5005 端口</p>
</li>
</ul>
<p><strong>注意</strong></p>
<ol>
<li><p>因为这里使用到<code>5005</code>，所以远程服务器如果开启防火墙需要放行<code>5005</code>端口</p>
<p>Linux 查看防火墙状态: <code>systemctl status firewalld</code></p>
<p>Linux 暂时关闭防火墙: <code>systemctl stop firewalld</code></p>
</li>
<li><p><code>-agentlib:xxxx</code>必须在 <code>-jar</code> 之前</p>
</li>
</ol>
<p>jar 运行之后的效果如下</p>
<p><img src="https://files.mdnice.com/user/10819/d7f51994-3a18-415d-90a6-21497b4bb5fe.png"></p>
<h1 id="远程调试"><a href="#远程调试" class="headerlink" title="远程调试"></a>远程调试</h1><p>远程启动好 jar 后，在 idea 中配置远程 Debug，如图所示:</p>
<p><img src="https://files.mdnice.com/user/10819/6781e887-c55a-4c15-83dd-d44b51aab548.png"></p>
<p>最后我们运行 Remote JVM Debug，并在程序中打一个断点</p>
<p><img src="https://files.mdnice.com/user/10819/aa211bc7-3000-4467-977a-11aafaf1b256.png"></p>
<p>我们使用 Postman 请求接口后，此时就可以调试线上的程序了，需要注意的是，本地程序不需要运行，但是必须保证本地的代码和远程服务器上的代码是一致。</p>
]]></content>
      <categories>
        <category>开发环境</category>
      </categories>
      <tags>
        <tag>idea</tag>
      </tags>
  </entry>
  <entry>
    <title>WebStorm前端开发代码规范</title>
    <url>/2022/02/22/WebStorm%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91%E4%BB%A3%E7%A0%81%E8%A7%84%E8%8C%83/</url>
    <content><![CDATA[<meta name="referrer" content="no-referrer"/>


<span id="more"></span>
<h1 id="Prettier-代码格式化"><a href="#Prettier-代码格式化" class="headerlink" title="Prettier 代码格式化"></a>Prettier 代码格式化</h1><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yarn add prettier</span><br></pre></td></tr></table></figure>

<p><img src="https://files.mdnice.com/user/10819/96ff0b8b-759a-4bc3-8b1c-9f5a1d95f74a.png"></p>
<p><strong>格式化 js 文件将双引号改为单引号</strong></p>
<p>在根目录下新建<code>.prettierrc.json</code>的文件 文件内容如下</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;singleQuote&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;trailingComma&quot;</span><span class="punctuation">:</span> <span class="string">&quot;none&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;semi&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<ul>
<li><code>singleQuote</code>: 单引号</li>
<li><code>trailingComma</code>: 对象属性最后没有”,”</li>
<li><code>semi</code>: 是否需要分号</li>
</ul>
<h1 id="Stylelint-检查"><a href="#Stylelint-检查" class="headerlink" title="Stylelint 检查"></a>Stylelint 检查</h1><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yarn add stylelint</span><br></pre></td></tr></table></figure>

<p><img src="https://files.mdnice.com/user/10819/d1d504ca-1d17-4182-94fa-b57750b98ce4.png"></p>
<h1 id="Eslint-检查"><a href="#Eslint-检查" class="headerlink" title="Eslint 检查"></a>Eslint 检查</h1><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yarn add eslint</span><br></pre></td></tr></table></figure>

<p><img src="https://files.mdnice.com/user/10819/5a3c8c81-4cb9-49aa-8ad1-e049ac88563f.png"></p>
<h1 id="TypeScript-规范"><a href="#TypeScript-规范" class="headerlink" title="TypeScript 规范"></a>TypeScript 规范</h1><p><img src="https://files.mdnice.com/user/10819/7ab37471-52fa-4c11-a95a-2d9ebc97c44b.png"></p>
<p><img src="https://files.mdnice.com/user/10819/25dab29f-86e9-4886-80c9-82dd87b088a8.png"></p>
]]></content>
      <categories>
        <category>开发环境</category>
      </categories>
      <tags>
        <tag>javascript</tag>
      </tags>
  </entry>
  <entry>
    <title>玩转虚拟机</title>
    <url>/2022/01/09/%E7%8E%A9%E8%BD%AC%E8%99%9A%E6%8B%9F%E6%9C%BA/</url>
    <content><![CDATA[<meta name="referrer" content="no-referrer"/>
本文以VirtualBox为例，介绍虚拟机软件安装、虚拟机安装、虚拟机相关的设置。

<span id="more"></span>

<h1 id="虚拟机软件安装"><a href="#虚拟机软件安装" class="headerlink" title="虚拟机软件安装"></a>虚拟机软件安装</h1><p>免费的虚拟机软件推荐两个，一个是<a href="https://www.virtualbox.org/">Oracle VM VirtualBox</a>
，另一个是<a href="https://www.vmware.com/products/workstation-player.html">VMware Workstation Player</a> 本文使用的是VirtualBox，只因为它的设置项多一点。</p>
<p>VirtualBox 是一个用于 x86 硬件的通用全虚拟器，面向服务器、桌面和嵌入式应用。相对 VMware 来说 VirtualBox 是轻量级的虚拟软件, 最关键的是 VirtualBox 是开源免费的。</p>
<p>安装 VirtualBox 过程非常的简单，只需要下一步下一步就可以，并且安装好之后界面是支持中文的。以下是 VirtualBox 安装好之后的主界面。</p>
<p><img src="https://files.mdnice.com/user/10819/8bffd526-86ae-4f6b-8f78-3739c08cac7a.png" alt="界面"></p>
<p>在全局设置中我们可以对常规、热键、更新、语言、显示、网络、扩展、代理相关进行自定义设置。这里我推荐<strong>默认虚拟电脑位置</strong>设置到<strong>除 C 盘之外的其他盘</strong>，防止安装完虚拟机后 C 盘空间爆满，导致系统卡顿。</p>
<p><img src="https://files.mdnice.com/user/10819/7702de7d-929c-4fd1-a991-284a004c9b05.png" alt="全局设定"></p>
<h1 id="Windows10开启虚拟化设置"><a href="#Windows10开启虚拟化设置" class="headerlink" title="Windows10开启虚拟化设置"></a>Windows10开启虚拟化设置</h1><p>在任务管理器中查看电脑是否开启虚拟化。</p>
<p><img src="https://files.mdnice.com/user/10819/6e1ff4cf-3aff-4bd1-b880-362ec601a2f4.png" alt="任务管理器"></p>
<p>需要在 BIOS 中设置电脑的虚拟化。进入 BIOS 的方式每种品牌的电脑各不相同,以下这张表可以作为参考。</p>
<p><img src="https://files.mdnice.com/user/10819/357526a9-92f4-4ee0-8605-3ab320346c5b.png"></p>
<h1 id="Windows虚拟机安装"><a href="#Windows虚拟机安装" class="headerlink" title="Windows虚拟机安装"></a>Windows虚拟机安装</h1><h2 id="下载系统镜像"><a href="#下载系统镜像" class="headerlink" title="下载系统镜像"></a>下载系统镜像</h2><p>首先，我们需要下载一个 Windows10 的 ISO 文件。这里推荐两种下载正版 Windows10 ISO
文件的方式，<a href="https://www.microsoft.com/zh-cn/software-download/windows10">微软官方</a>和 <a href="https://msdn.itellyou.cn/">ITELLYOU</a></p>
<h2 id="创建虚拟机"><a href="#创建虚拟机" class="headerlink" title="创建虚拟机"></a>创建虚拟机</h2><p>打开 VirtualBox，点击新建。</p>
<p><img src="https://files.mdnice.com/user/10819/b087b8ed-be91-4b30-acd9-16e2cc16965b.png" alt="新建"></p>
<p>选择我们需要创建虚拟机的系统。需要和 ISO 文件对应。</p>
<p><img src="https://files.mdnice.com/user/10819/94be98ef-fbd5-4df9-b497-043092a1ce5f.png" alt="虚拟电脑名称和系统类型"></p>
<p>内存大小自己看着办，我推荐大家默认就可以了。</p>
<p><img src="https://files.mdnice.com/user/10819/e5b160bd-563a-490e-bbe2-44b85743ac39.png" alt="内存大小"></p>
<p>这一步默认即可。</p>
<p><img src="https://files.mdnice.com/user/10819/2a05b54a-6a52-4c10-a922-96c409fa3a11.png" alt="虚拟硬盘"></p>
<p>这一步默认即可。</p>
<p><img src="https://files.mdnice.com/user/10819/19a3afad-04d9-4e21-9a0e-2bd3c70c2864.png" alt="虚拟硬盘文件类型">
动态分配就好了，系统会对硬盘空间进行合理分配。</p>
<p><img src="https://files.mdnice.com/user/10819/b9530f5a-b9f8-4ffd-b116-7f29081ce03d.png" alt="存储在物理硬盘上"></p>
<p>这一步默认即可，如果自己电脑的硬盘空间小可以自定义设置，建议不要小于 30G。</p>
<p><img src="https://files.mdnice.com/user/10819/8fa15539-868e-4e5a-bdf6-e1e97f8fadc6.png" alt="文件位置和大小"></p>
<p>创建好之后我们点击<code>存储</code>-&gt;<code>SATA 端口 1: [光驱]没有盘片</code>。文件就是选择我们下载好的 Windows10 ISO 文件。</p>
<p>最后我们点击启动就好了，之后的步骤就和普通装电脑系统一样进行即可。</p>
<p><img src="https://files.mdnice.com/user/10819/3274cfb8-8e41-4156-b610-45ccbb0fd18c.png" alt="启动虚拟机"></p>
<h1 id="设置1920x1080分辨率"><a href="#设置1920x1080分辨率" class="headerlink" title="设置1920x1080分辨率"></a>设置1920x1080分辨率</h1><p>我的电脑屏幕分辨率是 1920x1080，但是 VirtualBox 默认的分辨率是小于这个尺寸，导致每次开启虚拟机之后虚拟机的桌面只有我电脑屏幕中间的一部分，两边留黑。VirtualBox
默认分辨率是不可以选择的，需要我们手动安装一下增强功能。</p>
<p>首先我们看一下是否有以下的存储介质。</p>
<p><img src="https://files.mdnice.com/user/10819/33af4741-080c-4696-b89f-7e792afa0248.png"></p>
<p>打开虚拟机，在顶上的菜单栏中选择<code>设备-&gt;安装增强功能</code></p>
<p><img src="https://files.mdnice.com/user/10819/57ffe0dc-0f5c-4502-a544-5ae6175b35f8.png"></p>
<p>然后在我的电脑中会多一个<code>CD驱动器</code></p>
<p><img src="https://files.mdnice.com/user/10819/b2cb926d-b5d7-450a-b602-fd877a8d9d63.png"></p>
<p>打开之后我们会看到一些文件夹和文件，根据自己的操作系统版本来选择安装哪个，比如我安装的 Windows 10 企业版 ltsc 64 位操作系统，所以我安装的文件是<code>VBoxWindowsAdditions.exe</code>，如果你是 32
位操作系统，你就安装-x86 结尾的文件。</p>
<p><img src="https://files.mdnice.com/user/10819/ab3cd389-361d-4fba-b721-d10bbce0d0e3.png"></p>
<p>安装好之后重启虚拟机就可以选择虚拟机的分辨率了。选择<code>视图-&gt;虚拟显示器1</code></p>
<p><img src="https://img-blog.csdnimg.cn/ae8aee8652064efb83c9bd9c9be996f3.png" alt="img"></p>
<h1 id="CentOS虚拟机安装"><a href="#CentOS虚拟机安装" class="headerlink" title="CentOS虚拟机安装"></a>CentOS虚拟机安装</h1><p>以CentOS7为例，可以从<a href="https://centos.org/download/">CentOS官网</a>下载 CentOS7 的 ISO 镜像。</p>
<h2 id="新建虚拟机"><a href="#新建虚拟机" class="headerlink" title="新建虚拟机"></a>新建虚拟机</h2><p>设置设置虚拟机电脑名称，系统类型会自动为我们选择，如果不能选择 64 位则需要在 BIOS 里面开启虚拟化设置。</p>
<p><img src="https://files.mdnice.com/user/10819/b1411a34-b47e-472c-af89-62c394a30d65.png" alt="虚拟机电脑名称和系统类型"></p>
<h2 id="设置虚拟机的配置"><a href="#设置虚拟机的配置" class="headerlink" title="设置虚拟机的配置"></a>设置虚拟机的配置</h2><p>2核4G，启动顺序勾选<code>硬盘</code>和<code>光驱</code>，并将硬盘放在第一位，勾选<code>启用EFI</code>。</p>
<p><img src="https://files.mdnice.com/user/10819/96473109-f9c0-4fee-8b8d-ddc5436f58c2.png"></p>
<p>网卡1默认为<code>网络地址转换（NAT）</code>，将网卡2设置为<code>仅主机（Host-Only）网络</code></p>
<p><img src="https://files.mdnice.com/user/10819/62fef6f9-df50-40bb-b19a-4b64c87402a7.png"></p>
<p>删除<code>控制器：IDE</code>，点击<code>控制器：SATA</code>添加虚拟光驱，选择下载好的CentOS7 ISO文件（安装好之后可以将CentOS7虚拟光驱删除）。</p>
<p><img src="https://files.mdnice.com/user/10819/f6eebba3-f9e4-47bf-8ce9-513999a9a4b9.png"></p>
<h2 id="安装CentOS7"><a href="#安装CentOS7" class="headerlink" title="安装CentOS7"></a>安装CentOS7</h2><p>选择好虚拟盘后，点击启动，之后就会进入到 CentOS7 系统的安装界面，只需要 5 分钟就可装好。</p>
<p>以下是安装过程的第一步，我们使用小键盘的上下键选择<code>Install CentOS 7</code>，点击<code>Enter</code>即可。</p>
<p><img src="https://files.mdnice.com/user/10819/2263256a-d9de-4b3e-95c7-5883292c3ae3.png" alt="Install CentOS 7"></p>
<h2 id="相关设置"><a href="#相关设置" class="headerlink" title="相关设置"></a>相关设置</h2><p>选择语言为<code>中文</code>。</p>
<p><img src="https://files.mdnice.com/user/10819/d67aaff6-b004-4327-8729-7e64b2841def.png" alt="语言设置"></p>
<p>设置日期和时间为上海时间</p>
<p><img src="https://files.mdnice.com/user/10819/f22ec71b-c5c4-4f99-9419-e9e264d9b7a6.png" alt="设置网络"></p>
<p>设置为静态IP</p>
<p><img src="https://files.mdnice.com/user/10819/237c6027-2dc2-4bc3-9679-9e02fd85e9a6.png"></p>
<p><img src="https://files.mdnice.com/user/10819/e6738ecf-5294-4d0a-9162-0bc6c41b9a0b.png"></p>
<p>设置主机名称（可选）</p>
<p><img src="https://files.mdnice.com/user/10819/c68145c3-bd57-486f-bcc2-2306e7515c67.png"></p>
<p>设置 root 密码</p>
<p><img src="https://files.mdnice.com/user/10819/fea4b589-c5b8-467f-b669-cd1dd323274c.png" alt="root密码"></p>
<h2 id="常见问题"><a href="#常见问题" class="headerlink" title="常见问题"></a>常见问题</h2><p>如果宿主机ping不同虚拟机的局域网IP（本例中虚拟机的局域网IP为192.168.56.101）</p>
<p>检查<code>/etc/sysconfig/network-scripts/ifcfg-enp0s3</code>和<code>/etc/sysconfig/network-scripts/ifcfg-enp0s8</code>里面<code>ONBOOT</code>是否为<code>yes</code></p>
<p>修改ONBOOT为yes（激活网卡）后重启网络<code>service network restart</code></p>
<h1 id="手动设置虚拟机为静态-IP-并访问外网"><a href="#手动设置虚拟机为静态-IP-并访问外网" class="headerlink" title="手动设置虚拟机为静态 IP 并访问外网"></a>手动设置虚拟机为静态 IP 并访问外网</h1><p>本文是使用<code>VirtualBox</code>安装的<code>CentOS7 x86_64 Minimal</code>版本的虚拟机</p>
<p>安装好 CentOS 系统的虚拟机。默认是网络的连接方式为 NAT，该模式可以访问外网。</p>
<p><img src="https://img-blog.csdnimg.cn/ed49c786ccd848c48ddde8ec9ef97ae3.png" alt="Nat"></p>
<p>如果需要将虚拟机在局域网内的 IP 设置为固定 IP，需要添加网卡 2 为 Host-only 模式</p>
<p><img src="https://img-blog.csdnimg.cn/ae72acc28fde45edb47a7b47dce163a2.png" alt="Host-Only"></p>
<p>至此我们添加了两个网卡，一个是 Nat，第二个是 Host-Only。</p>
<p><code>CentOS7</code>网卡的配置文件在这个目录下面：<code>/etc/sysconfig/network-scripts/</code>，网络配置文件的格式为: <code>ifcfg-xxx</code>，默认的网络配置文件是：<code>ifcfg-enp0s3</code></p>
<p>编辑 <code>ifcfg-enp0s3</code> 这个文件，将其中的 <code>ONBOOT=no</code> 改为 <code>ONBOOT=yes</code>，如果在安装 CentOS 的时候就设置了网络，则可以忽略这一步。</p>
<p>最终<code>ifcfg-enp0s3</code>文件内容如下:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">TYPE=<span class="string">&quot;Ethernet&quot;</span></span><br><span class="line">PROXY_METHOD=<span class="string">&quot;none&quot;</span></span><br><span class="line">BROWSER_ONLY=<span class="string">&quot;no&quot;</span></span><br><span class="line">BOOTPROTO=<span class="string">&quot;dhcp&quot;</span></span><br><span class="line">DEFROUTE=<span class="string">&quot;yes&quot;</span></span><br><span class="line">IPV4_FAILURE_FATAL=<span class="string">&quot;no&quot;</span></span><br><span class="line">IPV6INIT=<span class="string">&quot;yes&quot;</span></span><br><span class="line">IPV6_AUTOCONF=<span class="string">&quot;yes&quot;</span></span><br><span class="line">IPV6_DEFROUTE=<span class="string">&quot;yes&quot;</span></span><br><span class="line">IPV6_FAILURE_FATAL=<span class="string">&quot;no&quot;</span></span><br><span class="line">IPV6_ADDR_GEN_MODE=<span class="string">&quot;stable-privacy&quot;</span></span><br><span class="line">NAME=<span class="string">&quot;enp0s3&quot;</span></span><br><span class="line">UUID=<span class="string">&quot;6020592b-9f11-4cb6-aeac-8bcc3dba3690&quot;</span></span><br><span class="line">DEVICE=<span class="string">&quot;enp0s3&quot;</span></span><br><span class="line"><span class="comment"># ONBOOT设置为yes</span></span><br><span class="line">ONBOOT=<span class="string">&quot;yes&quot;</span></span><br></pre></td></tr></table></figure>

<p>保存文件并重启网络服务，重启网络的命令是 <code>service network restart</code></p>
<p><code>ping www.baidu.com</code> 可以 ping 通，说明与外网已经连通</p>
<p>但是此时我们的 IP 任然是动态的 IP，我们需要在添加一个网卡，也就是网卡 2，在文章的一开始已经让大家添加了网卡 2</p>
<p>复制<code>ifcfg-enp0s3</code>命名为<code>ifcfg-enp0s8</code> 命令为<code>cp ifcfg-enp0s3 ifcfg-enp0s8</code></p>
<p>我们需要编辑<code>ifcfg-enp0s8</code>，最后重启网络即可</p>
<p><code>ifcfg-enp0s8</code>文件需要变动的地方如下:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">TYPE=<span class="string">&quot;Ethernet&quot;</span></span><br><span class="line">PROXY_METHOD=<span class="string">&quot;none&quot;</span></span><br><span class="line">BROWSER_ONLY=<span class="string">&quot;no&quot;</span></span><br><span class="line"><span class="comment"># BOOTPROTO改为static，意为静态模式</span></span><br><span class="line">BOOTPROTO=<span class="string">&quot;static&quot;</span></span><br><span class="line">DEFROUTE=<span class="string">&quot;yes&quot;</span></span><br><span class="line">IPV4_FAILURE_FATAL=<span class="string">&quot;no&quot;</span></span><br><span class="line">IPV6INIT=<span class="string">&quot;yes&quot;</span></span><br><span class="line">IPV6_AUTOCONF=<span class="string">&quot;yes&quot;</span></span><br><span class="line">IPV6_DEFROUTE=<span class="string">&quot;yes&quot;</span></span><br><span class="line">IPV6_FAILURE_FATAL=<span class="string">&quot;no&quot;</span></span><br><span class="line">IPV6_ADDR_GEN_MODE=<span class="string">&quot;stable-privacy&quot;</span></span><br><span class="line"><span class="comment"># NAME改为enp0s8，和文件名称后缀ifcfg-xxx保持一致</span></span><br><span class="line">NAME=<span class="string">&quot;enp0s8&quot;</span></span><br><span class="line"><span class="comment"># UUID 也需要修改，UUID可以重新生成一个，直接在命令行输入 uuidgen，回车就会出现结果，把结果复制过来。</span></span><br><span class="line">UUID=<span class="string">&quot;87a8c150-3d1a-4111-97aa-816692dcf504&quot;</span></span><br><span class="line"><span class="comment"># NAME改为enp0s8，和文件名称后缀ifcfg-xxx保持一致</span></span><br><span class="line">DEVICE=<span class="string">&quot;enp0s8&quot;</span></span><br><span class="line">ONBOOT=<span class="string">&quot;yes&quot;</span></span><br><span class="line"><span class="comment"># IPADDR需要在指定的IP范围内，NETMASK也和指定的服务器网络掩码一致，可以在VirtualBox主机网络配置管理器DHCP服务器中查看</span></span><br><span class="line">IPADDR=192.168.56.102</span><br><span class="line">NETMASK=255.255.255.0</span><br></pre></td></tr></table></figure>

<p>VirtualBox 主机网络配置管理器 DHCP 服务器配置如下:</p>
<p><img src="https://img-blog.csdnimg.cn/e6e62e20d7a6441b8a327c9ca4ffdb17.png" alt="主机网络管理器"></p>
<p><img src="https://img-blog.csdnimg.cn/05acb4420638485796bef440727628a2.png" alt="DHCP 服务器配置"></p>
<p>如上步骤设置好后，我们就可以启动虚拟机后，使用局域网 IP 用 XShell 连接而且可以访问外网了。</p>
<h1 id="安装Android虚拟机"><a href="#安装Android虚拟机" class="headerlink" title="安装Android虚拟机"></a>安装Android虚拟机</h1><p>突然发现 Oracle 的 VM VirtualBox 除了可以安装 Linux、Windows 系统之外，还可以安装安卓系统，那不就相当于一个模拟器了，省的再去下载夜神，逍遥之类的定制化模拟器。借此机会，今天实践一下。</p>
<h2 id="下载-Android-ISO-文件"><a href="#下载-Android-ISO-文件" class="headerlink" title="下载 Android ISO 文件"></a>下载 Android ISO 文件</h2><blockquote>
<p>Android ISO 下载地址：<a href="https://www.fosshub.com/Android-x86.html">https://www.fosshub.com/Android-x86.html</a></p>
</blockquote>
<h2 id="安装-VM-VirtualBox"><a href="#安装-VM-VirtualBox" class="headerlink" title="安装 VM VirtualBox"></a>安装 VM VirtualBox</h2><blockquote>
<p>VM VirtualBox 下载地址：<a href="https://www.virtualbox.org/wiki/Downloads">https://www.virtualbox.org/wiki/Downloads</a></p>
</blockquote>
<h2 id="新建虚拟机-1"><a href="#新建虚拟机-1" class="headerlink" title="新建虚拟机"></a>新建虚拟机</h2><p>建议自己配置大于等于下图的配置</p>
<p><img src="https://files.mdnice.com/user/10819/787f489d-a31f-4c00-83d5-172585fb95c9.png"></p>
<p><img src="https://files.mdnice.com/user/10819/73548b1e-cac9-4f31-9ed2-2abdf99e5d80.png"></p>
<p><img src="https://files.mdnice.com/user/10819/15a59d5e-89e1-4424-a1f5-7b480660fe76.png"></p>
<p><img src="https://files.mdnice.com/user/10819/6f593a2f-d7fa-4857-bcd0-62bc4a7147cc.png">
<img src="https://files.mdnice.com/user/10819/8e27ad00-2254-4a2b-b399-99c1348c9265.png"></p>
<p><img src="https://files.mdnice.com/user/10819/2fd091e1-9254-4fac-a412-8337bc05c399.png"></p>
<p>设置显存大小和启动 3D 加速</p>
<p><img src="https://files.mdnice.com/user/10819/91c854fd-be90-4124-b63b-ace92eed617e.png"></p>
<p>选择之前我们下载好的 Android ISO 文件</p>
<p><img src="https://files.mdnice.com/user/10819/d56d2952-4faf-4d9d-ab05-b1b6662361d8.png"></p>
<h2 id="启动虚拟机"><a href="#启动虚拟机" class="headerlink" title="启动虚拟机"></a>启动虚拟机</h2><p><img src="https://files.mdnice.com/user/10819/d9bda653-e176-43f1-aadd-0e215b800aa2.png"></p>
<p><img src="https://files.mdnice.com/user/10819/c92ddffd-f973-46da-87ad-91533083b9af.png"></p>
<p><img src="https://files.mdnice.com/user/10819/ffa3d862-17ef-423c-a445-48aa5a6ff14e.png"></p>
<p><img src="https://files.mdnice.com/user/10819/6fa53601-6da9-49b2-817a-3474a9745d01.png"></p>
<p>下面我们需要强制退出，并移除虚拟盘</p>
<p><img src="https://files.mdnice.com/user/10819/6dd98a5a-fb26-4472-88a2-623aafd14e9c.png"></p>
<p><img src="https://files.mdnice.com/user/10819/7d5fa9f0-0b39-4c04-9c6a-5c0b3ae1b014.png"></p>
<h2 id="相关配置"><a href="#相关配置" class="headerlink" title="相关配置"></a>相关配置</h2><p>按 E 选择 Android-x86 8.1-r2 选项
<img src="https://files.mdnice.com/user/10819/6c7fab71-c6df-4e7d-ad5a-bb30201476da.png">
按 E 选择 kernel 开头的选项</p>
<p><img src="https://files.mdnice.com/user/10819/0e252ef8-619f-4c00-a1f9-af2b05632d4b.png"></p>
<p>将字符串中<code>quiet</code>改为 <code>nomodeset xforcevesa</code>，然后按下回车键，再按下键盘上的 B
<img src="https://files.mdnice.com/user/10819/2384fab0-6729-44c2-b4b2-79e19f861ace.png"></p>
<h2 id="进入系统"><a href="#进入系统" class="headerlink" title="进入系统"></a>进入系统</h2><p><img src="https://files.mdnice.com/user/10819/dc7ff947-aa21-4a19-bc24-324f0dd308be.png"></p>
]]></content>
      <categories>
        <category>DevOps</category>
      </categories>
  </entry>
  <entry>
    <title>玩转Linux之常用操作</title>
    <url>/2022/01/06/%E7%8E%A9%E8%BD%ACLinux%E4%B9%8B%E5%B8%B8%E7%94%A8%E6%93%8D%E4%BD%9C/</url>
    <content><![CDATA[<meta name="referrer" content="no-referrer"/>


<span id="more"></span>

<h1 id="设置环境变量"><a href="#设置环境变量" class="headerlink" title="设置环境变量"></a>设置环境变量</h1><p>假设 JDK 的目录为<code>/data/service/jdk1.8.0_261</code></p>
<p>使用以下命令将 JDK 添加至环境变量</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 编辑文件</span></span><br><span class="line">vi/etc/profile</span><br><span class="line"><span class="comment"># 设置JAVA_HOME</span></span><br><span class="line"><span class="built_in">export</span> JAVA_HOME=/data/service/jdk1.8.0_261</span><br><span class="line"><span class="built_in">export</span> PATH=<span class="variable">$PATH</span>:<span class="variable">$JAVA_HOME</span>/bin</span><br><span class="line"><span class="comment"># 使环境变量生效</span></span><br><span class="line"><span class="built_in">source</span>/etc/profile</span><br><span class="line"><span class="comment"># 检测配置是否配置成功</span></span><br><span class="line">java-version</span><br></pre></td></tr></table></figure>

<h1 id="设置服务器定时重启"><a href="#设置服务器定时重启" class="headerlink" title="设置服务器定时重启"></a>设置服务器定时重启</h1><blockquote>
<p>在线工具：<a href="https://cron.qqe2.com/">https://cron.qqe2.com/</a></p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 添加定时任务脚本命令</span></span><br><span class="line">crontab -e</span><br><span class="line"><span class="comment"># 凌晨4点重启服务器</span></span><br><span class="line">0 4 * * * /sbin/reboot</span><br><span class="line"><span class="comment"># 重启服务让定时任务生效</span></span><br><span class="line">systemctl restart crond</span><br><span class="line"><span class="comment"># 配置定时任务开机自启 查看服务是否开机自启</span></span><br><span class="line">systemctl list-unit-files|grep crond.service</span><br><span class="line"><span class="comment"># 如果没有开机自启，设置开机自启</span></span><br><span class="line">systemctl <span class="built_in">enable</span> crond</span><br><span class="line"><span class="comment"># 查看服务器运行了多长时间</span></span><br><span class="line"><span class="built_in">uptime</span></span><br></pre></td></tr></table></figure>

<h1 id="查看服务器网络"><a href="#查看服务器网络" class="headerlink" title="查看服务器网络"></a>查看服务器网络</h1><h2 id="外网-ip"><a href="#外网-ip" class="headerlink" title="外网 ip"></a>外网 ip</h2><ol>
<li>curl ifconfig.me</li>
<li>curl cip.cc</li>
<li>curl icanhazip.com</li>
<li>curl ident.me</li>
<li>curl ipecho.net/plain</li>
<li>curl whatismyip.akamai.com</li>
<li>curl tnx.nl/ip</li>
<li>curl myip.dnsomatic.com</li>
<li>curl ip.appspot.com*</li>
</ol>
<h2 id="本机网络"><a href="#本机网络" class="headerlink" title="本机网络"></a>本机网络</h2><ol>
<li>Ifconfig</li>
<li>ip addr</li>
</ol>
<h1 id="用户管理"><a href="#用户管理" class="headerlink" title="用户管理"></a>用户管理</h1><h2 id="创建一个用户"><a href="#创建一个用户" class="headerlink" title="创建一个用户"></a>创建一个用户</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">adduser [用户名]</span><br></pre></td></tr></table></figure>

<p>PS: useradd 和 adduser 区别</p>
<p>useradd 不会再 home 目录下创建用户文件夹，需要加-m 参数才会创建对应的文件夹，而 adduser 则会默认在 home 文件夹下创建对应的用户文件夹。</p>
<h2 id="给用户设置密码"><a href="#给用户设置密码" class="headerlink" title="给用户设置密码"></a>给用户设置密码</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">passwd [用户名]</span><br></pre></td></tr></table></figure>

<h2 id="删除用户"><a href="#删除用户" class="headerlink" title="删除用户"></a>删除用户</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">userdel 选项 [用户名]</span><br></pre></td></tr></table></figure>

<p>参数:</p>
<ul>
<li>-r 删除用户在本机的所有文件</li>
</ul>
<h2 id="用户切换"><a href="#用户切换" class="headerlink" title="用户切换"></a>用户切换</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">su [用户名]</span><br></pre></td></tr></table></figure>

<p>PS: su 是 switch user 的缩写</p>
<h1 id="禁用-root-远程登陆"><a href="#禁用-root-远程登陆" class="headerlink" title="禁用 root 远程登陆"></a>禁用 root 远程登陆</h1><ol>
<li>修改 SSH 配置文件<code>/etc/ssh/sshd_config</code></li>
</ol>
<p>将<code>PermitRootLogin yes</code>改为<code>PermitRootLogin no</code></p>
<ol start="2">
<li>重启 sshd 服务</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">service sshd restart</span><br></pre></td></tr></table></figure>

<h1 id="修改-SSH-默认端口"><a href="#修改-SSH-默认端口" class="headerlink" title="修改 SSH 默认端口"></a>修改 SSH 默认端口</h1><ol>
<li>修改端口配置文件<code>/etc/ssh/sshd_config</code></li>
</ol>
<p>取消<code>Port</code>前的#注释，并将端口<code>22</code>改成<code>65535</code></p>
<ol start="2">
<li>重启 sshd 服务</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">service sshd restart</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>DevOps</category>
      </categories>
  </entry>
  <entry>
    <title>配置Kali操作系统</title>
    <url>/2022/01/06/%E9%85%8D%E7%BD%AEKali%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/</url>
    <content><![CDATA[<meta name="referrer" content="no-referrer"/>


<span id="more"></span>

<h1 id="软件下载"><a href="#软件下载" class="headerlink" title="软件下载"></a>软件下载</h1><blockquote>
<p>Kali 官网: <a href="https://www.kali.org/get-kali/">https://www.kali.org/get-kali/</a></p>
</blockquote>
<blockquote>
<p>VirtualBox 官网: <a href="https://www.virtualbox.org/wiki/Downloads">https://www.virtualbox.org/wiki/Downloads</a></p>
</blockquote>
<h1 id="apt-命令"><a href="#apt-命令" class="headerlink" title="apt 命令"></a>apt 命令</h1><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 更新软件源中的所有软件列表</span></span><br><span class="line">apt update</span><br><span class="line"><span class="comment"># 显示可升级的软件包</span></span><br><span class="line">apt list --upgradeable</span><br><span class="line"><span class="comment"># 升级软件包</span></span><br><span class="line">apt upgrade</span><br><span class="line"><span class="comment"># 安装软件包</span></span><br><span class="line">apt install &lt;软件包名&gt;</span><br><span class="line"><span class="comment"># 卸载软件包</span></span><br><span class="line">apt remove &lt;软件包名&gt;</span><br><span class="line"><span class="comment"># 显示软件包具体信息</span></span><br><span class="line">apt show &lt;软件包名&gt;</span><br></pre></td></tr></table></figure>

<h1 id="修改-root-密码"><a href="#修改-root-密码" class="headerlink" title="修改 root 密码"></a>修改 root 密码</h1><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 修改 root 用户密码</span></span><br><span class="line">sudo passwd root</span><br><span class="line"><span class="comment"># 切换 root 用户</span></span><br><span class="line">su root</span><br><span class="line"><span class="comment"># 退出 root 用户</span></span><br><span class="line"><span class="built_in">exit</span></span><br></pre></td></tr></table></figure>

<h1 id="配置镜像"><a href="#配置镜像" class="headerlink" title="配置镜像"></a>配置镜像</h1><p>修改配置文件</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vi /etc/apt/sources.list</span><br></pre></td></tr></table></figure>

<p>阿里云镜像</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">deb http://mirrors.aliyun.com/kali kali-rolling main non-free contrib</span><br><span class="line">deb-src http://mirrors.aliyun.com/kali kali-rolling main non-free contrib</span><br></pre></td></tr></table></figure>

<p>中科大镜像</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">deb http://mirrors.ustc.edu.cn/kali kali-rolling main non-free contrib</span><br><span class="line">deb-src http://mirrors.ustc.edu.cn/kali kali-rolling main non-free contrib</span><br></pre></td></tr></table></figure>

<p>更新源并更新软件</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">apt-get update &amp;&amp; apt-get upgrade &amp;&amp; apt-get clean</span><br></pre></td></tr></table></figure>

<h1 id="修改系统语言为中文"><a href="#修改系统语言为中文" class="headerlink" title="修改系统语言为中文"></a>修改系统语言为中文</h1><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo dpkg-reconfigure locales</span><br></pre></td></tr></table></figure>

<p>然后选择字符编码（用空格选定）：</p>
<ol>
<li>en_US.UTF-8（要完全汉化的话把这个去掉，如果只是想解决中文乱码就留着）</li>
<li>zh_CN.GBK</li>
<li>zh_CN.UTF-8</li>
</ol>
<p>解决编码错误显示问题,终端输入：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo apt-get install ttf-wqy-microhei ttf-wqy-zenhei xfonts-wqy</span><br><span class="line"><span class="comment"># 重启</span></span><br><span class="line">sudo reboot</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>网络安全</category>
      </categories>
      <tags>
        <tag>kali</tag>
      </tags>
  </entry>
  <entry>
    <title>玩转Linux之Docker</title>
    <url>/2022/01/06/%E7%8E%A9%E8%BD%ACLinux%E4%B9%8BDocker/</url>
    <content><![CDATA[<meta name="referrer" content="no-referrer"/>


<span id="more"></span>

<h1 id="Linux下安装Docker"><a href="#Linux下安装Docker" class="headerlink" title="Linux下安装Docker"></a>Linux下安装Docker</h1><h2 id="安装Docker"><a href="#安装Docker" class="headerlink" title="安装Docker"></a>安装Docker</h2><ol>
<li>自动安装</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">source</span> &lt;(curl -L https://get.docker.com/) --mirror Aliyun</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>手动安装</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yum remove docker \</span><br><span class="line">                  docker-client \</span><br><span class="line">                  docker-client-latest \</span><br><span class="line">                  docker-common \</span><br><span class="line">                  docker-latest \</span><br><span class="line">                  docker-latest-logrotate \</span><br><span class="line">                  docker-logrotate \</span><br><span class="line">                  docker-engine</span><br><span class="line">yum install -y yum-utils</span><br><span class="line">yum-config-manager \</span><br><span class="line">    --add-repo \</span><br><span class="line">    https://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo</span><br><span class="line">yum makecache fast</span><br><span class="line">yum install -y docker-ce docker-ce-cli containerd.io</span><br><span class="line">systemctl start docker</span><br></pre></td></tr></table></figure>

<h2 id="设置镜像"><a href="#设置镜像" class="headerlink" title="设置镜像"></a>设置镜像</h2><p>Docker 默认的镜像源于国内而言是有些慢，所以可以配置一下国内的镜像源，提高一下 pull 速度</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">mkdir</span> -p /etc/docker</span><br><span class="line"><span class="built_in">cat</span> &gt;/etc/docker/daemon.json &lt;&lt;<span class="string">EOF </span></span><br><span class="line"><span class="string">&#123;</span></span><br><span class="line"><span class="string"> &quot;registry-mirrors&quot;:[&quot;https://docker.mirrors.ustc.edu.cn&quot;,&quot;https://hub-mirror.c.163.com&quot;,&quot;https://registry.docker-cn.com&quot;]</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string">EOF</span></span><br><span class="line">systemctl daemon-reload &amp;&amp; systemctl <span class="built_in">enable</span> docker &amp;&amp; systemctl restart docker</span><br></pre></td></tr></table></figure>

<p>镜像网站：</p>
<ol>
<li>中科大镜像：<a href="https://docker.mirrors.ustc.edu.cn/">https://docker.mirrors.ustc.edu.cn</a></li>
<li>网易163镜像：<a href="https://hub-mirror.c.163.com/">https://hub-mirror.c.163.com</a></li>
<li>Docker中国：<a href="https://registry.docker-cn.com/">https://registry.docker-cn.com</a></li>
</ol>
<blockquote>
<p>阿里云镜像服务参考：<a href="https://cr.console.aliyun.com/cn-shanghai/instances/mirrors">https://cr.console.aliyun.com/cn-shanghai/instances/mirrors</a></p>
</blockquote>
<h2 id="卸载Docker"><a href="#卸载Docker" class="headerlink" title="卸载Docker"></a>卸载Docker</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 卸载 Docker Engine，CLI 和 Containerd 软件包</span></span><br><span class="line">yum remove docker-ce docker-ce-cli containerd.io</span><br><span class="line"><span class="comment"># 主机上的映像，容器，卷或自定义配置文件不会自动删除。要删除所有图像，容器和卷</span></span><br><span class="line"><span class="built_in">rm</span> -rf /var/lib/docker</span><br></pre></td></tr></table></figure>

<h2 id="常用指令"><a href="#常用指令" class="headerlink" title="常用指令"></a>常用指令</h2><h3 id="镜像指令"><a href="#镜像指令" class="headerlink" title="镜像指令"></a>镜像指令</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker images <span class="comment"># 查看 Docker 中当前拥有哪些镜像</span></span><br><span class="line">docker image MySQL <span class="comment"># 查询指定镜像名</span></span><br><span class="line">docker pull MySQL:5.7 <span class="comment"># 下载镜像</span></span><br><span class="line">docker search MySQL <span class="comment"># 搜索一下镜像有哪些版本</span></span><br><span class="line">docker image <span class="built_in">rm</span> MySQL:5.5 <span class="comment"># 删除镜像</span></span><br><span class="line">docker image <span class="built_in">rm</span> bf756fb1ae65 <span class="comment"># 通过指定镜像 id 进行删除</span></span><br><span class="line">docker image <span class="built_in">rm</span> -f bf756fb1ae65 <span class="comment"># 如果删除的镜像正在运行中，此时需要强制执行删除</span></span><br><span class="line">docker rmi -f $(docker images MySQL -q) <span class="comment"># 借助rmi和-p进行一些联合操作，比如现在想删除所有的 MySQL 镜像</span></span><br></pre></td></tr></table></figure>

<h3 id="容器指令"><a href="#容器指令" class="headerlink" title="容器指令"></a>容器指令</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker run tomcat:8.0-jre8 <span class="comment"># 通过镜像运行一个容器</span></span><br><span class="line">docker ps <span class="comment"># 查看当前运行的容器</span></span><br><span class="line">docker run -p 8080:8080 tomcat:8.0-jre8 <span class="comment"># 对宿主机端口与容器内的端口进行映射</span></span><br><span class="line">docker run -d -p 8080:8080 --name tomcat01 tomcat:8.0-jre8 <span class="comment"># 后台的方式运行，并设置容器名称</span></span><br><span class="line">docker ps -a <span class="comment"># 列举运行和非运行的容器</span></span><br><span class="line">docker start c2f5d78c5d1a <span class="comment"># 启动容器</span></span><br><span class="line">docker restart c2f5d78c5d1a <span class="comment"># 重启容器</span></span><br><span class="line">docker stop c2f5d78c5d1a <span class="comment"># 停止容器</span></span><br><span class="line">docker <span class="built_in">kill</span> c2f5d78c5d1a <span class="comment"># 直接杀死指定的容器</span></span><br><span class="line">docker <span class="built_in">rm</span> d5b6c177c151 <span class="comment"># 删除容器</span></span><br><span class="line">docker <span class="built_in">rm</span> -f d5b6c177c151 <span class="comment"># 强制删除容器</span></span><br><span class="line">docker <span class="built_in">rm</span> -f $(docker ps -qa) <span class="comment"># 强制删除所有容器</span></span><br><span class="line">docker logs 289cc00dc5ed <span class="comment"># 查看容器的运行日志 使用-f参数显示实时日志 -t参数还能够显示日志的时间戳</span></span><br><span class="line">docker top 289cc00dc5ed <span class="comment"># 查看容器内运行了哪些进程</span></span><br><span class="line">docker <span class="built_in">exec</span> -it 289cc00dc5ed bash <span class="comment"># 与容器进行交互 使用exit 从容器内退出到宿主机</span></span><br><span class="line">docker <span class="built_in">cp</span> ./test.html 289cc00dc5ed:/usr/local/tomcat/webapps <span class="comment"># 将文件从宿主机复制到容器中</span></span><br><span class="line">docker inspect 923c969b0d91 <span class="comment"># 查看容器内部具体的细节</span></span><br></pre></td></tr></table></figure>

<h3 id="数据卷指令"><a href="#数据卷指令" class="headerlink" title="数据卷指令"></a>数据卷指令</h3><p>能够实现宿主机与容器之间的文件共享，它的好处在于我们对宿主机的文件进行修改将直接影响容器，而无需再将宿主机的文件再复制到容器中。</p>
<p>若是想将宿主机中<code>/opt/apps</code>目录与容器中 webapps 目录做一个数据卷，则应该这样编写指令</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker run -d -p 8080:8080 --name tomcat01 -v /opt/apps:/usr/local/tomcat/webapps tomcat:8.0-jre8</span><br></pre></td></tr></table></figure>

<p>这就说明我们的数据卷设置成功了，Docker 会将容器内的 webapps 目录与<code>/opt/apps</code>目录进行同步，而此时<code>/opt/apps</code>目录是空的，导致 webapps 目录也会变成空目录，所以就访问不到了。</p>
<p>此时我们只需向<code>/opt/apps</code>目录下添加文件，就会使得 webapps 目录也会拥有相同的文件，达到文件共享</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker run -d -p 8080:8080 --name tomcat01 -v aa:/usr/local/tomcat/webapps tomcat:8.0-jre8</span><br></pre></td></tr></table></figure>

<p>此时的 aa 并不是数据卷的目录，而是数据卷的别名，Docker 会为我们自动创建一个名为 aa 的数据卷，并且会将容器内 webapps 目录下的所有内容复制到数据卷中，该数据卷的位置在<code>/var/lib/docker/volumes</code>
目录下</p>
<p>此时我们只需修改该目录的内容就能能够影响到容器。</p>
<h3 id="其他指令"><a href="#其他指令" class="headerlink" title="其他指令"></a>其他指令</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker commit -m <span class="string">&quot;描述信息&quot;</span> -a <span class="string">&quot;镜像作者&quot;</span> tomcat01 my_tomcat:1.0 <span class="comment"># 将容器打包成一个镜像</span></span><br><span class="line">docker save my_tomcat:1.0 -o my-tomcat-1.0.tar <span class="comment"># 将镜像备份出来</span></span><br><span class="line">docker load -i my-tomcat-1.0.tar <span class="comment"># 将.tar格式的镜像，加载到Docker中</span></span><br></pre></td></tr></table></figure>

<h1 id="Docker下安装MySQL-5-7-31"><a href="#Docker下安装MySQL-5-7-31" class="headerlink" title="Docker下安装MySQL 5.7.31"></a>Docker下安装MySQL 5.7.31</h1><h2 id="安装MySQL-5-7-31"><a href="#安装MySQL-5-7-31" class="headerlink" title="安装MySQL 5.7.31"></a>安装MySQL 5.7.31</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 1. 拉去镜像</span></span><br><span class="line">docker pull mysql:5.7.31</span><br><span class="line"><span class="comment"># 2. 运行</span></span><br><span class="line">docker run -d --name my-mysql -p 9506:3306 -v /data/mysql:/var/lib/mysql -e MYSQL_ROOT_PASSWORD=123456 --restart=always mysql:5.7.31</span><br></pre></td></tr></table></figure>

<p>参数说明:</p>
<ul>
<li><code>-d</code>: 后台运行容器，并返回容器 ID</li>
<li><code>--name my-mysql</code>: 为容器指定一个名称</li>
<li><code>-p</code>: 指定端口映射，格式为：主机(宿主)端口:容器端口</li>
<li><code>-v</code>: 绑定一个卷，容器的 <code>/var/lib/mysql</code> 映射到 主机的目录 <code>/data/mysql</code></li>
<li><code>-e MYSQL_ROOT_PASSWORD=123456</code>: 设置环境变量，密码设置为 123456</li>
<li><code>mysql:5.7.31</code>：使用镜像 mysql:5.7.31</li>
</ul>
<h2 id="设置密码"><a href="#设置密码" class="headerlink" title="设置密码"></a>设置密码</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 进入到容器命令</span></span><br><span class="line">docker <span class="built_in">exec</span> -it [容器ID] /bin/bash</span><br><span class="line"><span class="comment"># 输入数据库账号密码命令</span></span><br><span class="line">mysql -uroot -p</span><br><span class="line"><span class="comment"># 进入界面后更改 root 密码（123456 为我的新密码 ，此处密码由您决定）</span></span><br><span class="line">update mysql.user <span class="built_in">set</span> authentication_string=password(<span class="string">&#x27;123456&#x27;</span>) <span class="built_in">where</span> user=<span class="string">&#x27;root&#x27;</span> and Host = <span class="string">&#x27;localhost&#x27;</span>;</span><br><span class="line"><span class="comment"># 刷新缓存</span></span><br><span class="line">flush privileges;</span><br><span class="line"><span class="comment"># 退出</span></span><br><span class="line"><span class="built_in">exit</span></span><br></pre></td></tr></table></figure>

<p>然后重进 mysql，用修改后的密码登录即可</p>
<h1 id="Dcoker下安装Redis-6-2-7"><a href="#Dcoker下安装Redis-6-2-7" class="headerlink" title="Dcoker下安装Redis 6.2.7"></a>Dcoker下安装Redis 6.2.7</h1><blockquote>
<p>Redis 官网: <a href="https://redis.io/">https://redis.io/</a></p>
<p>AnotherRedisDesktopManager: <a href="https://github.com/qishibo/AnotherRedisDesktopManager/releases">https://github.com/qishibo/AnotherRedisDesktopManager/releases</a></p>
</blockquote>
<h2 id="安装Redis-6-2-7"><a href="#安装Redis-6-2-7" class="headerlink" title="安装Redis 6.2.7"></a>安装Redis 6.2.7</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker pull redis:6.2.7</span><br><span class="line">docker run -d --name my-redis -p 6379:6379 --restart=always redis:6.2.7 \</span><br><span class="line">redis-server --appendonly <span class="built_in">yes</span> --requirepass 123456</span><br></pre></td></tr></table></figure>

<h2 id="设置密码-1"><a href="#设置密码-1" class="headerlink" title="设置密码"></a>设置密码</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 进入容器</span></span><br><span class="line">docker <span class="built_in">exec</span> -it my-redis redis-cli</span><br><span class="line"><span class="comment"># 设置密码</span></span><br><span class="line">config <span class="built_in">set</span> requirepass 123456</span><br></pre></td></tr></table></figure>

<h1 id="将jar打包成Docker镜像并运行"><a href="#将jar打包成Docker镜像并运行" class="headerlink" title="将jar打包成Docker镜像并运行"></a>将jar打包成Docker镜像并运行</h1><p>Dockerfile 文件内容如下:</p>
<figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line"><span class="keyword">FROM</span> java:<span class="number">8</span></span><br><span class="line"><span class="keyword">ADD</span><span class="language-bash"> spring-boot-app-1.0.0.jar spring-boot-app.jar</span></span><br><span class="line"><span class="keyword">EXPOSE</span> <span class="number">8080</span></span><br><span class="line"><span class="keyword">ENTRYPOINT</span><span class="language-bash"> [<span class="string">&quot;java&quot;</span>,<span class="string">&quot;-jar&quot;</span>,<span class="string">&quot;/spring-boot-app.jar&quot;</span>]</span></span><br></pre></td></tr></table></figure>

<p>参数说明:</p>
<ul>
<li><code>from java:8</code> 拉取一个 jdk 为 1.8 的 docker image</li>
<li><code>spring-boot-app-1.0.0.jar</code> 就是你上传的 jar 包，替换为 jar 包的名称</li>
<li><code>spring-boot-app.jar</code> 是你将该 jar 包重新命名为什么名称，在容器中运行</li>
<li><code>expose</code> 该容器暴露的端口是多少，就是 jar 在容器中以多少端口运行</li>
<li><code>entrypoint</code> 容器启动之后执行的命令，java -jar /spring-boot-app.jar 即启动 jar</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 打包镜像</span></span><br><span class="line">docker build -t spring-boot-app .</span><br><span class="line"><span class="comment"># 运行容器</span></span><br><span class="line">docker run -d -p 8080:8080 --name spring-boot-app-8080 spring-boot-app</span><br><span class="line"><span class="comment"># 查看启动日志</span></span><br><span class="line">docker logs -n 300 -f spring-boot-app-8080</span><br></pre></td></tr></table></figure>

<h1 id="buildx交叉编译"><a href="#buildx交叉编译" class="headerlink" title="buildx交叉编译"></a>buildx交叉编译</h1><h2 id="开启buildx功能"><a href="#开启buildx功能" class="headerlink" title="开启buildx功能"></a>开启buildx功能</h2><p>修改<code>/root/.docker/config.json</code>，添加内容如下：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;experimental&quot;</span><span class="punctuation">:</span> <span class="string">&quot;enabled&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<h2 id="创建并启动多平台构建器"><a href="#创建并启动多平台构建器" class="headerlink" title="创建并启动多平台构建器"></a>创建并启动多平台构建器</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 创建builder实例</span></span><br><span class="line">docker buildx create --use --name mybuilder</span><br><span class="line"><span class="comment"># 使用新创建好的builder实例</span></span><br><span class="line">docker buildx use mybuilder</span><br><span class="line"><span class="comment"># 查看已有的builder实例</span></span><br><span class="line">docker buildx <span class="built_in">ls</span></span><br><span class="line"><span class="comment"># 安装模拟器（用于多平台镜像构建）</span></span><br><span class="line">docker run --privileged --<span class="built_in">rm</span> tonistiigi/binfmt --install all</span><br></pre></td></tr></table></figure>

<blockquote>
<p>docker buildx：<a href="https://docs.docker.com/engine/reference/commandline/buildx/">https://docs.docker.com/engine/reference/commandline/buildx/</a></p>
</blockquote>
<h2 id="构建镜像并推送"><a href="#构建镜像并推送" class="headerlink" title="构建镜像并推送"></a>构建镜像并推送</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker buildx build -t jonssonyan/buildx_images_name:latest --platform linux/386,linux/amd64,linux/arm/v6,linux/arm/v7,linux/arm64,linux/ppc64le,linux/s390x --push .</span><br></pre></td></tr></table></figure>

<blockquote>
<p>docker buildx build：<a href="https://docs.docker.com/engine/reference/commandline/buildx_build/">https://docs.docker.com/engine/reference/commandline/buildx_build/</a></p>
</blockquote>
<h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p>[1]<a href="https://yeasy.gitbook.io/docker_practice/introduction/why">《docker 从入门到实践》</a></p>
<p>[2]<a href="https://hub.docker.com/">dcoker hub</a></p>
]]></content>
      <categories>
        <category>DevOps</category>
      </categories>
      <tags>
        <tag>linux</tag>
        <tag>docker</tag>
      </tags>
  </entry>
  <entry>
    <title>整理开发中常用的软件</title>
    <url>/2022/01/06/%E6%95%B4%E7%90%86%E5%BC%80%E5%8F%91%E4%B8%AD%E5%B8%B8%E7%94%A8%E7%9A%84%E8%BD%AF%E4%BB%B6/</url>
    <content><![CDATA[<meta name="referrer" content="no-referrer"/>


<span id="more"></span>

<h1 id="开发工具"><a href="#开发工具" class="headerlink" title="开发工具"></a>开发工具</h1><p><a href="https://www.oracle.com/java/technologies/downloads/#java8">JDK8</a></p>
<p><a href="https://dev.mysql.com/downloads/mysql/">MySQL</a></p>
<p><a href="https://www.netsarang.com/zh/free-for-home-school/">Xshell</a></p>
<p><a href="https://www.jetbrains.com/">JetBrains</a></p>
<p><a href="https://go.dev/dl/">Go</a></p>
<p><a href="https://www.python.org/ftp/python/">Python3</a></p>
<p><a href="https://docs.python.org/zh-cn/3/">Python3 doc</a></p>
<p><a href="https://www.elastic.co/cn/downloads/past-releases/elasticsearch-7-6-2">Elasticsearch7.6.2</a></p>
<p><a href="https://www.elastic.co/cn/downloads/past-releases/kibana-7-6-2">Kibana</a></p>
<p><a href="https://sourceforge.net/projects/mingw-w64/files/">MinGW-w64</a></p>
<p><a href="https://github.com/redis/redis">Redis</a></p>
<p><a href="https://github.com/qishibo/AnotherRedisDesktopManager">AnotherRedisDesktopManager</a></p>
<p><a href="https://code.visualstudio.com/download">VSCode</a></p>
<p><a href="https://www.postman.com/downloads/">Postman</a></p>
<p><a href="https://git-scm.com/downloads">Git</a></p>
<p><a href="https://nodejs.org/zh-cn/docs/">Node.js</a></p>
<p><a href="https://www.centos.org/download/">CentOS</a></p>
<p><a href="https://www.vmware.com/cn/products/workstation-player.html">VMware Workstation Player</a></p>
<h1 id="科学上网"><a href="#科学上网" class="headerlink" title="科学上网"></a>科学上网</h1><h2 id="常用方案"><a href="#常用方案" class="headerlink" title="常用方案"></a>常用方案</h2><ol>
<li><a href="https://github.com/shadowsocks">shadowsocks</a> (被墙几率大)</li>
<li><a href="https://github.com/shadowsocksrr">shadowsocksrr</a> (被墙几率大)</li>
<li><a href="https://github.com/v2ray">v2ray</a> (作者消失)</li>
<li><a href="https://github.com/v2fly">v2fly</a> (社区维护的 V2ray 稳定)</li>
<li><a href="https://github.com/trojan-gfw">trojan-gfw</a> (轻量 稳定)</li>
<li><a href="https://github.com/p4gefau1t/trojan-go">trojan-go</a> (trojan 的 Go 版本 轻量 稳定)</li>
</ol>
<h2 id="客户端"><a href="#客户端" class="headerlink" title="客户端"></a>客户端</h2><h3 id="Android"><a href="#Android" class="headerlink" title="Android"></a>Android</h3><ol>
<li><p><a href="https://github.com/trojan-gfw/igniter">igniter</a></p>
</li>
<li><p><a href="https://github.com/p4gefau1t/trojan-go-android">trojan-go-android</a></p>
</li>
</ol>
<h3 id="IOS"><a href="#IOS" class="headerlink" title="IOS"></a>IOS</h3><ol>
<li><a href="https://apps.apple.com/us/app/shadowrocket/id932747118">Shadowrocket</a></li>
</ol>
<h3 id="Windows"><a href="#Windows" class="headerlink" title="Windows"></a>Windows</h3><ul>
<li><a href="https://github.com/v2fly/v2ray-core">v2ray-core</a></li>
<li><a href="https://github.com/Qv2ray/Qv2ray/">Qv2ray</a></li>
<li><a href="https://github.com/Qv2ray/QvPlugin-Trojan">QvPlugin-Trojan</a></li>
<li><a href="https://github.com/p4gefau1t/trojan-go">trojan-go</a></li>
<li><a href="https://github.com/Qv2ray/QvPlugin-Trojan-Go">QvPlugin-Trojan-Go</a></li>
</ul>
<h2 id="加速"><a href="#加速" class="headerlink" title="加速"></a>加速</h2><ol>
<li><a href="https://github.com/cx9208/bbrplus">BBRplus</a></li>
</ol>
<h2 id="反代理软件"><a href="#反代理软件" class="headerlink" title="反代理软件"></a>反代理软件</h2><ol>
<li><a href="https://hub.docker.com/r/abiosoft/caddy">Caddy</a> (自动申请证书 推荐)</li>
<li><a href="https://hub.docker.com/_/nginx">Nginx</a> (手动申请证书)</li>
</ol>
<h1 id="其他软件"><a href="#其他软件" class="headerlink" title="其他软件"></a>其他软件</h1><p><a href="https://github.com/obsproject/obs-studio">OBS</a></p>
<p><a href="https://zh.snipaste.com/download.html">snipaste</a></p>
<p><a href="https://www.7-zip.org/download.html">7-zip</a></p>
<p><a href="https://www.virtualbox.org/wiki/Downloads">VirtualBox</a></p>
<p><a href="https://www.mdnice.com/">mdnice</a></p>
<p><a href="https://www.google.com/intl/zh-CN/chrome/?standalone=1">Chrome 离线版</a></p>
<p><a href="https://github.com/huihut/OpenCV-MinGW-Build">OpenCV-MinGW-Build</a></p>
<h1 id="装机"><a href="#装机" class="headerlink" title="装机"></a>装机</h1><h2 id="制作U盘启动器"><a href="#制作U盘启动器" class="headerlink" title="制作U盘启动器"></a>制作U盘启动器</h2><ol>
<li><a href="http://rufus.akeo.ie/">Rufus</a> (windows)</li>
<li><a href="http://unetbootin.sourceforge.net/">UNetbootin</a> (跨平台)</li>
<li><a href="http://sourceforge.net/projects/win32diskimager/">Win32 Disk Imager</a> (windows)</li>
</ol>
]]></content>
      <categories>
        <category>实用工具</category>
      </categories>
  </entry>
  <entry>
    <title>Linux环境GraalVM编译jar</title>
    <url>/2022/01/06/Linux%E7%8E%AF%E5%A2%83GraalVM%E7%BC%96%E8%AF%91jar/</url>
    <content><![CDATA[<meta name="referrer" content="no-referrer"/>


<span id="more"></span>

<h1 id="安装-GraalVM"><a href="#安装-GraalVM" class="headerlink" title="安装 GraalVM"></a>安装 GraalVM</h1><p><a href="https://github.com/graalvm/graalvm-ce-builds/releases/download/vm-19.3.6/graalvm-ce-java8-linux-amd64-19.3.6.tar.gz">GraalVM ce Java8 Linux 下载地址</a></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 解压</span></span><br><span class="line">tar -xzf graalvm-ce-java8-linux-amd64-19.3.6.tar.gz</span><br></pre></td></tr></table></figure>

<h1 id="配置环境变量"><a href="#配置环境变量" class="headerlink" title="配置环境变量"></a>配置环境变量</h1><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">export</span> JAVA_HOME=[GraalVM根目录的路径]</span><br><span class="line"><span class="built_in">export</span> PATH=<span class="variable">$PATH</span>:<span class="variable">$JAVA_HOME</span>/bin</span><br><span class="line"><span class="comment"># 让修改后的环境变量生效</span></span><br><span class="line"><span class="built_in">source</span> /etc/profile</span><br><span class="line"><span class="comment"># 验证是否生效</span></span><br><span class="line">java -version</span><br></pre></td></tr></table></figure>

<h1 id="安装-native-image"><a href="#安装-native-image" class="headerlink" title="安装 native-image"></a>安装 native-image</h1><p>国内网络下载比较慢建议进行离线安装</p>
<p><a href="https://github.com/graalvm/graalvm-ce-builds/releases/download/vm-19.3.6/native-image-installable-svm-java8-linux-amd64-19.3.6.jar">native-image 离线版下载地址</a></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 离线安装</span></span><br><span class="line">gu -L install [native-image离线jar包的全路径]</span><br><span class="line"><span class="comment"># 查看已安装列表</span></span><br><span class="line">gu list</span><br></pre></td></tr></table></figure>

<p><img src="https://files.mdnice.com/user/10819/b8191a1b-b808-44ad-954b-16315073b816.png" alt="已安装列表"></p>
<h1 id="编译-jar-包"><a href="#编译-jar-包" class="headerlink" title="编译 jar 包"></a>编译 jar 包</h1><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">native-image -jar [jar包全路径] [编译后的文件名称]</span><br></pre></td></tr></table></figure>

<p><img src="https://files.mdnice.com/user/10819/8449809e-dacd-4507-bb1c-ac2e0d3b50d5.png" alt="编译过程"></p>
<p><img src="https://files.mdnice.com/user/10819/dee819bb-fc70-4a5b-adc0-5817f6624edb.png" alt="编译结果"></p>
<p>可以看到原 jar 包文件大小是 17MB，编译好的二进制文件是 3MB，编译时间为 51s</p>
<h1 id="运行编译好的文件"><a href="#运行编译好的文件" class="headerlink" title="运行编译好的文件"></a>运行编译好的文件</h1><p>编译好的文件是二进制文件，Linux 环境下可以直接运行。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 运行</span></span><br><span class="line"><span class="built_in">chmod</span> +x demo &amp;&amp; ./demo</span><br></pre></td></tr></table></figure>

<p><img src="https://files.mdnice.com/user/10819/8f4c8ca8-20d7-4d1c-8865-dd2d1a56c567.png" alt="执行结果"></p>
]]></content>
      <categories>
        <category>DevOps</category>
      </categories>
      <tags>
        <tag>linux</tag>
      </tags>
  </entry>
  <entry>
    <title>Windows10安装MySQL5.7</title>
    <url>/2022/01/06/Windows10%E5%AE%89%E8%A3%85MySQL5-7/</url>
    <content><![CDATA[<meta name="referrer" content="no-referrer"/>


<span id="more"></span>

<h1 id="下载-MySQL5-7-29"><a href="#下载-MySQL5-7-29" class="headerlink" title="下载 MySQL5.7.29"></a>下载 MySQL5.7.29</h1><blockquote>
<p>MySQL 官网: <a href="https://dev.mysql.com/downloads/mysql/5.7.html">https://dev.mysql.com/downloads/mysql/5.7.html</a></p>
</blockquote>
<h1 id="添加环境变量"><a href="#添加环境变量" class="headerlink" title="添加环境变量"></a>添加环境变量</h1><p>将 MySQL bin 目录添加至系统环境变量</p>
<p><img src="https://files.mdnice.com/user/10819/b9bb5faf-e552-4ad9-bf0e-b65bb47e1353.png"></p>
<h1 id="安装-MySQL5-7-29"><a href="#安装-MySQL5-7-29" class="headerlink" title="安装 MySQL5.7.29"></a>安装 MySQL5.7.29</h1><p>本例 MySQL 安装位置: <code>D:\Applications\mysql-5.7.29-winx64</code></p>
<p><img src="https://files.mdnice.com/user/10819/b70e8299-2b95-4ab3-8b75-7acc855faee4.png"></p>
<ol>
<li>新建 my.ini 文件并编辑，my.ini 文件内容如下</li>
</ol>
<figure class="highlight ini"><table><tr><td class="code"><pre><span class="line"><span class="section">[Client]</span></span><br><span class="line"><span class="comment">#设置3306端口</span></span><br><span class="line"><span class="attr">port</span> = <span class="number">3306</span></span><br><span class="line"><span class="section">[mysqld]</span></span><br><span class="line"><span class="comment">#设置3306端口</span></span><br><span class="line"><span class="attr">port</span> = <span class="number">3306</span></span><br><span class="line"><span class="comment"># 设置mysql的安装目录</span></span><br><span class="line"><span class="attr">basedir</span>=D:\Applications\mysql-<span class="number">5.7</span>.<span class="number">29</span>-winx64\</span><br><span class="line"><span class="comment"># 设置mysql数据库的数据的存放目录</span></span><br><span class="line"><span class="attr">datadir</span>=D:\Applications\mysql-<span class="number">5.7</span>.<span class="number">29</span>-winx64\data</span><br><span class="line"><span class="comment"># 允许最大连接数</span></span><br><span class="line"><span class="attr">max_connections</span>=<span class="number">200</span></span><br><span class="line"><span class="comment"># 服务端使用的字符集默认为8比特编码的latin1字符集</span></span><br><span class="line"><span class="attr">character-set-server</span>=utf8mb4</span><br><span class="line"><span class="comment"># 创建新表时将使用的默认存储引擎</span></span><br><span class="line"><span class="attr">default-storage-engine</span>=INNODB</span><br><span class="line"><span class="attr">sql_mode</span>=NO_ENGINE_SUBSTITUTION,STRICT_TRANS_TABLES</span><br><span class="line"><span class="comment">#设置时区</span></span><br><span class="line"><span class="attr">default-time-zone</span> = <span class="string">&#x27;+8:00&#x27;</span></span><br><span class="line"><span class="section">[mysql]</span></span><br><span class="line"><span class="comment"># 设置mysql客户端默认字符集</span></span><br><span class="line"><span class="attr">default-character-set</span>=utf8mb4</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>管理员权限启动命令行并输入以下命令</li>
</ol>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 初始化数据文件</span></span><br><span class="line">mysqld --initialize-insecure --user=mysql;</span><br><span class="line"><span class="comment"># 安装</span></span><br><span class="line">mysqld –install</span><br><span class="line"><span class="comment"># 启动</span></span><br><span class="line">net start mysql</span><br><span class="line"><span class="comment"># 登录</span></span><br><span class="line">mysql -uroot -p</span><br><span class="line"><span class="comment"># 更改root密码(密码为123456)</span></span><br><span class="line">update mysql.user set authentication_string=password(<span class="string">&#x27;123456&#x27;</span>) where user=<span class="string">&#x27;root&#x27;</span> and Host = <span class="string">&#x27;localhost&#x27;</span>;</span><br><span class="line"><span class="comment"># 刷新权限</span></span><br><span class="line">flush privileges;</span><br><span class="line"><span class="comment"># 退出MySQL命令行</span></span><br><span class="line"><span class="keyword">exit</span></span><br><span class="line"><span class="comment"># 停止</span></span><br><span class="line">net stop mysql</span><br><span class="line"><span class="comment"># 再次启动</span></span><br><span class="line">net start mysql</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>开发环境</category>
      </categories>
      <tags>
        <tag>mysql</tag>
      </tags>
  </entry>
  <entry>
    <title>Windows10配置Node开发环境</title>
    <url>/2022/01/06/Windows10%E9%85%8D%E7%BD%AENode%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83/</url>
    <content><![CDATA[<meta name="referrer" content="no-referrer"/>


<span id="more"></span>

<h1 id="下载-Node-js"><a href="#下载-Node-js" class="headerlink" title="下载 Node.js"></a>下载 Node.js</h1><blockquote>
<p>Node.js 官网: <a href="https://nodejs.org/zh-cn/download/">https://nodejs.org/zh-cn/download/</a></p>
</blockquote>
<h1 id="使用nvm管理Node版本"><a href="#使用nvm管理Node版本" class="headerlink" title="使用nvm管理Node版本"></a>使用nvm管理Node版本</h1><blockquote>
<p>nvm: <a href="https://github.com/nvm-sh/nvm">https://github.com/nvm-sh/nvm</a></p>
<p>nvm-windows: <a href="https://github.com/coreybutler/nvm-windows">https://github.com/coreybutler/nvm-windows</a></p>
</blockquote>
<p>设置国内Node和npm镜像：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">nvm npm_mirror https://npmmirror.com/mirrors/npm/</span><br><span class="line">nvm node_mirror https://npmmirror.com/mirrors/node/</span><br></pre></td></tr></table></figure>

<h1 id="修改-npm-全局模块安装路径"><a href="#修改-npm-全局模块安装路径" class="headerlink" title="修改 npm 全局模块安装路径"></a>修改 npm 全局模块安装路径</h1><p>全局模块默认安装路径: <code>%USERPROFILE%\AppData\Roaming\npm</code></p>
<p>本例 Node.js 安装路位置: <code>D:\Applications\nodejs</code></p>
<ol>
<li><p>在 Nodejs 的根目录下创建全局模块路径<code>node_global</code>和全局缓存路径<code>node_cache</code></p>
</li>
<li><p>设置全局模块路径和全局缓存路径(注意:路径中不能包含空格否则 npx 使用不了)</p>
</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 全局模块路径</span></span><br><span class="line">npm config <span class="built_in">set</span> prefix <span class="string">&quot;D:\Applications\nodejs\node_global&quot;</span></span><br><span class="line"><span class="comment"># 全局缓存路径</span></span><br><span class="line">npm config <span class="built_in">set</span> cache <span class="string">&quot;D:\Applications\nodejs\node_cache&quot;</span></span><br><span class="line"><span class="comment"># 查看配置</span></span><br><span class="line">npm config list</span><br></pre></td></tr></table></figure>

<ol start="3">
<li>将以下路径添加至环境变量</li>
</ol>
<figure class="highlight taggerscript"><table><tr><td class="code"><pre><span class="line">D:\Applications<span class="symbol">\n</span>odejs</span><br><span class="line">D:\Applications<span class="symbol">\n</span>odejs<span class="symbol">\n</span>ode_global</span><br></pre></td></tr></table></figure>

<h1 id="修改-npm-为国内镜像"><a href="#修改-npm-为国内镜像" class="headerlink" title="修改 npm 为国内镜像"></a>修改 npm 为国内镜像</h1><p>在命令行依次输入以下命令</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 修改为淘宝镜像</span></span><br><span class="line">npm config <span class="built_in">set</span> registry https://registry.npm.taobao.org</span><br><span class="line"><span class="comment"># 如果开发electron，则需要设置electron国内镜像</span></span><br><span class="line">npm config <span class="built_in">set</span> electron_mirror=https://npm.taobao.org/mirrors/electron/</span><br><span class="line"><span class="comment"># electron打包是也需要设置镜像，否则特别慢</span></span><br><span class="line">npm config <span class="built_in">set</span> electron-builder-binaries_mirror=https://npm.taobao.org/mirrors/electron-builder-binaries/</span><br><span class="line"><span class="comment"># 查看npm的仓库地址</span></span><br><span class="line">npm config get registry</span><br></pre></td></tr></table></figure>

<h1 id="安装-yarn"><a href="#安装-yarn" class="headerlink" title="安装 yarn"></a>安装 yarn</h1><p>在全局模块 yarn 根目录下创建全局模块路径<code>yarn_global</code>和缓存路径<code>yarn_cache</code></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 全局安装</span></span><br><span class="line">npm install -g yarn</span><br><span class="line"><span class="comment"># 查看版本号</span></span><br><span class="line">yarn --version</span><br><span class="line"><span class="comment"># 设置yarn为国内镜像</span></span><br><span class="line">yarn config <span class="built_in">set</span> registry https://registry.npm.taobao.org</span><br><span class="line"><span class="comment"># 如果开发electron，则需要设置electron国内镜像</span></span><br><span class="line">yarn config <span class="built_in">set</span> electron_mirror=https://npm.taobao.org/mirrors/electron/</span><br><span class="line"><span class="comment"># electron打包是也需要设置镜像，否则特别慢</span></span><br><span class="line">yarn config <span class="built_in">set</span> electron-builder-binaries_mirror=https://npm.taobao.org/mirrors/electron-builder-binaries/</span><br><span class="line"><span class="comment"># 全局模块路径</span></span><br><span class="line">yarn config <span class="built_in">set</span> global-folder <span class="string">&quot;D:\Applications\nodejs\node_global\node_modules\yarn\yarn_global&quot;</span></span><br><span class="line"><span class="comment"># 设置缓存路径</span></span><br><span class="line">yarn config <span class="built_in">set</span> cache-folder <span class="string">&quot;D:\Applications\nodejs\node_global\node_modules\yarn\yarn_cache&quot;</span></span><br><span class="line"><span class="comment"># 查看配置</span></span><br><span class="line">yarn config list</span><br></pre></td></tr></table></figure>

<h1 id="安装pnpm"><a href="#安装pnpm" class="headerlink" title="安装pnpm"></a>安装pnpm</h1><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 全局安装</span></span><br><span class="line">npm install -g pnpm</span><br><span class="line"><span class="comment"># 设置存储库</span></span><br><span class="line">pnpm config <span class="built_in">set</span> store-dir D:\Applications\nodejs\node_global\node_modules\pnpm\store-dir</span><br><span class="line">pnpm config <span class="built_in">set</span> state-dir D:\Applications\nodejs\node_global\node_modules\pnpm\state-dir</span><br><span class="line">pnpm config <span class="built_in">set</span> cache-dir D:\Applications\nodejs\node_global\node_modules\pnpm\cache-dir</span><br></pre></td></tr></table></figure>

<blockquote>
<p><a href="https://pnpm.io/zh/next/npmrc#store-dir">https://pnpm.io/zh/next/npmrc#store-dir</a></p>
<p><a href="https://pnpm.io/zh/next/npmrc#state-dir">https://pnpm.io/zh/next/npmrc#state-dir</a></p>
<p><a href="https://pnpm.io/zh/next/npmrc#cache-dir">https://pnpm.io/zh/next/npmrc#cache-dir</a></p>
</blockquote>
<h1 id="可能出现的报错"><a href="#可能出现的报错" class="headerlink" title="可能出现的报错"></a>可能出现的报错</h1><h2 id="错误描述"><a href="#错误描述" class="headerlink" title="错误描述"></a>错误描述</h2><figure class="highlight ada"><table><tr><td class="code"><pre><span class="line">yarn : 无法将“<span class="type">yarn</span>”项识别为 cmdlet、函数、脚本文件或可运行程序的名称。请检查名称的拼写，如果包括路径，请确保路径正确 ，然后再试一次。 所在位置 行:<span class="number">1</span> 字符: <span class="number">1</span></span><br><span class="line"></span><br><span class="line">+ yarn <span class="comment">--version</span></span><br><span class="line">+ ~~~~</span><br><span class="line">    + CategoryInfo          : <span class="type">ObjectNotFound</span>: (yarn:String) [], CommandNotFoundException</span><br><span class="line">    + FullyQualifiedErrorId : <span class="type">CommandNotFoundException</span></span><br></pre></td></tr></table></figure>

<h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><p>管理员身份运行 PowerShell</p>
<figure class="highlight dsconfig"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 设置RemoteSigned</span></span><br><span class="line"><span class="built_in">set-ExecutionPolicy</span> <span class="string">RemoteSigned</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>开发环境</category>
      </categories>
      <tags>
        <tag>npm</tag>
        <tag>yarn</tag>
      </tags>
  </entry>
  <entry>
    <title>Windows10配置OpenCV开发环境</title>
    <url>/2022/01/06/Windows10%E9%85%8D%E7%BD%AEOpenCV%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83/</url>
    <content><![CDATA[<meta name="referrer" content="no-referrer"/>


<span id="more"></span>

<h1 id="下载-OpenCV"><a href="#下载-OpenCV" class="headerlink" title="下载 OpenCV"></a>下载 OpenCV</h1><blockquote>
<p>OpenCV 官网: <a href="https://opencv.org/">https://opencv.org/</a></p>
</blockquote>
<blockquote>
<p>CMake 官网: <a href="https://cmake.org/">https://cmake.org/</a></p>
</blockquote>
<blockquote>
<p>MinGW-64: <a href="https://sourceforge.net/projects/mingw-w64/files/">https://sourceforge.net/projects/mingw-w64/files/</a></p>
</blockquote>
<p>编译思路：使用 cmake 将源码编译成 mingw 版本，在使用 mingw install 到本地，最后在 clion 中在 CMakeLists.txt 配置</p>
<p>以下是 MinGW 编译好的在 Windows 上编译的 OpenCV 的 32 位和 64 位版本，直接在 Clion 中使用即可</p>
<blockquote>
<p>OpenCV-MinGW-Build：<a href="https://github.com/huihut/OpenCV-MinGW-Build">https://github.com/huihut/OpenCV-MinGW-Build</a></p>
</blockquote>
<h1 id="Clion-配置-OpenCV"><a href="#Clion-配置-OpenCV" class="headerlink" title="Clion 配置 OpenCV"></a>Clion 配置 OpenCV</h1><ol>
<li>下载 OpenCV-MinGW-Build</li>
</ol>
<p><img src="https://files.mdnice.com/user/10819/c1a06861-89de-4820-bb57-7f2f4b2787f5.png"></p>
<ol start="2">
<li>添加至环境变量</li>
</ol>
<p>在系统环境变量 PATH 中加上刚才解压的 opencv 的目录</p>
<figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">D</span>:\Applications\OpenCV-MinGW-Build-OpenCV-<span class="number">4</span>.<span class="number">0</span>.<span class="number">0</span>-rc-x64\x64\mingw\bin</span><br></pre></td></tr></table></figure>

<ol start="3">
<li>CMakeLists.txt 内容如下</li>
</ol>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">cmake_minimum_required(VERSION 3.15)</span><br><span class="line"># 项目名称</span><br><span class="line">project(opencv_demo)</span><br><span class="line"></span><br><span class="line">set(CMAKE_CXX_STANDARD 14)</span><br><span class="line"></span><br><span class="line">add_executable(untitled2 main.cpp)</span><br><span class="line"># OpenCV-MinGW-Build</span><br><span class="line">set(OpenCV_DIR D:/Applications/OpenCV-MinGW-Build-OpenCV-4.0.0-rc-x64)</span><br><span class="line">FIND_PACKAGE(OpenCV REQUIRED)</span><br><span class="line"># 项目名称</span><br><span class="line">TARGET_LINK_LIBRARIES(opencv_demo $&#123;OpenCV_LIBS&#125;)</span><br></pre></td></tr></table></figure>

<ol start="4">
<li>测试程序</li>
</ol>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;opencv2/highgui/highgui.hpp&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;opencv2/opencv.hpp&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    cv::Mat srcImage=cv::<span class="built_in">imread</span>(<span class="string">&quot;D:\\CLionProjects\\untitled2\\1.png&quot;</span>);</span><br><span class="line">    <span class="built_in">imshow</span>(<span class="string">&quot;源图像&quot;</span>,srcImage);</span><br><span class="line">    cv::<span class="built_in">waitKey</span>(<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>开发环境</category>
      </categories>
      <tags>
        <tag>opencv</tag>
      </tags>
  </entry>
  <entry>
    <title>Windows10配置Go开发环境</title>
    <url>/2022/01/06/Windows10%E9%85%8D%E7%BD%AEGo%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83/</url>
    <content><![CDATA[<meta name="referrer" content="no-referrer"/>


<span id="more"></span>

<h1 id="下载-Golang"><a href="#下载-Golang" class="headerlink" title="下载 Golang"></a>下载 Golang</h1><blockquote>
<p>Golang 官网: <a href="https://go.dev/dl/">https://go.dev/dl/</a></p>
</blockquote>
<p>本文Go安装路径为<code>D:\Applications\Go</code></p>
<h2 id="相关文件路径说明"><a href="#相关文件路径说明" class="headerlink" title="相关文件路径说明"></a>相关文件路径说明</h2><ul>
<li><p><code>D:\Applications\Go</code>：Go安装路径</p>
</li>
<li><p><code>D:\GolandProjects</code>：存放项目</p>
</li>
<li><p><code>D:\gopath</code>：存放<code>go mod</code>下载的第三方依赖包，<code>windows</code>上默认路径<code>%USERPROFILE%\go</code>，<code>mac&amp;linux</code> 上默认路径<code>$HOME/go</code></p>
</li>
<li><p><code>D:\Applications\Go\go-build</code>：go build产生的缓存，这可以加快编译速度</p>
</li>
</ul>
<p>在命令行依次输入以下命令：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 始终开启go modules</span></span><br><span class="line">go <span class="built_in">env</span> -w GO111MODULE=on</span><br><span class="line"><span class="comment"># 设置七牛云镜像</span></span><br><span class="line">go <span class="built_in">env</span> -w GOPROXY=https://goproxy.cn,direct</span><br><span class="line"><span class="comment"># 设置gopath</span></span><br><span class="line">go <span class="built_in">env</span> -w GOPATH=D:\gopath</span><br><span class="line"><span class="comment"># 设置gocache</span></span><br><span class="line">go <span class="built_in">env</span> -w GOCACHE=D:\Applications\Go\go-build</span><br></pre></td></tr></table></figure>

<h2 id="添加环境变量"><a href="#添加环境变量" class="headerlink" title="添加环境变量"></a>添加环境变量</h2><figure class="highlight avrasm"><table><tr><td class="code"><pre><span class="line"><span class="symbol">D:</span>\Applications\Go\bin</span><br><span class="line"><span class="symbol">D:</span>\gopath\bin</span><br></pre></td></tr></table></figure>

<h1 id="下载-GoLand"><a href="#下载-GoLand" class="headerlink" title="下载 GoLand"></a>下载 GoLand</h1><blockquote>
<p>JetBrains GoLand: <a href="https://www.jetbrains.com/zh-cn/go/">https://www.jetbrains.com/zh-cn/go/</a></p>
</blockquote>
<h2 id="GoLand-设置国内镜像"><a href="#GoLand-设置国内镜像" class="headerlink" title="GoLand 设置国内镜像"></a>GoLand 设置国内镜像</h2><p><img src="https://files.mdnice.com/user/10819/ab436783-0538-4cad-bfb9-e9ee77542361.png"></p>
<p>常用镜像地址：</p>
<ol>
<li><p>七牛云：<a href="https://goproxy.cn/">https://goproxy.cn</a></p>
</li>
<li><p>阿里云：<a href="https://mirrors.aliyun.com/goproxy">https://mirrors.aliyun.com/goproxy</a></p>
</li>
</ol>
<h2 id="GoLand-设置GOPATH"><a href="#GoLand-设置GOPATH" class="headerlink" title="GoLand 设置GOPATH"></a>GoLand 设置<code>GOPATH</code></h2><p><img src="https://files.mdnice.com/user/10819/dc8dffa9-73e7-4b9f-96c5-720052710e27.png"></p>
<h1 id="go-mod"><a href="#go-mod" class="headerlink" title="go mod"></a>go mod</h1><p>使用<code>go mod</code>方式构建项目优点</p>
<ol>
<li>自动下载依赖包</li>
<li>项目不必放在 GOPATH/src 内了</li>
<li>项目内会生成一个 go.mod 文件，列出包依赖</li>
<li>所有的第三方包会准确的指定版本号</li>
<li>对于已经转移的包，可以用 replace 申明替换，不需要改代码</li>
</ol>
<h2 id="关键词解释"><a href="#关键词解释" class="headerlink" title="关键词解释"></a>关键词解释</h2><p>go.mod 可以写以下几个关键字：</p>
<ul>
<li><code>module</code>：定义模组路径</li>
<li><code>go</code>：定义 go 语言 version</li>
<li><code>require</code>：指定依赖的套件，预设是最新版，可以指定版本号</li>
<li><code>exclude</code>：排除该套件和其版本</li>
<li><code>replace</code>：使用不同的套件版本并替换原有的套件版本</li>
</ul>
<h2 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h2><ul>
<li><code>go mod download</code>：下载模块到本地缓存，缓存路径是 $GOPATH/pkg/mod/cache</li>
<li><code>go mod edit</code>：是提供了命令版编辑 go.mod 的功能，例如 go mod edit -fmt go.mod 会格式化 go.mod</li>
<li><code>go mod graph</code>：把模块之间的依赖图显示出来</li>
<li><code>go mod init</code>：初始化模块（例如把原本 dep 管理的依赖关系转换过来）</li>
<li><code>go mod tidy</code>：增加缺失的包，移除没用的包</li>
<li><code>go mod vendor</code>：把依赖拷贝到 vendor/ 目录下</li>
<li><code>go mod verify</code>：确认依赖关系</li>
<li><code>go mod why</code>：解释为什么需要包和模块</li>
</ul>
]]></content>
      <categories>
        <category>开发环境</category>
      </categories>
      <tags>
        <tag>golang</tag>
      </tags>
  </entry>
  <entry>
    <title>Windows10配置PHP开发环境</title>
    <url>/2022/01/06/Windows10%E9%85%8D%E7%BD%AEPHP%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83/</url>
    <content><![CDATA[<meta name="referrer" content="no-referrer"/>


<span id="more"></span>

<h1 id="下载-PHP"><a href="#下载-PHP" class="headerlink" title="下载 PHP"></a>下载 PHP</h1><blockquote>
<p>PHP 官网: <a href="https://windows.php.net/downloads/releases/archives/">https://windows.php.net/downloads/releases/archives/</a></p>
</blockquote>
<p>注意：下载的 PHP VC 版本不能比前面安装的 vc redist 版高。</p>
<p>进入 PHP 安装目录，复制<code>php.ini-development</code> 改名为 <code>php.ini</code> ，打开<code>php.ini</code>找到 <code>;extension_dir=ext</code>，去掉注释符，将值改为 <code>$&#123;PHP安装路径&#125;\ext</code>，内容如下</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">extension_dir = <span class="string">&quot;D:\Applications\php-7.2.34-Win32-VC15-x64\ext&quot;</span></span><br></pre></td></tr></table></figure>

<p>php 要使能 MySQL 的话还要在 <code>php.ini</code> 文件中取消如下两行的注释</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">extension=mysqli</span><br><span class="line">date.timezone = Asia/Shanghai</span><br></pre></td></tr></table></figure>

<h1 id="下载-PhpStorm"><a href="#下载-PhpStorm" class="headerlink" title="下载 PhpStorm"></a>下载 PhpStorm</h1><blockquote>
<p>JetBrains PhpStorm: <a href="https://www.jetbrains.com/zh-cn/phpstorm/">https://www.jetbrains.com/zh-cn/phpstorm/</a></p>
</blockquote>
<h1 id="配置-xdebug"><a href="#配置-xdebug" class="headerlink" title="配置 xdebug"></a>配置 xdebug</h1><blockquote>
<p>xdebug 官网: <a href="https://xdebug.org/download/historical">https://xdebug.org/download/historical</a></p>
</blockquote>
<blockquote>
<p>xdebug 官网描述: <a href="https://xdebug.org/docs/upgrade_guide#changed-xdebug.remote_enable">https://xdebug.org/docs/upgrade_guide#changed-xdebug.remote_enable</a></p>
</blockquote>
<p>编辑 <code>php.ini</code> ，在文件后追加以下内容：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[Xdebug]</span><br><span class="line">;指定Xdebug扩展文件的绝对路径</span><br><span class="line">zend_extension=<span class="string">&quot;D:\Applications\php-7.2.34-Win32-VC15-x64\ext\php_xdebug-3.0.0-7.2-vc15-x86_64.dll&quot;</span></span><br><span class="line"></span><br><span class="line">xdebug.mode=debug</span><br><span class="line">xdebug.client_host=127.0.0.1</span><br><span class="line">xdebug.client_port=9000</span><br><span class="line">xdebug.output_dir=<span class="string">&quot;D:\Applications\php-7.2.34-Win32-VC15-x64\xdebug&quot;</span></span><br></pre></td></tr></table></figure>

<p><img src="https://files.mdnice.com/user/10819/ddf44f79-24f9-40d1-9939-83a71dcdfd32.png"></p>
<p>注意：配置的端口（<code>xdebug.client_port</code>）要和 phpstorm 上面设置的端口一致</p>
<p><img src="https://files.mdnice.com/user/10819/2aa1fc17-6536-4aa2-adca-067052ecd934.png"></p>
<blockquote>
<p>xdebug 使用教程：<a href="https://www.bilibili.com/video/BV1Qx411f7pF?p=2">https://www.bilibili.com/video/BV1Qx411f7pF?p=2</a></p>
</blockquote>
<h1 id="下载-Nginx"><a href="#下载-Nginx" class="headerlink" title="下载 Nginx"></a>下载 Nginx</h1><blockquote>
<p>Nginx 官网: <a href="http://nginx.org/en/download.html">http://nginx.org/en/download.html</a></p>
</blockquote>
<h1 id="配置-Composer"><a href="#配置-Composer" class="headerlink" title="配置 Composer"></a>配置 Composer</h1><blockquote>
<p>Composer 国内官网: <a href="https://www.phpcomposer.com/">https://www.phpcomposer.com/</a>
下载<code>composer.phar</code>：<a href="https://install.phpcomposer.com/composer.phar">https://install.phpcomposer.com/composer.phar</a></p>
</blockquote>
<p>这里用的方式是用的<code>composer.phar</code>免安装的配置方式，当然你也可以去官网下载完整安装包，无脑下一步即可。</p>
<h2 id="Mac-或-Linux-系统"><a href="#Mac-或-Linux-系统" class="headerlink" title="Mac 或 Linux 系统"></a>Mac 或 Linux 系统</h2><p>打开命令行窗口并执行如下命令将前面下载的 <code>composer.phar</code> 文件移动到 <code>/usr/local/bin/</code> 目录下</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo <span class="built_in">mv</span> composer.phar /usr/local/bin/composer</span><br></pre></td></tr></table></figure>

<h2 id="Windows-系统"><a href="#Windows-系统" class="headerlink" title="Windows 系统"></a>Windows 系统</h2><ol>
<li>找到并进入 PHP 的安装目录（和你在命令行中执行的 <code>php</code> 指令应该是同一套 PHP）。</li>
<li>将 <code>composer.phar</code> 复制到 PHP 的安装目录下面，也就是和 <code>php.exe</code> 在同一级目录。</li>
<li>在 PHP 安装目录下新建一个 <code>composer.bat</code> 文件，并将下列代码保存到此文件中。</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">@php <span class="string">&quot;%~dp0composer.phar&quot;</span> %*</span><br></pre></td></tr></table></figure>

<p>最后重新打开一个命令行窗口试一试执行 <code>composer --version</code> 看看是否正确输出版本号。</p>
<h2 id="可能出现的报错"><a href="#可能出现的报错" class="headerlink" title="可能出现的报错"></a>可能出现的报错</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[Composer\Exception\NoSslException]</span><br><span class="line">  The openssl extension is required <span class="keyword">for</span> SSL/TLS protection but is not available. If you can not <span class="built_in">enable</span> the openssl ex</span><br><span class="line">  tension, you can <span class="built_in">disable</span> this error, at your own risk, by setting the <span class="string">&#x27;disable-tls&#x27;</span> option to <span class="literal">true</span>.</span><br></pre></td></tr></table></figure>

<p><strong>解决方案</strong>:</p>
<ul>
<li>关闭 Composer 的 TLS 来修复，注意：<strong>它不安全</strong></li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">composer config -g -- disable-tls <span class="literal">true</span></span><br></pre></td></tr></table></figure>

<ul>
<li>开启 php.ini 中的 extension（推荐）</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">extension=openssl</span><br></pre></td></tr></table></figure>

<p>注意: 如果设置为 true，则将使用 HTTP 尝试所有 HTTPS URL，而不执行网络级加密。这是一个安全风险，不推荐。更好的方法是在 php.ini 中启用 php_openssl 和 openssl 扩展。</p>
<h2 id="修改-Composer-为国内镜像"><a href="#修改-Composer-为国内镜像" class="headerlink" title="修改 Composer 为国内镜像"></a>修改 Composer 为国内镜像</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 全局配置</span></span><br><span class="line">composer config -g repo.packagist composer https://mirrors.aliyun.com/composer/</span><br><span class="line"><span class="comment"># 取消配置</span></span><br><span class="line">composer config --<span class="built_in">unset</span> repos.packagist</span><br></pre></td></tr></table></figure>

<h2 id="修改-Composer-缓存路径"><a href="#修改-Composer-缓存路径" class="headerlink" title="修改 Composer 缓存路径"></a>修改 Composer 缓存路径</h2><p><code>[cache-dir]</code>是 Composer 的缓存目录，默认位置是<code>%USERPROFILE%/AppData/Local/Composer</code></p>
<p><code>[vendor-dir]</code>软件包的默认安装位置，默认位置是<code>%USERPROFILE%/vendor</code></p>
<p>在<code>php</code>安装目录下新建<code>Composer</code>文件夹，在<code>Composer</code>文件夹内再新建<code>cache-dir</code>，<code>vendor-dir</code>文件夹，输入以下命令</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">composer config -g cache-dir D:/Applications/php-7.2.34-Win32-VC15-x64/Composer/cache-dir</span><br><span class="line">composer config -g vendor-dir D:/Applications/php-7.2.34-Win32-VC15-x64/Composer/vendor-dir <span class="comment"># 不建议修改vendor-dir，指定工程中使用composer install也会安装到这个目录，原因未知</span></span><br></pre></td></tr></table></figure>

<h2 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 初始化composer.json文件</span></span><br><span class="line">composer init</span><br><span class="line"><span class="comment"># 列出所有可用的命令</span></span><br><span class="line">composer list</span><br><span class="line"><span class="comment"># 读取composer.json内容，解析依赖关系，安装依赖包到vendor目录下</span></span><br><span class="line">composer install</span><br><span class="line"><span class="comment"># 更新最新的依赖关系到compsoer.lock文件，解析最新的依赖关系并且写入composer.lock文件</span></span><br><span class="line">composer update</span><br><span class="line"><span class="comment"># 搜索包，packagename替换为你想查找的包名称</span></span><br><span class="line">composer search packagename</span><br><span class="line"><span class="comment"># 添加对packagename的依赖，packagename可修改为你想要的包名称</span></span><br><span class="line">composer require packagename</span><br><span class="line">composer show packagename</span><br><span class="line"><span class="comment"># 更新 composer.phar文件自身</span></span><br><span class="line">composer self-update</span><br><span class="line"><span class="comment"># 优化一下自动加载</span></span><br><span class="line">composer dump-autoload --optimize</span><br><span class="line"><span class="comment"># 选项查看帮助信息</span></span><br><span class="line">composer <span class="built_in">command</span> --<span class="built_in">help</span></span><br></pre></td></tr></table></figure>

<h2 id="可能出现的报错-1"><a href="#可能出现的报错-1" class="headerlink" title="可能出现的报错"></a>可能出现的报错</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Installing dependencies from lock file (including require-dev)</span><br><span class="line">Verifying lock file contents can be installed on current platform.</span><br><span class="line">Your lock file does not contain a compatible <span class="built_in">set</span> of packages. Please run composer update.</span><br><span class="line"></span><br><span class="line">  Problem 1</span><br><span class="line">    - league/flysystem is locked to version 1.1.9 and an update of this package was not requested.</span><br><span class="line">    - league/flysystem 1.1.9 requires ext-fileinfo * -&gt; it is missing from your system. Install or <span class="built_in">enable</span> PHP<span class="string">&#x27;s fileinfo extension.</span></span><br><span class="line"><span class="string">  Problem 2</span></span><br><span class="line"><span class="string">    - league/mime-type-detection is locked to version 1.11.0 and an update of this package was not requested.</span></span><br><span class="line"><span class="string">    - league/mime-type-detection 1.11.0 requires ext-fileinfo * -&gt; it is missing from your system. Install or enable PHP&#x27;</span>s fileinfo extension.</span><br><span class="line">  Problem 3</span><br><span class="line">    - league/flysystem 1.1.9 requires ext-fileinfo * -&gt; it is missing from your system. Install or <span class="built_in">enable</span> PHP<span class="string">&#x27;s fileinfo extension.</span></span><br><span class="line"><span class="string">    - laravel/framework v5.6.40 requires league/flysystem ^1.0.8 -&gt; satisfiable by league/flysystem[1.1.9].</span></span><br><span class="line"><span class="string">    - laravel/framework is locked to version v5.6.40 and an update of this package was not requested.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">To enable extensions, verify that they are enabled in your .ini files:</span></span><br><span class="line"><span class="string">    - D:\Applications\php-7.2.34-Win32-VC15-x64\php.ini</span></span><br><span class="line"><span class="string">You can also run `php --ini` in a terminal to see which files are used by PHP in CLI mode.</span></span><br><span class="line"><span class="string">Alternatively, you can run Composer with `--ignore-platform-req=ext-fileinfo` to temporarily ignore these required extensions.</span></span><br></pre></td></tr></table></figure>

<p><strong>解决方案</strong>:</p>
<ul>
<li>开启 php.ini 中的 extension</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">extension=fileinfo</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>开发环境</category>
      </categories>
      <tags>
        <tag>php</tag>
      </tags>
  </entry>
  <entry>
    <title>Windows10配置Python3开发环境</title>
    <url>/2022/01/06/Windows10%E9%85%8D%E7%BD%AEPython3%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83/</url>
    <content><![CDATA[<meta name="referrer" content="no-referrer"/>


<span id="more"></span>

<h1 id="下载Python3-7-9"><a href="#下载Python3-7-9" class="headerlink" title="下载Python3.7.9"></a>下载Python3.7.9</h1><p>常用的Python发行版有两个，一个是官网的Python（CPython），一个是Conda</p>
<ol>
<li>官网下载Python</li>
</ol>
<p>Python官网: <a href="https://www.python.org/ftp/python/">https://www.python.org/ftp/python/</a></p>
<ol start="2">
<li>下载Miniconda</li>
</ol>
<ul>
<li>Conda官网：<a href="https://repo.anaconda.com/miniconda/">https://repo.anaconda.com/miniconda/</a></li>
<li>国内镜像：<a href="https://repo.anaconda.com/miniconda/">https://repo.anaconda.com/miniconda/</a></li>
<li>清华镜像：<a href="https://mirrors.tuna.tsinghua.edu.cn/anaconda/miniconda/">https://mirrors.tuna.tsinghua.edu.cn/anaconda/miniconda/</a></li>
</ul>
<h1 id="配置conda"><a href="#配置conda" class="headerlink" title="配置conda"></a>配置conda</h1><h2 id="conda与anaconda、miniconda的区别"><a href="#conda与anaconda、miniconda的区别" class="headerlink" title="conda与anaconda、miniconda的区别"></a>conda与anaconda、miniconda的区别</h2><ul>
<li>Conda：一个包管理器。Anaconda是一个发行包，conda可以理解为一个工具，也是一个可执行命令，其核心功能是包管理与环境管理。包管理与pip的使用类似，环境管理则允许用户方便地安装不同版本的python并可以快速切换。</li>
<li>Anaconda：一个打包的集合器皿。里面预装好了conda、某个版本的python、众多packages、科学计算工具等等，所以也称为Python的一种发行版。</li>
<li>Miniconda：顾名思义，它只包含最基本的内容——python与conda，以及相关的必须依赖项，对于空间要求严格的用户，Miniconda是一种选择。</li>
</ul>
<h2 id="添加环境变量"><a href="#添加环境变量" class="headerlink" title="添加环境变量"></a>添加环境变量</h2><p>本文Miniconda安装位置为<code>D:\Applications\Miniconda3</code></p>
<figure class="highlight avrasm"><table><tr><td class="code"><pre><span class="line"><span class="symbol">D:</span>\Applications\Miniconda3</span><br><span class="line"><span class="symbol">D:</span>\Applications\Miniconda3\Scripts</span><br></pre></td></tr></table></figure>

<h2 id="设置国内镜像"><a href="#设置国内镜像" class="headerlink" title="设置国内镜像"></a>设置国内镜像</h2><blockquote>
<p>清华镜像：<a href="https://mirrors.tuna.tsinghua.edu.cn/help/anaconda/">https://mirrors.tuna.tsinghua.edu.cn/help/anaconda/</a></p>
</blockquote>
<p>通过以下命令在用户目录下创建<code>.condarc</code>文件：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">conda config --<span class="built_in">set</span> show_channel_urls <span class="built_in">yes</span></span><br></pre></td></tr></table></figure>

<p>编辑<code>.condarc</code>，文件内容如下：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">channels:</span><br><span class="line">  - defaults</span><br><span class="line">show_channel_urls: <span class="literal">true</span></span><br><span class="line">default_channels:</span><br><span class="line">  - https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/main</span><br><span class="line">  - https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/r</span><br><span class="line">  - https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/msys2</span><br><span class="line">custom_channels:</span><br><span class="line">  conda-forge: https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud</span><br><span class="line">  msys2: https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud</span><br><span class="line">  bioconda: https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud</span><br><span class="line">  menpo: https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud</span><br><span class="line">  pytorch: https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud</span><br><span class="line">  pytorch-lts: https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud</span><br><span class="line">  simpleitk: https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud</span><br></pre></td></tr></table></figure>

<h2 id="修改默认包安装位置"><a href="#修改默认包安装位置" class="headerlink" title="修改默认包安装位置"></a>修改默认包安装位置</h2><p>编辑<code>.condarc</code>，追加文件内容如下：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">envs_dirs:</span><br><span class="line">  - D:\Applications\Miniconda3\envs</span><br><span class="line">pkgs_dirs:</span><br><span class="line">  - D:\Applications\Miniconda3\pkgs</span><br></pre></td></tr></table></figure>

<h2 id="设置pip-cache目录"><a href="#设置pip-cache目录" class="headerlink" title="设置pip cache目录"></a>设置pip cache目录</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pip config <span class="built_in">set</span> global.cache-dir <span class="string">&quot;D:\Applications\Miniconda3\pip-cache&quot;</span></span><br></pre></td></tr></table></figure>

<h2 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h2><blockquote>
<p>官方API：<a href="https://conda.io/projects/conda/en/latest/index.html">https://conda.io/projects/conda/en/latest/index.html</a></p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 激活虚拟环境</span></span><br><span class="line">activate env_name</span><br><span class="line"><span class="comment"># 退出虚拟环境</span></span><br><span class="line">conda deactivate</span><br><span class="line"><span class="comment"># 创建虚拟环境</span></span><br><span class="line">conda create -n python37 python=3.7</span><br><span class="line"><span class="comment"># 列出虚拟环境</span></span><br><span class="line">conda <span class="built_in">env</span> list</span><br><span class="line"><span class="comment"># 卸载虚拟环境</span></span><br><span class="line">conda remove -n python37 --all</span><br><span class="line"><span class="comment"># 安装包</span></span><br><span class="line">conda install requests or pip install requests</span><br><span class="line"><span class="comment"># 卸载包</span></span><br><span class="line">conda remove requests or pip uninstall requests</span><br><span class="line"><span class="comment"># 查看环境包信息</span></span><br><span class="line">conda list</span><br></pre></td></tr></table></figure>

<h1 id="配置pip"><a href="#配置pip" class="headerlink" title="配置pip"></a>配置pip</h1><h2 id="设置国内镜像-1"><a href="#设置国内镜像-1" class="headerlink" title="设置国内镜像"></a>设置国内镜像</h2><ul>
<li>临时使用</li>
</ul>
<p>可以在使用 pip 的时候在后面加上<code>-i</code>参数，指定 pip 源</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">pip install xxx -i http:<span class="regexp">//mi</span>rrors.aliyun.com<span class="regexp">/pypi/</span>simple/</span><br></pre></td></tr></table></figure>

<ul>
<li>永久修改</li>
</ul>
<ol>
<li>Linux</li>
</ol>
<p>修改 <code>~/.pip/pip.conf</code> (没有就创建一个)，内容如下:</p>
<figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line">[<span class="keyword">global</span>]</span><br><span class="line"><span class="keyword">index</span>-url = http://mirrors.aliyun.com/pypi/simple/</span><br><span class="line">[install]</span><br><span class="line"><span class="keyword">trusted</span>-host = mirrors.aliyun.com</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>Windows</li>
</ol>
<p>在 user 目录中创建一个 pip 目录，如：<code>%USERPROFILE%\pip</code>，新建文件 pip.ini，内容如下:</p>
<figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line">[<span class="keyword">global</span>]</span><br><span class="line"><span class="keyword">index</span>-url = http://mirrors.aliyun.com/pypi/simple/</span><br><span class="line">[install]</span><br><span class="line"><span class="keyword">trusted</span>-host = mirrors.aliyun.com</span><br></pre></td></tr></table></figure>

<h2 id="修改默认包安装位置-1"><a href="#修改默认包安装位置-1" class="headerlink" title="修改默认包安装位置"></a>修改默认包安装位置</h2><p>以官网下载Python（CPython）为例，Python安装位置为<code>D:\Applications\Python</code>。</p>
<ol>
<li>安装目录解释</li>
</ol>
<p><img src="https://files.mdnice.com/user/10819/7b25f00c-3f11-4ba3-afea-3fd9410fa4aa.png"></p>
<p>Python 目录/文件的具体用途：</p>
<ul>
<li><strong>DLLs</strong> Python 自己使用的动态库</li>
<li><strong>Doc</strong> 自带的 Python 使用说明文档（如果上面安装时不选择，应该会没有，这个没具体试过）</li>
<li><strong>include</strong> 包含共享目录</li>
<li><strong>Lib</strong> 库文件，放自定义模块和包</li>
<li><strong>libs</strong> 编译生成的 Python 自己使用的静态库</li>
<li><strong>Scripts</strong> 各种包/模块对应的可执行程序。安装时如果选择了 pip。那么 pip 的可执行程序就在此！</li>
<li><strong>tcl</strong> 桌面编程包</li>
</ul>
<p>pip 包默认安装位置是<code>%USERPROFILE%\AppData\Roaming\Python\Python37\Lib\site-packages</code></p>
<ol start="2">
<li>修改配置文件</li>
</ol>
<p>命令行输入：<code>python -m site -help</code></p>
<p><img src="https://files.mdnice.com/user/10819/4d59f43f-712f-4575-85b1-574778034f09.png"></p>
<p>修改配置文件，配置文件位置为：<code>D:\Applications\Python\Python37\Lib\site.py</code></p>
<p><img src="https://files.mdnice.com/user/10819/c57196ee-bbcd-455e-81eb-fc5fa6c6cca0.png">
内容如下</p>
<figure class="highlight ini"><table><tr><td class="code"><pre><span class="line"><span class="attr">USER_SITE</span> = <span class="string">&#x27;D:\Applications\Python\Python37\Lib\site-packages&#x27;</span></span><br><span class="line"><span class="attr">USER_BASE</span> = <span class="string">&#x27;D:\Applications\Python\Python37\Scripts&#x27;</span></span><br></pre></td></tr></table></figure>

<h2 id="设置pip-cache目录-1"><a href="#设置pip-cache目录-1" class="headerlink" title="设置pip cache目录"></a>设置pip cache目录</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pip config <span class="built_in">set</span> global.cache-dir <span class="string">&quot;D:\Applications\Python\Python37\pip-cache&quot;</span></span><br></pre></td></tr></table></figure>

<h2 id="升级-pip"><a href="#升级-pip" class="headerlink" title="升级 pip"></a>升级 pip</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">python -m pip install --upgrade pip</span><br></pre></td></tr></table></figure>

<h1 id="配置PyQt5开发环境"><a href="#配置PyQt5开发环境" class="headerlink" title="配置PyQt5开发环境"></a>配置PyQt5开发环境</h1><h2 id="创建项目"><a href="#创建项目" class="headerlink" title="创建项目"></a>创建项目</h2><p>使用Conda创建一个项目，Python版本为3.7</p>
<p><img src="https://img-blog.csdnimg.cn/4304a0afc3f84ffba6d49a756bbf484c.png"></p>
<h2 id="安装pyqt5、pyqt5-tools"><a href="#安装pyqt5、pyqt5-tools" class="headerlink" title="安装pyqt5、pyqt5-tools"></a>安装pyqt5、pyqt5-tools</h2><p>Conda中没有pyqt5相关的包，所以我们使用pip安装pyqt5和pyqt5-tools</p>
<ol>
<li>安装pyqt5</li>
</ol>
<blockquote>
<p><a href="https://pypi.org/project/PyQt5/">https://pypi.org/project/PyQt5/</a></p>
</blockquote>
<p>这是开发PyQt5最主要的包。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">pip install PyQt5</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>pyqt5-tools</li>
</ol>
<blockquote>
<p><a href="https://pypi.org/project/pyqt5-tools/">https://pypi.org/project/pyqt5-tools/</a></p>
</blockquote>
<p>这个可以帮我我们快速开发，例如可以借助包里面的工具（designer），快速设计界面。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">pip install pyqt5-tools</span><br></pre></td></tr></table></figure>

<p><strong>如何配置designer？</strong></p>
<p>如下图所示配置designer.exe文件位置，例如<code>D:\Applications\Miniconda3\envs\pyqt5-demo\Lib\site-packages\qt5_applications\Qt\bin\designer.exe</code></p>
<p><img src="https://img-blog.csdnimg.cn/0e8ae49d617140c7aed27b00ca5f664c.png"></p>
<p><strong>如何使用？</strong></p>
<p><img src="https://img-blog.csdnimg.cn/6e69a900ff4f4ee6a4246315e4513757.png"></p>
<p>主界面如下：</p>
<p><img src="https://img-blog.csdnimg.cn/e1c89da35a6d4b3c9c7b9e9ee444b2f7.png"></p>
<h2 id="第一行代码"><a href="#第一行代码" class="headerlink" title="第一行代码"></a>第一行代码</h2><p>代码如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> PyQt5.QtWidgets <span class="keyword">import</span> QApplication, QWidget, QLabel</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">window</span>():</span><br><span class="line">    app = QApplication(sys.argv)</span><br><span class="line">    widget = QWidget()</span><br><span class="line"></span><br><span class="line">    text_label = QLabel(widget)</span><br><span class="line">    text_label.setText(<span class="string">&quot;Hello World!&quot;</span>)</span><br><span class="line">    text_label.move(<span class="number">110</span>, <span class="number">85</span>)</span><br><span class="line"></span><br><span class="line">    widget.setGeometry(<span class="number">50</span>, <span class="number">50</span>, <span class="number">320</span>, <span class="number">200</span>)</span><br><span class="line">    widget.setWindowTitle(<span class="string">&quot;PyQt5 Example&quot;</span>)</span><br><span class="line">    widget.show()</span><br><span class="line">    sys.exit(app.exec_())</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    window()</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>运行效果如下：</p>
<p><img src="https://img-blog.csdnimg.cn/b680e9543d0a40c9ae4054642724046e.png"></p>
]]></content>
      <categories>
        <category>开发环境</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>pip</tag>
        <tag>conda</tag>
      </tags>
  </entry>
  <entry>
    <title>配置Git的连接方式和代理</title>
    <url>/2022/01/06/%E9%85%8D%E7%BD%AEGit%E7%9A%84%E8%BF%9E%E6%8E%A5%E6%96%B9%E5%BC%8F%E5%92%8C%E4%BB%A3%E7%90%86/</url>
    <content><![CDATA[<meta name="referrer" content="no-referrer"/>


<span id="more"></span>

<h1 id="安装-Git"><a href="#安装-Git" class="headerlink" title="安装 Git"></a>安装 Git</h1><blockquote>
<p>Git 官网: <a href="https://git-scm.com/downloads">https://git-scm.com/downloads</a></p>
</blockquote>
<h1 id="Git-使用-SSH-方式连接-GitHub-Gitee"><a href="#Git-使用-SSH-方式连接-GitHub-Gitee" class="headerlink" title="Git 使用 SSH 方式连接 GitHub/Gitee"></a>Git 使用 SSH 方式连接 GitHub/Gitee</h1><h2 id="在本地生成-ssh-证书"><a href="#在本地生成-ssh-证书" class="headerlink" title="在本地生成 ssh 证书"></a>在本地生成 ssh 证书</h2><ol>
<li>在 Git 的命令行内输入以下命令</li>
</ol>
<figure class="highlight excel"><table><tr><td class="code"><pre><span class="line">ssh-keygen -<span class="built_in">t</span> rsa -C <span class="string">&quot;youremail@example.com&quot;</span></span><br></pre></td></tr></table></figure>

<p><img src="https://files.mdnice.com/user/10819/5a75c54a-e093-4068-aed3-840b7b6e8e3d.png"></p>
<p>回车之后会让你选择证书存放的路径，你可以自己选择路径也可以直接回车使用默认的文件路径，即<code>%USERPROFILE%\.ssh\</code>下。<strong>自定义文件路径的好处是可以自定义文件名并生成多个本地密钥供自己使用</strong>，
然后会让你输入密码，可不填直接回车两次</p>
<p><img src="https://files.mdnice.com/user/10819/6742d9ff-1f0e-4431-b11a-82f7f8dd4296.png"></p>
<p><img src="https://files.mdnice.com/user/10819/88bbb12d-acf1-436a-b570-290f962e006b.png"></p>
<ol start="2">
<li>在 GitHub 中设置公钥</li>
</ol>
<p>在<code>%USERPROFILE%\.ssh\</code>文件夹下会生成两个密钥文件，我们只需要复制<code>.pub</code>
结尾的文件内容添加到 GitHub 中即可。此时生成本地密钥的这台电脑就有访问当前 GitHub 账户下所有仓库 pull 和 push 的权限的权限，包括私有仓库（需要谨慎操作）</p>
<p><img src="https://files.mdnice.com/user/10819/be0b464e-56bd-4c3d-8cc2-18def9c27025.png"></p>
<p>你也可以单独为一个项目添加，这样拥有该密钥的电脑只有对该项目有 pull 和 push 的权限</p>
<p><img src="https://files.mdnice.com/user/10819/32da10b4-20c1-43ea-b499-f12d68377547.png"></p>
<p>需要注意的是拉起代码的时候需要使用 ssh 的方式，包括设置<code>remote</code>的时候</p>
<p><img src="https://files.mdnice.com/user/10819/879d6afc-9cc2-414e-8d81-bd426a60cb4f.png"></p>
<p>在 Gitee 中的设置也同理。</p>
<h2 id="测试连通性"><a href="#测试连通性" class="headerlink" title="测试连通性"></a>测试连通性</h2><p>输入以下命令，回车后输入 yes，看到 succcessfully 即代表成功</p>
<figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="comment"># GitHub</span></span><br><span class="line"><span class="attribute">gssh</span> -T git<span class="variable">@github</span>.com</span><br><span class="line"><span class="comment"># Gitee</span></span><br><span class="line">gssh -T git<span class="variable">@gitee</span>.com</span><br></pre></td></tr></table></figure>

<h1 id="设置-Git-的代理配置"><a href="#设置-Git-的代理配置" class="headerlink" title="设置 Git 的代理配置"></a>设置 Git 的代理配置</h1><p>国内得 Gitee 网速还好，pull push 一般都很快，但是 GitHub 连接就非常不稳定。网上有很多教程，很少有靠谱的，自己尝试了一番总结出来的。</p>
<h2 id="两种方式"><a href="#两种方式" class="headerlink" title="两种方式"></a>两种方式</h2><ol>
<li>http/https</li>
<li>ssh</li>
</ol>
<h2 id="两种方式得区别"><a href="#两种方式得区别" class="headerlink" title="两种方式得区别"></a>两种方式得区别</h2><ol>
<li>clone: 使用 ssh 方式时，需要配置个人的 ssh key，并将生成的 ssh 公钥配置到 GitHub 中。对于使用 https 方式来讲，就没有这些要求。</li>
<li>push: 在使用 ssh 方式时，是不需要验证用户名和密码，如果你在配置 ssh key 时设置了密码，则需要验证密码。而对于使用 https 方式来讲，每次 push 都需要验证用户名和密码。</li>
</ol>
<p>个人推荐使用 ssh 方式连接到 GitHub 安全系数会高一些，而且还可以管理多个 GitHub 账户。</p>
<h2 id="设置代理"><a href="#设置代理" class="headerlink" title="设置代理"></a>设置代理</h2><ol>
<li>http/https</li>
</ol>
<figure class="highlight tcl"><table><tr><td class="code"><pre><span class="line"><span class="comment"># HTTP 代理</span></span><br><span class="line">git config --<span class="keyword">global</span> <span class="keyword">http</span>.proxy <span class="keyword">http</span>://<span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">1080</span></span><br><span class="line">git config --<span class="keyword">global</span> https.proxy <span class="keyword">http</span>://<span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">1080</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Socks5 代理</span></span><br><span class="line">git config --<span class="keyword">global</span> <span class="keyword">http</span>.proxy socks5://<span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">1080</span></span><br><span class="line">git config --<span class="keyword">global</span> https.proxy socks5://<span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">1080</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 取消设置</span></span><br><span class="line">git config --<span class="keyword">global</span> --<span class="keyword">unset</span> <span class="keyword">http</span>.proxy</span><br><span class="line">git config --<span class="keyword">global</span> --<span class="keyword">unset</span> https.proxy</span><br></pre></td></tr></table></figure>

<p>注意这里的 <code>socks5</code> 仅仅是代理使用的协议，它依然是针对 http 设置的，所以仅对 http 协议的仓库有效。使用 <code>git@xxx</code> 这种 ssh 连接的不会使用代理。</p>
<p>也可以分域名设置代理：</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">git config --global http.https:<span class="regexp">//gi</span>thub.com.proxy http:<span class="regexp">//</span><span class="number">127.0</span>.<span class="number">0.1</span>:<span class="number">1080</span></span><br><span class="line">git config --global https.https:<span class="regexp">//gi</span>thub.com.proxy https:<span class="regexp">//</span><span class="number">127.0</span>.<span class="number">0.1</span>:<span class="number">1080</span></span><br></pre></td></tr></table></figure>

<ol start="2">
<li>SSH</li>
</ol>
<p>SSH 代理需要在密钥目录 (<code>~/.ssh</code>) (Windows 下是 <code>%USERPROFILE%\.ssh</code>) 新建一个 <code>config</code> 文件，没有后缀名。</p>
<p>Windows 环境下的设置：</p>
<figure class="highlight perl"><table><tr><td class="code"><pre><span class="line"> -S 为 socks, -H 为 HTTP</span><br><span class="line">ProxyCommand <span class="keyword">connect</span> -S <span class="number">127.0</span>.<span class="number">0</span>.<span class="number">1</span>:<span class="number">1080</span> %h %p</span><br></pre></td></tr></table></figure>

<p>如果找不到 connect 命令那么指定其绝对路径，一般在 git 安装目录下 <code>\mingw64\bin\connect.exe</code></p>
<p>也可以分域名代理：</p>
<p>Windows</p>
<figure class="highlight perl"><table><tr><td class="code"><pre><span class="line">Host github.com</span><br><span class="line">    ProxyCommand <span class="keyword">connect</span> -S <span class="number">127.0</span>.<span class="number">0</span>.<span class="number">1</span>:<span class="number">1080</span> %h %p</span><br></pre></td></tr></table></figure>

<p>Mac</p>
<figure class="highlight llvm"><table><tr><td class="code"><pre><span class="line">Host github.com</span><br><span class="line">    ProxyCommand nc -v -<span class="keyword">x</span> <span class="number">127.0</span>.<span class="number">0.1</span>:<span class="number">1080</span> <span class="variable">%h</span> <span class="variable">%p</span></span><br></pre></td></tr></table></figure>

<p>所有的前提是你要有一个代理，且看个人手段！</p>
]]></content>
      <categories>
        <category>开发环境</category>
      </categories>
      <tags>
        <tag>git</tag>
      </tags>
  </entry>
  <entry>
    <title>配置Maven和Gradle镜像</title>
    <url>/2022/01/06/%E9%85%8D%E7%BD%AEMaven%E5%92%8CGradle%E9%95%9C%E5%83%8F/</url>
    <content><![CDATA[<meta name="referrer" content="no-referrer"/>


<span id="more"></span>

<h1 id="配置Maven"><a href="#配置Maven" class="headerlink" title="配置Maven"></a>配置Maven</h1><h2 id="下载-Maven"><a href="#下载-Maven" class="headerlink" title="下载 Maven"></a>下载 Maven</h2><blockquote>
<p>Maven 官网: <a href="https://maven.apache.org/download.cgi">https://maven.apache.org/download.cgi</a></p>
</blockquote>
<h2 id="修改-Maven-为国内镜像"><a href="#修改-Maven-为国内镜像" class="headerlink" title="修改 Maven 为国内镜像"></a>修改 Maven 为国内镜像</h2><h3 id="针对所有项目修改中央仓库"><a href="#针对所有项目修改中央仓库" class="headerlink" title="针对所有项目修改中央仓库"></a>针对所有项目修改中央仓库</h3><p>右键项目选中 maven 选项，然后选择<code>open settings.xml</code>或者<code>create settings.xml</code>，在 <code>settings.xml</code> 下找到 <code>&lt;mirrors&gt;</code> 节点，并在节点下增加镜像配置，重启 IDE</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mirrors</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mirror</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">id</span>&gt;</span>alimaven<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">name</span>&gt;</span>aliyun maven<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">url</span>&gt;</span>http://maven.aliyun.com/nexus/content/groups/public/<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">mirrorOf</span>&gt;</span>central<span class="tag">&lt;/<span class="name">mirrorOf</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">mirror</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mirrors</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>id：唯一标识一个镜像</li>
<li>name：镜像名称</li>
<li>url：镜像地址</li>
<li>mirrorOf：代表一个镜像的替代位置，例如 central 就表示代替官方的中央仓库</li>
</ul>
<h3 id="分别给每个项目配置不同的中央仓库"><a href="#分别给每个项目配置不同的中央仓库" class="headerlink" title="分别给每个项目配置不同的中央仓库"></a>分别给每个项目配置不同的中央仓库</h3><p>Maven 可以针对每个项目配置不同的中央仓库，在项目 <code>pom.xml</code> <code>&lt;repositories&gt;</code> 节点下增加如下配置</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">repository</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">id</span>&gt;</span>alimaven<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>aliyun maven<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url</span>&gt;</span>https://maven.aliyun.com/repository/public<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">repository</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="配置本地仓库位置"><a href="#配置本地仓库位置" class="headerlink" title="配置本地仓库位置"></a>配置本地仓库位置</h2><p>在<code>settings.xml</code>节点下新建一下节点<code>localRepository</code>
idea 的 Maven 本地仓库是在用户文件夹下的<code>.m2</code>文件夹下，为了防止本地仓库太大，将仓库地址存放在项目同一磁盘下的<code>/workmaven/localRepository</code>文件夹内。</p>
<figure class="highlight arcade"><table><tr><td class="code"><pre><span class="line">&lt;localRepository&gt;<span class="regexp">/workmaven/</span>localRepository&lt;/localRepository&gt;</span><br></pre></td></tr></table></figure>

<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ol>
<li><a href="https://maven.aliyun.com/mvn/guide">阿里云云效 Maven</a></li>
</ol>
<h1 id="配置Gradle"><a href="#配置Gradle" class="headerlink" title="配置Gradle"></a>配置Gradle</h1><h2 id="下载-Gradle"><a href="#下载-Gradle" class="headerlink" title="下载 Gradle"></a>下载 Gradle</h2><blockquote>
<p>Gradle 官网: <a href="https://gradle.org/install">https://gradle.org/install</a></p>
</blockquote>
<h2 id="修改-Gradle-为国内镜像"><a href="#修改-Gradle-为国内镜像" class="headerlink" title="修改 Gradle 为国内镜像"></a>修改 Gradle 为国内镜像</h2><p>在<code>$&#123;USER_HOME&#125;/.gradle/</code>或者<code>$&#123;GRADLE_USER_HOME&#125;</code>下创建<code>init.gradle</code>文件，内容如下</p>
<figure class="highlight isbl"><table><tr><td class="code"><pre><span class="line"><span class="variable">allprojects</span> &#123;</span><br><span class="line">  <span class="variable">repositories</span> &#123;</span><br><span class="line">    <span class="variable">maven</span> &#123;</span><br><span class="line">      <span class="variable">url</span> <span class="string">&#x27;https://maven.aliyun.com/repository/public/&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="title">mavenLocal</span>()</span></span><br><span class="line">    <span class="function"><span class="title">mavenCentral</span>()</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="配置本地仓库位置-1"><a href="#配置本地仓库位置-1" class="headerlink" title="配置本地仓库位置"></a>配置本地仓库位置</h2><p>Gradle 默认存放 jar 路径:<code>%USERPROFILE%\.gradle\caches\</code></p>
<p>在环境变量中添加名为 <code>GRADLE_USER_HOME</code>，值为本地仓库位置的环境变量即可</p>
<h3 id="配置-M2-HOME"><a href="#配置-M2-HOME" class="headerlink" title="配置 M2_HOME"></a>配置 M2_HOME</h3><p><code>mavenLocal()</code>
时 Gradle 默认会按以下顺序去查找本地的 maven
仓库：<code>$&#123;USER_HOME&#125;/.m2/settings.xml</code> &gt; <code>$&#123;M2_HOME&#125;/conf/settings.xml</code> &gt; <code>$&#123;USER_HOME&#125;/.m2/repository</code></p>
]]></content>
      <categories>
        <category>开发环境</category>
      </categories>
      <tags>
        <tag>java</tag>
        <tag>maven</tag>
        <tag>gradle</tag>
      </tags>
  </entry>
  <entry>
    <title>Vite对比VueCLI</title>
    <url>/2022/01/06/Vite%E5%AF%B9%E6%AF%94VueCLI/</url>
    <content><![CDATA[<meta name="referrer" content="no-referrer"/>


<span id="more"></span>

<h1 id="开发服务器架构对比"><a href="#开发服务器架构对比" class="headerlink" title="开发服务器架构对比"></a>开发服务器架构对比</h1><p>与Vue CLI类似，Vite也是一个提供基本项目脚手架和开发服务器的构建工具。
然而，Vite并不是基于Webpack的，它有自己的开发服务器，利用浏览器中的原生ES模块。这种架构使得Vite比Webpack的开发服务器快了好几个数量级。Vite采用Rollup进行构建，速度也更快。</p>
<h2 id="Vite开发服务器架构"><a href="#Vite开发服务器架构" class="headerlink" title="Vite开发服务器架构"></a>Vite开发服务器架构</h2><p>Vite不捆绑应用服务器端。相反，它依赖于浏览器对JavaScript模块的原生支持（也就是ES模块，是一个比较新的功能）。
浏览器将在需要时通过HTTP请求任何JS模块，并在运行时进行处理。Vite开发服务器将按需转换任何文件（如Sass、TypeScript、SFC）。
这种架构避免了服务器端对整个应用的捆绑，并利用浏览器高效的模块处理，提供了一个明显更快的开发服务器。</p>
<h2 id="Webpack开发服务器架构"><a href="#Webpack开发服务器架构" class="headerlink" title="Webpack开发服务器架构"></a>Webpack开发服务器架构</h2><p>Webpack的工作方式是，它通过解析应用程序中的每一个 import 和 require ，将整个应用程序构建成一个基于JavaScript的捆绑包，并在运行时转换文件（例如Sass、TypeScript、SFC）。
这都是在服务器端完成的，依赖的数量和改变后构建/重新构建的时间之间有一个大致的线性关系。</p>
<blockquote>
<p>提示：当你对应用程序进行code-split和tree-shake动时，Vite的速度会更快，因为它只加载它需要的模块，即使是在开发阶段。这与Webpack不同，在Webpack中，代码拆分只对生产包有利。</p>
</blockquote>
<h1 id="创建Vue3工程"><a href="#创建Vue3工程" class="headerlink" title="创建Vue3工程"></a>创建Vue3工程</h1><p>本文使用的是yarn作为包管理器</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 全局安装yarn包管理器</span></span><br><span class="line">npm install -g @yarn</span><br></pre></td></tr></table></figure>

<h1 id="Vite"><a href="#Vite" class="headerlink" title="Vite"></a>Vite</h1><blockquote>
<p>Vite官网：<a href="https://cn.vitejs.dev/guide/">https://cn.vitejs.dev/guide/</a></p>
</blockquote>
<p>命令行输入以下命令:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 创建Vue3+TS工程</span></span><br><span class="line">yarn create vite my-vue-app --template vue-ts</span><br><span class="line"><span class="comment"># 安装Vue Router 4: https://next.router.vuejs.org/zh/introduction.html</span></span><br><span class="line">yarn add vue-router@4 -S</span><br><span class="line"><span class="comment"># 安装Vuex 4: https://next.vuex.vuejs.org/zh/index.html</span></span><br><span class="line">yarn add vuex@next -S</span><br><span class="line"><span class="comment"># 安装Element Plus: https://element-plus.org/zh-CN/guide/design.html</span></span><br><span class="line">yarn add element-plus -S</span><br><span class="line"><span class="comment"># 运行</span></span><br><span class="line">yarn run dev</span><br></pre></td></tr></table></figure>

<h1 id="Vue-CLI"><a href="#Vue-CLI" class="headerlink" title="Vue CLI"></a>Vue CLI</h1><blockquote>
<p>Vue CLI官网: <a href="https://cli.vuejs.org/zh/">https://cli.vuejs.org/zh/</a></p>
</blockquote>
<p>Vue CLI创建工程前需要全局安装的模块</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Vue CLI脚手架</span></span><br><span class="line">npm install -g @vue/cli</span><br><span class="line"><span class="comment"># 用于Vue编译,防止报错</span></span><br><span class="line">npm install -g vue-template-compiler</span><br></pre></td></tr></table></figure>

<p>命令行输入以下命令:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 创建Vue3+TS工程</span></span><br><span class="line">vue create vue3-ts</span><br><span class="line"><span class="comment"># 运行</span></span><br><span class="line">yarn serve</span><br></pre></td></tr></table></figure>

<p>搭建过程中的相关设置,可根据自己的实际情况设置</p>
<p><img src="https://img-blog.csdnimg.cn/img_convert/82fe278dc484ec6685fd7c4401573f7f.png" alt="配置"></p>
<ul>
<li>Manually select features // 手动选择</li>
<li>Check the features needed for your project: // 选择我们所需的选项来生成项目，上下箭头选择，使用空格键选中，回车确认</li>
<li>Choose a version of Vue.js that you want to start the project with // 选择 Vue 版本</li>
<li>Use class-style component syntax? (Y/n) // 是否使用 Class（类）风格装饰器, 即通过 export default class Home extends Vue{} 创建 Vue 实例</li>
<li>Use Babel alongside TypeScript (required for modern mode, auto-detected polyfills, transpiling JSX)? (Y/n) // 使用 Babel
做转义, 与 TypeScript 一起用于自动检测</li>
<li>Use history mode for router? // 路由模式, 是否选择 history 模式</li>
<li>Pick a CSS pre-processor? // 选择一种 css 预处理器</li>
<li>Pick a linter / formatter config? // 选择一种代码格式化检测工具</li>
<li>Pick additional lint features? // 代码检查方式: 保存时检查 or 提交时检查</li>
<li>Where do you prefer placing config for Babel, PostCSS, ESLint, etc.? // Babel, PostCSS, ESLin 等配置文件怎么存放,
是放到单独的配置文件中?还是 package.json 里?</li>
<li>Save this as a preset for future projects? // 是否需要保存当前配置，在以后的项目中可快速构建?</li>
<li>Pick the package manager to use when installing dependencies: // 选择包管理器</li>
</ul>
]]></content>
      <categories>
        <category>Web开发</category>
      </categories>
      <tags>
        <tag>vue.js</tag>
      </tags>
  </entry>
  <entry>
    <title>Windows10配置GraalVM开发环境</title>
    <url>/2022/01/06/Windows10%E9%85%8D%E7%BD%AEGraalVM%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83/</url>
    <content><![CDATA[<meta name="referrer" content="no-referrer"/>


<span id="more"></span>

<h1 id="下载相关文件"><a href="#下载相关文件" class="headerlink" title="下载相关文件"></a>下载相关文件</h1><blockquote>
<p><a href="https://www.graalvm.org/downloads/">GraalVM</a></p>
</blockquote>
<blockquote>
<p><a href="https://visualstudio.microsoft.com/zh-hans/downloads/">Visual Studio 2017或以上版本</a> 主要用到的是内置的Windows SDK和MSVC</p>
</blockquote>
<h1 id="配置环境变量"><a href="#配置环境变量" class="headerlink" title="配置环境变量"></a>配置环境变量</h1><ol>
<li><p>添加GraalVM <code>bin</code> 至环境变量</p>
</li>
<li><p>添加MSVC的<code>bin</code> <code>lib</code> <code>include</code>至环境变量</p>
</li>
<li><p>添加Windows SDK的<code>lib</code> <code>include</code>至环境变量</p>
</li>
</ol>
<p><strong>注意:</strong> GraalVM <code>bin</code>和MSVC <code>bin</code>直接添加至系统变量的<code>path</code>变量即可;在系统变量中添加<code>LIB</code> <code>INCLUDE</code>，并将相关的<code>lib</code> <code>include</code>路径添加至其中即可。</p>
<h1 id="编译文件"><a href="#编译文件" class="headerlink" title="编译文件"></a>编译文件</h1><p><a href="https://github.com/graalvm/graalvm-ce-builds/releases/download/vm-19.3.6/native-image-installable-svm-java8-linux-amd64-19.3.6.jar">native-image 离线版下载地址</a></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 安装native-image</span></span><br><span class="line">gu -L install [native-image离线jar包的全路径]</span><br><span class="line"><span class="comment"># 查看安装列表</span></span><br><span class="line">gu list</span><br><span class="line"><span class="comment"># 编译.class文件</span></span><br><span class="line">native-image xxx.class</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>开发环境</category>
      </categories>
      <tags>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title>Java中锁的分类和原理</title>
    <url>/2021/12/30/Java%E4%B8%AD%E9%94%81%E7%9A%84%E5%88%86%E7%B1%BB%E5%92%8C%E5%8E%9F%E7%90%86/</url>
    <content><![CDATA[<meta name="referrer" content="no-referrer"/>


<span id="more"></span>
<p>并发编程是Java的灵魂，不可避免的会遇到锁的问题。本文整理了一下Java中个别锁实现，例如synchronized、volatile、ReentrantLock。以下是Java中锁的总体分类:</p>
<p><img src="https://img-blog.csdnimg.cn/d5fce886299143b4bca4a76242f65a51.png" alt="分类"></p>
<h1 id="synchronized"><a href="#synchronized" class="headerlink" title="synchronized"></a>synchronized</h1><p>Java中每个对象都可以作为锁，具体表现为以下三个形式</p>
<ol>
<li>对于普通的同步方法，锁是当前实例对象</li>
<li>对于静态同步方法，所示当前类的Class对象</li>
<li>对于同步方法块，锁是Synchronized括号里配置的对象</li>
</ol>
<p>举例：双重校验锁实现对象单例（线程安全）</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Singleton</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">volatile</span> <span class="keyword">static</span> Singleton uniqueInstance;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">Singleton</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title function_">getUniqueInstance</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">//先判断对象是否已经实例过，没有实例化过才进入加锁代码</span></span><br><span class="line">        <span class="keyword">if</span> (uniqueInstance == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="comment">//类对象加锁</span></span><br><span class="line">            <span class="keyword">synchronized</span> (Singleton.class) &#123;</span><br><span class="line">                <span class="keyword">if</span> (uniqueInstance == <span class="literal">null</span>) &#123;</span><br><span class="line">                    uniqueInstance = <span class="keyword">new</span> <span class="title class_">Singleton</span>();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> uniqueInstance;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>Notes：构造方法不能使用 synchronized 关键字修饰，因为构造方法本身就属于线程安全的。</p>
<h2 id="实现原理"><a href="#实现原理" class="headerlink" title="实现原理"></a>实现原理</h2><p>JVM基于进入和退出Monitor对象来实现方法同步和代码块同步，两者实现细节不一样。代码块的同步是用<code>monitorenter</code>和<code>monitorexit</code>指令实现的。<code>monitorenter</code>
指令是在编译后插入到同步代码块的开始位置，而<code>monitorexit</code>是插入到方法结束处或者异常处，JVM要保证每个<code>monitorenter</code>必须有对应的<code>monitorexit</code>
与之配对。任何对象都有一个monitor与之关联，当且一个monitor被持有后，它处于锁定状态。线程执行到<code>monitorenter</code>指令时，将会尝试获取对象的monitor的所有权，即尝试获得对象的锁。</p>
<p>通过 JDK 自带的 javap 命令查看类的相关字节码信息，可以直接看到synchronized的情况</p>
<p><img src="https://img-blog.csdnimg.cn/6f3d1ee0b623497fb11726582b31ef25.png" alt="字节码"></p>
<h2 id="锁升级"><a href="#锁升级" class="headerlink" title="锁升级"></a>锁升级</h2><p>Java SE 1.6的时候为了减少获得锁和释放锁带来的性能消耗，引入了“偏向锁”和“轻量级锁”，在Java SE 1.6中，锁一共有4种状态，级别从低到高依次是:
无锁状态，偏向锁状态，轻量级锁状态，重量级锁状态。为了提高效率，锁只可以升级不可以降级。</p>
<p>以下是锁升级的过程：</p>
<p><img src="https://img-blog.csdnimg.cn/0abfc45b8e8048e9be2ba66dbec4642d.jpg" alt="锁升级"></p>
<p>偏向锁:</p>
<p>当一个线程访问同步块并获取锁时，会在对象头和栈帧中的锁记录里存储锁偏向的线程ID，以后该线程在进入和退出同步块时不需要进行CAS操作来加锁和解锁，只需要简单的测试一下对象头的Mark
Word里是否存储着指向当前线程的偏向锁。如果测试成功，表示线程已经获得了锁，如果测试失败，则需要再测试一下Mark
Word中偏向锁的标识是否设置成1（表示当前是偏向锁）：如果没有设置，则使用CAS竞争锁，如果设置了，则尝试使用CAS将对象头的偏向锁指向当前线程。</p>
<h1 id="volatile"><a href="#volatile" class="headerlink" title="volatile"></a>volatile</h1><h2 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h2><p>volatile是轻量级的synchronized，它在多处理器开发中保证了共享变量的“可见性”。可见性的意思是当一个线程修改一个共享变量时，另一个线程能够读到这个修改的值。它不会引起线程的上下文切换和调度。</p>
<h2 id="如何保证可见性？"><a href="#如何保证可见性？" class="headerlink" title="如何保证可见性？"></a>如何保证可见性？</h2><p>以在X86处理器生成的汇编指令来查看对volatile写操作的过程。</p>
<p>Java代码如下</p>
<figure class="highlight abnf"><table><tr><td class="code"><pre><span class="line"><span class="attribute">instance</span> <span class="operator">=</span> new Singleton()<span class="comment">; // instance是volatile变量</span></span><br></pre></td></tr></table></figure>

<p>转换为汇编代码如下</p>
<figure class="highlight mel"><table><tr><td class="code"><pre><span class="line"><span class="number">0x01a3de1d</span>: movb $0x0,<span class="number">0x1104800</span>(%esi)</span><br><span class="line"><span class="number">0x01a3de24</span>: lock add1 $0x0,(%esp)</span><br></pre></td></tr></table></figure>

<p>有volatile变量修饰的共享变量进行写操作的时候会出现第二行代码，Lock前缀的指令在多核处理器下会发生两件事情</p>
<ol>
<li>将当前处理器缓存行的数据写回到系统内存。</li>
<li>写回到系统内存的操作会使其他CPU里缓存了该内存地址的数据无效。</li>
</ol>
<p>为了提高处理速度，处理器不直接和系统内存进行通信，而是将系统内存读到内部缓存后在进行操作，但操作完不知道何时会写到系统内存。如果声明了volatile的变量进行写操作，JVM就会向处理器发送一条Lock前缀的指令，将这个变量所在的缓存行的数据写回到系统内存。在多处理器下，为了保证各个处理器的缓存是一致的，就会实现缓存一致性协议，每个处理器通过嗅探在总线上传播的数据来检查自己缓存的值是不是过期了，当处理器发现自己缓存行对应的内存地址被修改，就会将当前处理器的缓存行设置成无效状态，当处理器对这个数据操作的时候，会重新从系统内存中把数据读取到处理器的缓存中。</p>
<h1 id="ReentrantLock"><a href="#ReentrantLock" class="headerlink" title="ReentrantLock"></a>ReentrantLock</h1><p>synchronized关键字用于加锁，但这种锁一是很重，二是获取时必须一直等待，没有额外的尝试机制。 <code>java.util.concurrent.locks</code>包提供的ReentrantLock用于替代synchronized加锁。</p>
<h2 id="公平锁和非公平锁"><a href="#公平锁和非公平锁" class="headerlink" title="公平锁和非公平锁"></a>公平锁和非公平锁</h2><ol>
<li><p>公平锁</p>
<p>多个线程按照申请锁的顺序去获得锁，线程会直接进入队列去排队，永远都是队列的第一位才能得到锁。</p>
<p>优点：所有的线程都能得到资源，不会饿死在队列中。</p>
<p>缺点：吞吐量会下降很多，队列里面除了第一个线程，其他的线程都会阻塞，cpu唤醒阻塞线程的开销会很大。</p>
</li>
<li><p>非公平锁</p>
<p>多个线程去获取锁的时候，会直接去尝试获取，获取不到，再去进入等待队列，如果能获取到，就直接获取到锁。</p>
<p>优点：可以减少CPU唤醒线程的开销，整体的吞吐效率会高点，CPU也不必去唤醒所有线程，会减少唤起线程的数量。</p>
<p>缺点：你们可能也发现了，这样可能导致队列中间的线程一直获取不到锁或者长时间获取不到锁，导致饿死。</p>
</li>
</ol>
<p>Notes: ReentrantLock默认使用非公平锁，也可以通过构造器来显示的指定使用公平锁。</p>
<h2 id="可重入锁"><a href="#可重入锁" class="headerlink" title="可重入锁"></a>可重入锁</h2><p>可重入锁又名递归锁，是指在同一个线程在外层方法获取锁的时候，再进入该线程的内层方法会自动获取锁（前提锁对象得是同一个对象或者class），不会因为之前已经获取过还没释放而阻塞。Java中<code>ReentrantLock</code>
和<code>synchronized</code>都是可重入锁，可重入锁的一个优点是可一定程度避免死锁。</p>
<h2 id="ReentrantLock和synchronized对比"><a href="#ReentrantLock和synchronized对比" class="headerlink" title="ReentrantLock和synchronized对比"></a>ReentrantLock和synchronized对比</h2><table>
<thead>
<tr>
<th></th>
<th>ReentrantLock</th>
<th>synchronized</th>
</tr>
</thead>
<tbody><tr>
<td>锁实现机制</td>
<td>依赖AQS</td>
<td>监听器模式</td>
</tr>
<tr>
<td>灵活性</td>
<td>支持响应中断、超时、尝试获取锁</td>
<td>不灵活</td>
</tr>
<tr>
<td>释放形式</td>
<td>必须显示调用unlock()释放锁</td>
<td>自动释放监听器</td>
</tr>
<tr>
<td>锁类型</td>
<td>公平锁&amp;非公平锁</td>
<td>非公平锁</td>
</tr>
<tr>
<td>条件队列</td>
<td>可关联多个条件队列</td>
<td>关联一个条件队列</td>
</tr>
<tr>
<td>可重入性</td>
<td>可重入</td>
<td>可重入</td>
</tr>
</tbody></table>
<h2 id="使用注意"><a href="#使用注意" class="headerlink" title="使用注意"></a>使用注意</h2><ol>
<li><p>lock 必须在 finally 块中释放，否则如果受保护的代码将抛出异常，锁就有可能永远得不到释放。</p>
</li>
<li><p>当 JVM 用 synchronized 管理锁定请求和释放时，JVM 在生成线程转储时能够包括锁定信息。这些对调试非常有价值，因为它们能标识死锁或者其他异常行为的来源。 Lock 类只是普通的类，JVM 不知道具体哪个线程拥有
Lock 对象。</p>
</li>
</ol>
]]></content>
      <categories>
        <category>编程语言</category>
      </categories>
      <tags>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title>Java线程池的使用</title>
    <url>/2021/12/30/Java%E7%BA%BF%E7%A8%8B%E6%B1%A0%E7%9A%84%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<meta name="referrer" content="no-referrer"/>


<span id="more"></span>

<h1 id="Java中创建线程池的方式一般有两种"><a href="#Java中创建线程池的方式一般有两种" class="headerlink" title="Java中创建线程池的方式一般有两种"></a>Java中创建线程池的方式一般有两种</h1><ol>
<li>通过<code>Executors</code>工厂方法创建</li>
<li>通过<code>ThreadPoolExecutor</code>自定义创建(推荐，可以指定线程池大小)</li>
</ol>
<p>线程池不允许使用Executors去创建，而是通过ThreadPoolExecutor的方式的原因（阿里巴巴Java开发手册）：
<img src="https://files.mdnice.com/user/10819/acde9b98-75a4-48ba-9fa2-fbd99f4753f5.png"></p>
<h1 id="Executors工厂方法创建线程池"><a href="#Executors工厂方法创建线程池" class="headerlink" title="Executors工厂方法创建线程池"></a>Executors工厂方法创建线程池</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.concurrent.ExecutorService;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.Executors;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.ScheduledExecutorService;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.TimeUnit;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestThreadPoolExecutor</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">// 1. 创建使用单个线程的线程池</span></span><br><span class="line">        <span class="type">ExecutorService</span> <span class="variable">es1</span> <span class="operator">=</span> Executors.newSingleThreadExecutor();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">            es1.submit(() -&gt; System.out.println(Thread.currentThread().getName() + <span class="string">&quot;正在执行任务&quot;</span>));</span><br><span class="line">        &#125;</span><br><span class="line">        es1.shutdown(); <span class="comment">// 线程池不再接收新的线程，并执行完已经提交的线程，最后关闭线程池</span></span><br><span class="line">        <span class="keyword">while</span> (!es1.isTerminated()) &#123; <span class="comment">// 等待线程执行结束,你也可以使用&quot;executor.awaitTermination();&quot;来等待</span></span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;es1 Finished&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 2.创建使用固定线程数的线程池</span></span><br><span class="line">        <span class="type">ExecutorService</span> <span class="variable">es2</span> <span class="operator">=</span> Executors.newFixedThreadPool(<span class="number">3</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">            es2.submit(() -&gt; System.out.println(Thread.currentThread().getName() + <span class="string">&quot;正在执行任务&quot;</span>));</span><br><span class="line">        &#125;</span><br><span class="line">        es2.shutdown();</span><br><span class="line">        <span class="keyword">while</span> (!es2.isTerminated()) &#123;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;es2 Finished&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 3. 创建一个会根据需要创建新线程的线程池</span></span><br><span class="line">        <span class="type">ExecutorService</span> <span class="variable">es3</span> <span class="operator">=</span> Executors.newCachedThreadPool();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">20</span>; i++) &#123;</span><br><span class="line">            es3.submit(() -&gt; System.out.println(Thread.currentThread().getName() + <span class="string">&quot;正在执行任务&quot;</span>));</span><br><span class="line">        &#125;</span><br><span class="line">        es3.shutdown();</span><br><span class="line">        <span class="keyword">while</span> (!es3.isTerminated()) &#123;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;es3 Finished&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 4. 创建拥有固定线程数量的定时线程任务的线程池</span></span><br><span class="line">        <span class="type">ScheduledExecutorService</span> <span class="variable">es4</span> <span class="operator">=</span> Executors.newScheduledThreadPool(<span class="number">2</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;时间：&quot;</span> + System.currentTimeMillis());</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">            es4.schedule(() -&gt; System.out.println(<span class="string">&quot;时间：&quot;</span> + System.currentTimeMillis() + <span class="string">&quot;--&quot;</span> + Thread.currentThread().getName() + <span class="string">&quot;正在执行任务&quot;</span>), <span class="number">3</span>, TimeUnit.SECONDS);</span><br><span class="line">        &#125;</span><br><span class="line">        es4.shutdown();</span><br><span class="line">        <span class="keyword">while</span> (!es4.isTerminated()) &#123;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;es4 Finished&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 5. 创建只有一个线程的定时线程任务的线程池</span></span><br><span class="line">        <span class="type">ScheduledExecutorService</span> <span class="variable">es5</span> <span class="operator">=</span> Executors.newSingleThreadScheduledExecutor();</span><br><span class="line">        System.out.println(<span class="string">&quot;时间：&quot;</span> + System.currentTimeMillis());</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">            es5.schedule(() -&gt; System.out.println(<span class="string">&quot;时间：&quot;</span> + System.currentTimeMillis() + <span class="string">&quot;--&quot;</span> + Thread.currentThread().getName() + <span class="string">&quot;正在执行任务&quot;</span>), <span class="number">3</span>, TimeUnit.SECONDS);</span><br><span class="line">        &#125;</span><br><span class="line">        es5.shutdown();</span><br><span class="line">        <span class="keyword">while</span> (!es5.isTerminated()) &#123;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;es5 Finished&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="ThreadPoolExecutor自定义方式创建线程池"><a href="#ThreadPoolExecutor自定义方式创建线程池" class="headerlink" title="ThreadPoolExecutor自定义方式创建线程池"></a>ThreadPoolExecutor自定义方式创建线程池</h1><h2 id="生命周期"><a href="#生命周期" class="headerlink" title="生命周期"></a>生命周期</h2><p>运行状态：</p>
<table>
<thead>
<tr>
<th>状态</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>RUNNING</td>
<td>能够接受新提交的任务，并且也能处理阻塞队列里面的任务</td>
</tr>
<tr>
<td>SHUTDOWN</td>
<td>关闭状态，不在接受新提交的任务，但是可以处理阻塞队列里面已保存的任务</td>
</tr>
<tr>
<td>STOP</td>
<td>不在接受新的任务，也不处理阻塞队列里面的任务，会终端正在处理任务的线程</td>
</tr>
<tr>
<td>TIDYING</td>
<td>所有任务都已终止，有效线程数(workerCount)为0当线程池变为TIDYING状态时，会执行钩子函数terminated()</td>
</tr>
<tr>
<td>TERMINATED</td>
<td>在terminated()方法进入这个状态</td>
</tr>
</tbody></table>
<p>生命周期：</p>
<p><img src="https://files.mdnice.com/user/10819/6f409b5d-8fd4-4719-9a1c-1b7fd9f7ae51.png"></p>
<h2 id="重要参数"><a href="#重要参数" class="headerlink" title="重要参数"></a>重要参数</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">public ThreadPoolExecutor(int corePoolSize, int maximumPoolSize,long keepAliveTime,TimeUnit unit,BlockingQueue workQueue,ThreadFactory threadFactory,RejectedExecutionHandler handler) ;</span><br></pre></td></tr></table></figure>

<ol>
<li><code>corePoolSize</code>
：核心池的大小，这个参数跟后面讲述的线程池的实现原理有非常大的关系。在创建了线程池后，默认情况下，线程池中并没有任何线程，而是等待有任务到来才创建线程去执行任务，除非调用了<code>prestartAllCoreThreads()</code>
或者<code>prestartCoreThread()</code>方法，从这2个方法的名字就可以看出，是预创建线程的意思，即在没有任务到来之前就创建<code>corePoolSize</code>
个线程或者一个线程。默认情况下，在创建了线程池后，线程池中的线程数为0，当有任务来之后，就会创建一个线程去执行任务，当线程池中的线程数目达到<code>corePoolSize</code>后，就会把到达的任务放到缓存队列当中；</li>
<li><code>maximumPoolSize</code>：线程池最大线程数，这个参数也是一个非常重要的参数，它表示在线程池中最多能创建多少个线程；</li>
<li><code>workQueue</code>：一个阻塞队列，用来存储等待执行的任务，这个参数的选择也很重要，会对线程池的运行过程产生重大影响，一般来说，这里的阻塞队列有以下几种选择：</li>
</ol>
<table>
<thead>
<tr>
<th>名称</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>ArrayBlockingQueue</td>
<td>一个由数组结构组成的有界阻塞队列</td>
</tr>
<tr>
<td>LinkedBlockingQueue</td>
<td>一个由链表结构组成的有界阻塞队列</td>
</tr>
<tr>
<td>PriorityBlockingQueue</td>
<td>一个支持线程优先级排序的无界阻塞队列，默认自然序进行排列，也可以自定义上线compareTo()方法指定元素排列顺序，不能保证同优先级元素的顺序</td>
</tr>
<tr>
<td>DelayQueue</td>
<td>一个实现PriorityBlockingQueue实现延迟获取的无界阻塞队列，创建队列时，可以设置多久才能在队列中获取当前元素。只有延时期满后才能从获取到队列</td>
</tr>
<tr>
<td>SynchronousQueue</td>
<td>一个不存储元素的阻塞队列</td>
</tr>
<tr>
<td>LinkedTransferQueue</td>
<td>一个由链表结构组成的无界阻塞队列</td>
</tr>
<tr>
<td>LinkedBlockingDeque</td>
<td>一个由链表结构组成的双向阻塞队列，队列的头部和尾部都可以添加或移除元素，多线程并发时，可以将锁的竞争最多降到一半</td>
</tr>
</tbody></table>
<p><code>ArrayBlockingQueue</code>和<code>PriorityBlockingQueue</code>使用较少，一般使用<code>LinkedBlockingQueue</code>和<code>SynchronousQueue</code>
。线程池的排队策略与<code>BlockingQueue</code>
有关。</p>
<p>其他常见参数:</p>
<ol start="4">
<li><p><code>keepAliveTime</code>：表示线程没有任务执行时最多保持多久时间会终止。默认情况下，只有当线程池中的线程数大于<code>corePoolSize</code>时，<code>keepAliveTime</code>
才会起作用，直到线程池中的线程数不大于<code>corePoolSize</code>，即当线程池中的线程数大于<code>corePoolSize</code>时，如果一个线程空闲的时间达到<code>keepAliveTime</code>
，则会终止，直到线程池中的线程数不超过<code>corePoolSize</code>。但是如果调用了<code>allowCoreThreadTimeOut(boolean)</code>方法，在线程池中的线程数不大于<code>corePoolSize</code>
时，<code>keepAliveTime</code>参数也会起作用，直到线程池中的线程数为0；
<code>unit</code>：参数<code>keepAliveTime</code>的时间单位，有7种取值，在<code>TimeUnit</code>类中有7种静态属性：</p>
<ul>
<li>TimeUnit.DAYS; // 天</li>
<li>TimeUnit.HOURS; // 小时</li>
<li>TimeUnit.MINUTES; // 分钟</li>
<li>TimeUnit.SECONDS; // 秒</li>
<li>TimeUnit.MILLISECONDS; // 毫秒</li>
<li>TimeUnit.MICROSECONDS; // 微妙</li>
<li>TimeUnit.NANOSECONDS; // 纳秒</li>
</ul>
</li>
<li><p>unit : keepAliveTime 参数的时间单位。</p>
</li>
<li><p><code>threadFactory</code>：用于设置创建线程的工厂，可以通过线程工厂给每个创建出来的线程做些更有意义的事情，比如设置daemon和优先级等等</p>
</li>
<li><p><code>handler</code>：表示当拒绝处理任务时的策略，有以下四种取值：</p>
</li>
</ol>
<table>
<thead>
<tr>
<th>名称</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>AbortPolicy</td>
<td>直接抛出异常，默认</td>
</tr>
<tr>
<td>CallerRunsPolicy</td>
<td>只用调用者所在线程来运行任务</td>
</tr>
<tr>
<td>DiscardOldestPolicy</td>
<td>丢弃队列里最近的一个任务，并执行当前任务</td>
</tr>
<tr>
<td>DiscardPolicy</td>
<td>不处理，丢弃掉</td>
</tr>
</tbody></table>
<p>也可以根据应用场景需要来实现<code>RejectedExecutionHandler</code>接口自定义策略。如记录日志或持久化不能处理的任务</p>
<h2 id="配置合理的参数"><a href="#配置合理的参数" class="headerlink" title="配置合理的参数"></a>配置合理的参数</h2><p>出自《Java并发编程实战》</p>
<p>CPU 密集型指利用 CPU 计算能力的任务比如你在内存中对大量数据进行计算。 IO 密集型指网络读取，文件读取</p>
<ul>
<li>CPU 密集型任务(N+1)： 这种任务消耗的主要是 CPU 资源，可以将线程数设置为 N（CPU 核心数）+1，比 CPU
核心数多出来的一个线程是为了防止线程偶发的缺页中断，或者其它原因导致的任务暂停而带来的影响。一旦任务暂停，CPU 就会处于空闲状态，而在这种情况下多出来的一个线程就可以充分利用 CPU 的空闲时间。</li>
<li>I/O 密集型任务(2N)： 这种任务应用起来，系统会用大部分的时间来处理 I/O 交互，而线程在处理 I/O 的时间段内不会占用 CPU 来处理，这时就可以将 CPU 交出给其它线程使用。因此在 I/O
密集型任务的应用中，我们可以多配置一些线程，具体的计算方法是 2N。</li>
</ul>
<p>查看CPU核数</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">System.out.println(Runtime.getRuntime().availableProcessors());</span><br></pre></td></tr></table></figure>

<h2 id="任务调度"><a href="#任务调度" class="headerlink" title="任务调度"></a>任务调度</h2><p><img src="https://files.mdnice.com/user/10819/1b3576f3-6190-4864-bcb2-3849973d947b.png"></p>
<h2 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.*;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.atomic.AtomicInteger;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ThreadTest</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">corePoolSize</span> <span class="operator">=</span> <span class="number">2</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">maximumPoolSize</span> <span class="operator">=</span> <span class="number">4</span>;</span><br><span class="line">        <span class="type">long</span> <span class="variable">keepAliveTime</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line">        <span class="type">TimeUnit</span> <span class="variable">unit</span> <span class="operator">=</span> TimeUnit.SECONDS;</span><br><span class="line">        BlockingQueue&lt;Runnable&gt; workQueue = <span class="keyword">new</span> <span class="title class_">ArrayBlockingQueue</span>&lt;&gt;(<span class="number">2</span>);</span><br><span class="line">        <span class="type">RejectedExecutionHandler</span> <span class="variable">handler</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MyIgnorePolicy</span>();</span><br><span class="line">        <span class="type">ThreadPoolExecutor</span> <span class="variable">executor</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ThreadPoolExecutor</span>(corePoolSize, maximumPoolSize, keepAliveTime, unit,</span><br><span class="line">                workQueue, r -&gt; <span class="keyword">new</span> <span class="title class_">Thread</span>(r, <span class="string">&quot;Demo-Thread&quot;</span>), handler);</span><br><span class="line">        executor.prestartAllCoreThreads(); <span class="comment">// 预启动所有核心线程</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt;= <span class="number">10</span>; i++) &#123;</span><br><span class="line">            <span class="type">MyTask</span> <span class="variable">task</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MyTask</span>(String.valueOf(i));</span><br><span class="line">            executor.execute(task);</span><br><span class="line">        &#125;</span><br><span class="line">        System.in.read(); <span class="comment">// 阻塞主线程</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">NameTreadFactory</span> <span class="keyword">implements</span> <span class="title class_">ThreadFactory</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">final</span> <span class="type">AtomicInteger</span> <span class="variable">mThreadNum</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AtomicInteger</span>(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> Thread <span class="title function_">newThread</span><span class="params">(Runnable r)</span> &#123;</span><br><span class="line">            <span class="type">Thread</span> <span class="variable">t</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(r, <span class="string">&quot;my-thread-&quot;</span> + mThreadNum.getAndIncrement());</span><br><span class="line">            System.out.println(t.getName() + <span class="string">&quot; has been created&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span> t;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">MyIgnorePolicy</span> <span class="keyword">implements</span> <span class="title class_">RejectedExecutionHandler</span> &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">rejectedExecution</span><span class="params">(Runnable r, ThreadPoolExecutor e)</span> &#123;</span><br><span class="line">            doLog(r, e);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">doLog</span><span class="params">(Runnable r, ThreadPoolExecutor e)</span> &#123;</span><br><span class="line">            <span class="comment">// 可做日志记录等</span></span><br><span class="line">            System.err.println(r.toString() + <span class="string">&quot; rejected&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">MyTask</span> <span class="keyword">implements</span> <span class="title class_">Runnable</span> &#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">final</span> String name;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="title function_">MyTask</span><span class="params">(String name)</span> &#123;</span><br><span class="line">            <span class="built_in">this</span>.name = name;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                System.out.println(<span class="built_in">this</span>.toString() + <span class="string">&quot; is running!&quot;</span>);</span><br><span class="line">                Thread.sleep(<span class="number">3000</span>); <span class="comment">//让任务执行慢点</span></span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> name;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;MyTask [name=&quot;</span> + name + <span class="string">&quot;]&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>其中线程线程1-4先占满了核心线程和最大线程数量，然后4、5线程进入等待队列，7-10线程被直接忽略拒绝执行，等1-4线程中有线程执行完后通知4、5线程继续执行。</p>
<h1 id="判断线程池中的线程是否全部执行结束"><a href="#判断线程池中的线程是否全部执行结束" class="headerlink" title="判断线程池中的线程是否全部执行结束"></a>判断线程池中的线程是否全部执行结束</h1><p>CountDownLatch使一个线程等待其他线程各自执行完毕后再执行，通过一个计数器来实现的，计数器的初始值是线程的数量。每当一个线程执行完毕后，计数器的值就-1，当计数器的值为0时，表示所有线程都执行完毕，然后在闭锁上等待的线程就可以恢复工作了。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">size</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line">        <span class="type">ThreadPoolExecutor</span> <span class="variable">threadPoolExecutor</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ThreadPoolExecutor</span>(<span class="number">10</span>, <span class="number">15</span>,</span><br><span class="line">                <span class="number">0L</span>, TimeUnit.SECONDS, <span class="keyword">new</span> <span class="title class_">LinkedBlockingQueue</span>&lt;&gt;(<span class="number">10</span>));</span><br><span class="line">        <span class="keyword">final</span> <span class="type">CountDownLatch</span> <span class="variable">countDownLatch</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">CountDownLatch</span>(size);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; size; i++) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">finalI1</span> <span class="operator">=</span> i;</span><br><span class="line">            <span class="comment">// 使用一个对象实现Runnable接口或者直接使用lambda表达式(JDK1.8之后)</span></span><br><span class="line">            threadPoolExecutor.submit(() -&gt; &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    System.out.println(finalI1);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                    System.out.println(e.getMessage());</span><br><span class="line">                &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                    countDownLatch.countDown();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            countDownLatch.await();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            threadPoolExecutor.shutdownNow();</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;Finished all threads&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="常见概念的对比"><a href="#常见概念的对比" class="headerlink" title="常见概念的对比"></a>常见概念的对比</h1><h2 id="Runnable-vs-Callable"><a href="#Runnable-vs-Callable" class="headerlink" title="Runnable vs Callable"></a>Runnable vs Callable</h2><p>Callable在jdk1.5引入，目的是弥补Runnable不支持的用例，Runnable不会返回结果或抛出检查异常，但是Callable可以，所以，如果任务不需要返回结果或抛出异常推荐使用Runnable。</p>
<h2 id="execute-vs-submit"><a href="#execute-vs-submit" class="headerlink" title="execute() vs submit()"></a>execute() vs submit()</h2><ul>
<li>execute()方法用于提交不需要返回值的任务，所以无法判断任务是否被线程池执行是否成功。</li>
<li>submit()方法用于提交需要返回值的任务。线程池会返回一个 Future 类型的对象，通过这个 Future 对象可以判断任务是否执行成功，可以通过 Future 的 get()方法来获取返回值，get()
方法会阻塞当前线程直到任务完成</li>
</ul>
<h2 id="shutdown-VS-shutdownNow"><a href="#shutdown-VS-shutdownNow" class="headerlink" title="shutdown() VS shutdownNow()"></a>shutdown() VS shutdownNow()</h2><ul>
<li>shutdown(): 线程池的状态变为 SHUTDOWN。线程池不再接受新任务了，否则将会抛出RejectedExecutionException异常，但是此时线程池不会立刻退出，直到队列里的任务执行完毕才会退出</li>
<li>shutdownNow(): 线程池的状态立刻变成STOP状态，线程池会终止当前正在运行的任务，并停止处理排队的任务并返回正在等待执行的 List</li>
</ul>
<h2 id="isTerminated-VS-isShutdown"><a href="#isTerminated-VS-isShutdown" class="headerlink" title="isTerminated() VS isShutdown()"></a>isTerminated() VS isShutdown()</h2><ul>
<li>isShutDown: 当调用 shutdown() 方法后返回为 true</li>
<li>isTerminated: 当调用 shutdown() 方法后，并且所有提交的任务完成后返回为 true</li>
</ul>
]]></content>
      <categories>
        <category>编程语言</category>
      </categories>
      <tags>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title>Java诊断工具-Arthas</title>
    <url>/2021/12/30/Java%E8%AF%8A%E6%96%AD%E5%B7%A5%E5%85%B7-Arthas/</url>
    <content><![CDATA[<meta name="referrer" content="no-referrer"/>


<span id="more"></span>

<h1 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h1><p>动态分析Java应用程序工具</p>
<p>GitHub: <a href="https://github.com/alibaba/arthas/releases">https://github.com/alibaba/arthas/releases</a></p>
<p>文档: <a href="https://arthas.aliyun.com/doc/quick-start.html">https://arthas.aliyun.com/doc/quick-start.html</a></p>
<h1 id="运行"><a href="#运行" class="headerlink" title="运行"></a>运行</h1><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">curl -O https://arthas.aliyun.com/arthas-boot.jar</span><br><span class="line">java -jar arthas-boot.jar</span><br></pre></td></tr></table></figure>

<h1 id="IDEA插件"><a href="#IDEA插件" class="headerlink" title="IDEA插件"></a>IDEA插件</h1><p>下载地址: <a href="https://plugins.jetbrains.com/plugin/13581-arthas-idea">https://plugins.jetbrains.com/plugin/13581-arthas-idea</a></p>
<p>插件使用文档: <a href="https://www.yuque.com/arthas-idea-plugin/help/pe6i45">https://www.yuque.com/arthas-idea-plugin/help/pe6i45</a></p>
]]></content>
      <categories>
        <category>实用工具</category>
      </categories>
      <tags>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title>内网穿透工具-frp</title>
    <url>/2021/12/30/%E5%86%85%E7%BD%91%E7%A9%BF%E9%80%8F%E5%B7%A5%E5%85%B7-frp/</url>
    <content><![CDATA[<meta name="referrer" content="no-referrer"/>


<span id="more"></span>

<h1 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h1><blockquote>
<p>frp 官方地址: <a href="https://github.com/fatedier/frp/blob/dev/README_zh.md">https://github.com/fatedier/frp/blob/dev/README_zh.md</a></p>
</blockquote>
<p>例如我们平时开发过程中遇到联调微信/支付宝支付等第三方服务时，我们请求了微信/支付宝的支付接口，微信/支付宝官方需要给我们响应，用来表示支付是否成功，此时就需要请求我们暴露在公网的接口地址。我们可以实用 frp
作为内网穿透工具，这样我们就可以本地接收到微信或者支付宝返回给我们的请求，还是很实用的。</p>
<p>整体的流程我这里做一些简单的阐述，首先购买一台外网服务，在服务山部署 frp 服务，同时在自己电脑上也开启 frp
服务，调通后，将微信/支付宝的响应请求的地址（通常官方都会有让用户输入请求地址的选项）改为我们服务器的公网地址，当微信或者支付宝请求服务器地址时，服务器会把请求转发到本机，此时我们在本机打断点就可以拦截到。大致流程如图 1-1 所示</p>
<p><img src="https://files.mdnice.com/user/10819/36534d14-db7f-421d-9cc6-7b740a722963.png" alt="1-1"></p>
<h1 id="frp-具体配置"><a href="#frp-具体配置" class="headerlink" title="frp 具体配置"></a>frp 具体配置</h1><h2 id="frp-是什么？"><a href="#frp-是什么？" class="headerlink" title="frp 是什么？"></a>frp 是什么？</h2><p>frp 是一个专注于内网穿透的高性能的反向代理应用，支持 TCP、UDP、HTTP、HTTPS 等多种协议。可以将内网服务以安全、便捷的方式通过具有公网 IP 节点的中转暴露到公网。</p>
<h2 id="为什么使用-frp？"><a href="#为什么使用-frp？" class="headerlink" title="为什么使用 frp？"></a>为什么使用 frp？</h2><p>通过在具有公网 IP 的节点上部署 frp 服务端，可以轻松地将内网服务穿透到公网，同时提供诸多专业的功能特性，这包括：</p>
<ul>
<li>客户端服务端通信支持 TCP、KCP 以及 Websocket 等多种协议。</li>
<li>采用 TCP 连接流式复用，在单个连接间承载更多请求，节省连接建立时间。</li>
<li>代理组间的负载均衡。</li>
<li>端口复用，多个服务通过同一个服务端端口暴露。</li>
<li>多个原生支持的客户端插件（静态文件查看，HTTP、SOCK5 代理等），便于独立使用 frp 客户端完成某些工作。</li>
<li>高度扩展性的服务端插件系统，方便结合自身需求进行功能扩展。</li>
<li>服务端和客户端 UI 页面。</li>
</ul>
<h2 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h2><blockquote>
<p>GitHub: <a href="https://github.com/fatedier/frp/releases">https://github.com/fatedier/frp/releases</a></p>
</blockquote>
<p>注意: 选择好自己系统对应的架构和CPU类型</p>
<h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><p>下载好之后服务器和本机各放一份。 文件目录如下:</p>
<p><img src="https://img-blog.csdnimg.cn/20210511144713336.png"></p>
<h3 id="配置服务端配置文件"><a href="#配置服务端配置文件" class="headerlink" title="配置服务端配置文件"></a>配置服务端配置文件</h3><figure class="highlight ini"><table><tr><td class="code"><pre><span class="line"><span class="section">[common]</span></span><br><span class="line"><span class="attr">bind_port</span> = <span class="number">7000</span></span><br></pre></td></tr></table></figure>

<h3 id="配置客户端配置文件"><a href="#配置客户端配置文件" class="headerlink" title="配置客户端配置文件"></a>配置客户端配置文件</h3><figure class="highlight ini"><table><tr><td class="code"><pre><span class="line"><span class="section">[common]</span></span><br><span class="line"><span class="attr">server_addr</span> = x.x.x.x</span><br><span class="line"><span class="attr">server_port</span> = <span class="number">7000</span></span><br><span class="line"></span><br><span class="line"><span class="section">[ssh]</span></span><br><span class="line"><span class="attr">type</span> = tcp</span><br><span class="line"><span class="attr">local_ip</span> = <span class="number">127.0</span>.<span class="number">0.1</span></span><br><span class="line"><span class="attr">local_port</span> = <span class="number">8088</span></span><br><span class="line"><span class="attr">remote_port</span> = <span class="number">80</span></span><br></pre></td></tr></table></figure>

<p>参数解释:</p>
<ul>
<li><code>server_addr</code> 服务器的IP地址</li>
<li><code>server_port</code> 和服务端对应的通信端口</li>
<li><code>type</code> 类型</li>
<li><code>local_ip</code> 本机IP</li>
<li><code>local_port</code> 访问本地的端口</li>
<li><code>remote_port</code> 服务器用于转发的端口</li>
</ul>
<p>访问服务器的 80 端口，会转到到本地的 8088 端口</p>
<h2 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h2><p>编写配置文件，先通过 <code>./frps -c ./frps.ini</code> 启动服务端，再通过 <code>frpc -c ./frpc.ini</code> 启动客户端。如果需要在后台长期运行，建议结合其他工具使用，例如 <code>systemd</code>
和 <code>supervisor</code>。</p>
<p>服务端启动成功后打印的日志如下：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@VM-8-16-centos frp_0.36.2_linux_386]# ./frps -c ./frps.ini</span><br><span class="line">2021/05/11 14:42:49 [I] [root.go:200] frps uses config file: ./frps.ini</span><br><span class="line">2021/05/11 14:42:49 [I] [service.go:192] frps tcp listen on 0.0.0.0:7000</span><br><span class="line">2021/05/11 14:42:49 [I] [root.go:209] frps started successfully</span><br><span class="line">2021/05/11 14:45:15 [I] [service.go:449] [c1756581397dede4] client login info: ip [114.221.154.184:58609] version [0.36.2] hostname [] os [windows] arch [386]</span><br><span class="line">2021/05/11 14:45:15 [I] [tcp.go:63] [c1756581397dede4] [ssh] tcp proxy listen port [0]</span><br><span class="line">2021/05/11 14:45:15 [I] [control.go:446] [c1756581397dede4] new proxy [ssh] success</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>实用工具</category>
      </categories>
      <tags>
        <tag>tool</tag>
      </tags>
  </entry>
  <entry>
    <title>Web应用对接支付宝当面付解决方案</title>
    <url>/2021/08/28/Web%E5%BA%94%E7%94%A8%E5%AF%B9%E6%8E%A5%E6%94%AF%E4%BB%98%E5%AE%9D%E5%BD%93%E9%9D%A2%E4%BB%98%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/</url>
    <content><![CDATA[<meta name="referrer" content="no-referrer"/>


<span id="more"></span>

<h1 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h1><p>如果软件接入支付不可避免的接入支付宝支付或者微信支付。此次以 Web 应用程序对接支付宝当面付支付为例。本文只提供思路，具体实现没语言都不一样，但是逻辑是一样的，我用 Java 和 Go 实现了。</p>
<h1 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h1><ol>
<li>支付宝商家认证并创建一个应用</li>
<li>一个可以公网访问的 IP，用于接收支付宝回调请求</li>
<li>熟练一门开发语言和 Web 框架</li>
</ol>
<p>去支付宝申请一个应用，之后你会得到</p>
<ol>
<li>支付宝公钥</li>
<li>应用私钥</li>
<li>appid</li>
</ol>
<blockquote>
<p>申请步骤：<a href="https://opendocs.alipay.com/open/01csp3">https://opendocs.alipay.com/open/01csp3</a></p>
</blockquote>
<h1 id="支付宝当面付介绍"><a href="#支付宝当面付介绍" class="headerlink" title="支付宝当面付介绍"></a>支付宝当面付介绍</h1><p>为什么选择支付宝当面付？原因是个人就可以申请，不需要营业执照等等资料。随时申请并且可以申请多个应用，具体的申请步骤见支付宝开发文档。个人的每日收款额度会比企业的少，不过也够个人使用，费率是 0.6%，也就是当你收款 100 元，其中 0.6 元是作为手续费，真正到账是 99.4 元。</p>
<blockquote>
<p>支付宝支付开发文档：<a href="https://opendocs.alipay.com/open/">https://opendocs.alipay.com/open/</a></p>
</blockquote>
<p>我不喜欢用第三方的支付，第一跑路居多，第二不稳定，比如码支付，原理是挂一个监听程序，监听回调事件，前提是需要一个 24 小时都要挂在后台运行，优点是没手续费直接到账，大家各有所好吧，我不推荐任何的第三方支付。</p>
<h1 id="细节"><a href="#细节" class="headerlink" title="细节"></a>细节</h1><h2 id="关于-SDK-选择"><a href="#关于-SDK-选择" class="headerlink" title="关于 SDK 选择"></a>关于 SDK 选择</h2><p>Java 我用的 alipay-easysdk</p>
<blockquote>
<p>alipay-easysdk 开源地址：<a href="https://github.com/alipay/alipay-easysdk">https://github.com/alipay/alipay-easysdk</a></p>
</blockquote>
<p>Go 语言用的 go-pay</p>
<blockquote>
<p>go-pay 开源地址：<a href="https://github.com/go-pay/gopay">https://github.com/go-pay/gopay</a></p>
</blockquote>
<h2 id="支付宝开发文档摘要"><a href="#支付宝开发文档摘要" class="headerlink" title="支付宝开发文档摘要"></a>支付宝开发文档摘要</h2><p>这块可以看支付宝的官方文档，讲的比较详细。</p>
<p>首先以扫码支付为例，以下是扫码支付流程图</p>
<p><img src="https://files.mdnice.com/user/10819/656a663c-c616-4726-9e4c-98ab8a3962d5.png" alt="扫码支付流程图"></p>
<p>在 2.2 请求预下单，向支付宝官方发起请求时需要用到 appid 和应用私钥，之后支付宝官方会返回一个二维码的 url，把 url 以二维码的形式展示在前端。</p>
<p>用户扫码支付结束后，无论成功或者失败支付宝后台就会发起 6 异步通知支付结果。此时就要用到我们提前准备好的公网 IP 或者域名用于接收支付结果，简单地说就是支付宝官方来请求我们事先暴露在公网上的接口，那么怎么判断请求时支付宝官方发起的，怎么验证？这是就需要用到支付宝公钥验签。</p>
<p>支付业务我们可以这样实现，发起支付返回二维码之后，我们在数据库订单表中插入订单，状态时未支付，知道支付宝回调我们接口，验签通过后将状态设置到该订单上，前端定时请求查询订单状态的接口，根据查询到的状态跳转至不同的提示页。</p>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>支付宝官方文档很详细，本文只介绍了预下单和回调两个接口，还有取消订单，查单的接口等等可以去看官方文档。</p>
]]></content>
      <categories>
        <category>Web开发</category>
      </categories>
      <tags>
        <tag>web</tag>
      </tags>
  </entry>
  <entry>
    <title>推荐两款下载器IDM和Aria2</title>
    <url>/2021/08/14/%E6%8E%A8%E8%8D%90%E4%B8%A4%E6%AC%BE%E4%B8%8B%E8%BD%BD%E5%99%A8IDM%E5%92%8CAria2/</url>
    <content><![CDATA[<meta name="referrer" content="no-referrer"/>


<span id="more"></span>

<h1 id="IDM"><a href="#IDM" class="headerlink" title="IDM"></a>IDM</h1><h2 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h2><p>官方网站: <a href="https://www.internetdownloadmanager.com/">https://www.internetdownloadmanager.com</a></p>
<p>蓝奏云下载地址: <a href="https://wwa.lanzoui.com/iMsK7w4jtpe">https://wwa.lanzoui.com/iMsK7w4jtpe</a> 密码:hdxa</p>
<p>注意：官网正版是收费的，蓝奏云的链接是和谐版</p>
<h2 id="设置"><a href="#设置" class="headerlink" title="设置"></a>设置</h2><h3 id="设置UA表示"><a href="#设置UA表示" class="headerlink" title="设置UA表示"></a>设置UA表示</h3><p>将 选项-&gt;下载-&gt;UA 设置为： softxm;netdisk</p>
<h3 id="设置简体中文"><a href="#设置简体中文" class="headerlink" title="设置简体中文"></a>设置简体中文</h3><p><img src="https://files.mdnice.com/user/10819/b2be3e32-9efc-4e7a-96e5-331439f9c123.png" alt="设置IDM简体中文"></p>
<h3 id="设置-IDM-肤色"><a href="#设置-IDM-肤色" class="headerlink" title="设置 IDM 肤色"></a>设置 IDM 肤色</h3><p><img src="https://files.mdnice.com/user/10819/80ed2a65-cb7e-4e2d-bd79-3762bd18d70e.png" alt="设置IDM肤色"></p>
<h1 id="IDM下载B站-YouTube高清视频"><a href="#IDM下载B站-YouTube高清视频" class="headerlink" title="IDM下载B站/YouTube高清视频"></a>IDM下载B站/YouTube高清视频</h1><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>利用 IDM 强大的嗅探功能，我们可以下载一切网页中的视频文件。</p>
<h2 id="安装-IDM"><a href="#安装-IDM" class="headerlink" title="安装 IDM"></a>安装 IDM</h2><p>安装好之后，如果你使用的是谷歌浏览器，它会提示为 Chrome 添加了一个插件。如果没有提示，请自己手动添加 Chrome 插件，这个插件用于嗅探，所以必须装。</p>
<p><img src="https://files.mdnice.com/user/10819/85561770-1e2f-4c4f-8693-3b3fa0fe7f54.png" alt="文件目录"></p>
<p><img src="https://files.mdnice.com/user/10819/cf856177-59bb-4854-85b8-4166e5ea6077.png" alt="Chrome插件"></p>
<p><img src="https://files.mdnice.com/user/10819/e10d26c0-dc98-440e-9e90-2885513f180c.png" alt="手动添加Chrome插件"></p>
<h2 id="下载-YouTube-视频"><a href="#下载-YouTube-视频" class="headerlink" title="下载 YouTube 视频"></a>下载 YouTube 视频</h2><p>首先需要自己有一个代理，不然是使用不了 YouTube 的，更别谈下载 YouTube 高清视频了。</p>
<ol>
<li>设置 IDM 代理</li>
</ol>
<p>我这里是使用的是 socks 代理。设置方式如下:</p>
<p><img src="https://files.mdnice.com/user/10819/cae7b567-8fe1-4b3b-a865-1849ec91e404.png" alt="设置"></p>
<p><img src="https://files.mdnice.com/user/10819/49978fd8-6f7c-49fd-960e-093617119652.png" alt="设置socks代理"></p>
<ol start="2">
<li>下载视频</li>
</ol>
<p>大家可以看到视频的右上角有一个按钮，这个就是刚才安装的 Chrome 插件起的作用，而且可以选择视频的清晰度。我们点击自己想要的清晰度就可以唤醒 IDM，最后直接下载就可以了。</p>
<p><img src="https://files.mdnice.com/user/10819/2c7052d7-8186-49cb-90d9-eadac74441fe.png" alt="下载YouTube高清视频"></p>
<h2 id="下载-B-站视频"><a href="#下载-B-站视频" class="headerlink" title="下载 B 站视频"></a>下载 B 站视频</h2><p>和下载 YouTube 视频一样，在视频的右上角有一个按钮，选择自己想要下载视频的清晰度即可。一句话总结就是网页中只要能被 IDM 插件嗅探到的视频文件都可以下载。</p>
<p><img src="https://files.mdnice.com/user/10819/50344585-ea07-4f93-a78f-a43ed235443a.png" alt="下载B站视频"></p>
<h1 id="Aria2"><a href="#Aria2" class="headerlink" title="Aria2"></a>Aria2</h1><p>开源地址：<a href="https://github.com/aria2/aria2/releases">https://github.com/aria2/aria2/releases</a></p>
<p>支 HTTP/HTTPS、FTP、SFTP、BT、磁链（不支持 ED2K）,需要手动配置一些文件</p>
<h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><ol>
<li>下载好之后解压可以看到以下文件，只有 <code>aria2c.exe</code> 是真正有用的，其他都可以删除。</li>
</ol>
<ol start="2">
<li>新建<code>aria2.conf</code>，文件内容如下</li>
</ol>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line"><span class="comment">## &#x27;#&#x27;开头为注释内容, 选项都有相应的注释说明, 根据需要修改 ##</span></span><br><span class="line"><span class="comment">## 被注释的选项填写的是默认值, 建议在需要修改时再取消注释  ##</span></span><br><span class="line"></span><br><span class="line"><span class="comment">## 文件保存相关 ##</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 文件的保存路径(可使用绝对路径或相对路径), 默认: 当前启动位置</span></span><br><span class="line">dir=.\Download</span><br><span class="line"><span class="comment"># 启用磁盘缓存, 0为禁用缓存, 需1.16以上版本, 默认:16M</span></span><br><span class="line">disk-cache=<span class="number">32</span>M</span><br><span class="line"><span class="comment"># 文件预分配方式, 能有效降低磁盘碎片, 默认:prealloc</span></span><br><span class="line"><span class="comment"># 预分配所需时间: none &lt; falloc ? trunc &lt; prealloc</span></span><br><span class="line"><span class="comment"># falloc和trunc则需要文件系统和内核支持</span></span><br><span class="line"><span class="comment"># NTFS建议使用falloc, EXT3/4建议trunc, MAC 下需要注释此项</span></span><br><span class="line">file-allocation=falloc</span><br><span class="line"><span class="comment"># 断点续传</span></span><br><span class="line"><span class="keyword">continue</span>=true</span><br><span class="line"></span><br><span class="line"><span class="comment">## 下载连接相关 ##</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 最大同时下载任务数, 运行时可修改, 默认:5</span></span><br><span class="line">max-concurrent-downloads=<span class="number">5</span></span><br><span class="line"><span class="comment"># 同一服务器连接数, 添加时可指定, 最大:16</span></span><br><span class="line">max-connection-per-server=<span class="number">16</span></span><br><span class="line"><span class="comment"># 最小文件分片大小, 添加时可指定, 取值范围1M -1024M, 默认:20M</span></span><br><span class="line"><span class="comment"># 假定size=10M, 文件为20MiB 则使用两个来源下载; 文件为15MiB 则使用一个来源下载</span></span><br><span class="line"><span class="comment">#min-split-size=10M</span></span><br><span class="line"><span class="comment"># 单个任务最大线程数, 添加时可指定, 默认:5</span></span><br><span class="line">split=<span class="number">32</span></span><br><span class="line"><span class="comment"># 整体下载速度限制, 运行时可修改, 默认:0</span></span><br><span class="line"><span class="comment">#max-overall-download-limit=0</span></span><br><span class="line"><span class="comment"># 单个任务下载速度限制, 默认:0</span></span><br><span class="line"><span class="comment">#max-download-limit=0</span></span><br><span class="line"><span class="comment"># 整体上传速度限制, 运行时可修改, 默认:0</span></span><br><span class="line"><span class="comment">#max-overall-upload-limit=0</span></span><br><span class="line"><span class="comment"># 单个任务上传速度限制, 默认:0</span></span><br><span class="line"><span class="comment">#max-upload-limit=0</span></span><br><span class="line"><span class="comment"># 禁用IPv6, 默认:false</span></span><br><span class="line">disable-ipv6=true</span><br><span class="line"></span><br><span class="line"><span class="comment">## 进度保存相关 ##</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 从会话文件中读取下载任务</span></span><br><span class="line">input-file=aria2.session</span><br><span class="line"><span class="comment"># 在Aria2退出时保存`错误/未完成`的下载任务到会话文件</span></span><br><span class="line">save-session=aria2.session</span><br><span class="line"><span class="comment"># 定时保存会话, 0为退出时才保存（此处需要设置，否则失去自动保存）, 需1.16.1以上版本, 默认:0</span></span><br><span class="line">save-session-interval=<span class="number">60</span></span><br><span class="line"></span><br><span class="line"><span class="comment">## RPC相关设置 ##</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 启用RPC, 默认:false</span></span><br><span class="line">enable-rpc=true</span><br><span class="line"><span class="comment"># 允许所有来源, 默认:false</span></span><br><span class="line">rpc-allow-origin-all=true</span><br><span class="line"><span class="comment"># 允许非外部访问, 默认:false</span></span><br><span class="line">rpc-listen-all=true</span><br><span class="line"><span class="comment"># 事件轮询方式, 取值:[epoll, kqueue, port, poll, select], 不同系统默认值不同</span></span><br><span class="line"><span class="comment">#event-poll=select</span></span><br><span class="line"><span class="comment"># RPC监听端口, 端口被占用时可以修改, 默认:6800</span></span><br><span class="line"><span class="comment">#rpc-listen-port=6800</span></span><br><span class="line"></span><br><span class="line"><span class="comment">## BT/PT下载相关 ##</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 当下载的是一个种子(以.torrent结尾)时, 自动开始BT任务, 默认:true</span></span><br><span class="line"><span class="comment">#follow-torrent=true</span></span><br><span class="line"><span class="comment"># BT监听端口, 当端口被屏蔽时使用, 默认:6881-6999</span></span><br><span class="line">listen-port=<span class="number">51413</span></span><br><span class="line"><span class="comment"># 单个种子最大连接数, 默认:55</span></span><br><span class="line"><span class="comment">#bt-max-peers=55</span></span><br><span class="line"><span class="comment"># 打开DHT功能, PT需要禁用, 默认:true</span></span><br><span class="line"><span class="comment">#enable-dht=false</span></span><br><span class="line"><span class="comment"># 打开IPv6 DHT功能, PT需要禁用</span></span><br><span class="line"><span class="comment">#enable-dht6=false</span></span><br><span class="line"><span class="comment"># DHT网络监听端口, 默认:6881-6999</span></span><br><span class="line"><span class="comment">#dht-listen-port=6881-6999</span></span><br><span class="line"><span class="comment"># 本地节点查找, PT需要禁用, 默认:false</span></span><br><span class="line"><span class="comment">#bt-enable-lpd=false</span></span><br><span class="line"><span class="comment"># 种子交换, PT需要禁用, 默认:true</span></span><br><span class="line"><span class="comment">#enable-peer-exchange=false</span></span><br><span class="line"><span class="comment"># 每个种子限速, 对少种的PT很有用, 默认:50K</span></span><br><span class="line"><span class="comment">#bt-request-peer-speed-limit=50K</span></span><br><span class="line"><span class="comment"># 客户端伪装, PT需要</span></span><br><span class="line">peer-id-prefix=-TR2770-</span><br><span class="line">user-agent=Transmission/<span class="number">2.77</span></span><br><span class="line"><span class="comment"># 当种子的分享率达到这个数时, 自动停止做种, 0为一直做种, 默认:1.0</span></span><br><span class="line"><span class="comment">#seed-ratio=0</span></span><br><span class="line"><span class="comment"># 强制保存会话, 即使任务已经完成, 默认:false</span></span><br><span class="line"><span class="comment"># 较新的版本开启后会在任务完成后依然保留.aria2文件</span></span><br><span class="line"><span class="comment">#force-save=true</span></span><br><span class="line"><span class="comment"># BT校验相关, 默认:true</span></span><br><span class="line"><span class="comment">#bt-hash-check-seed=true</span></span><br><span class="line"><span class="comment"># 继续之前的BT任务时, 无需再次校验, 默认:false</span></span><br><span class="line">bt-seed-unverified=true</span><br><span class="line"><span class="comment"># 保存磁力链接元数据为种子文件(.torrent文件), 默认:false</span></span><br><span class="line">bt-save-metadata=true</span><br><span class="line"></span><br><span class="line"><span class="comment"># bt-tracker 更新，解决Aria2 BT下载速度慢没速度的问题</span></span><br><span class="line"><span class="comment"># https://raw.githubusercontent.com/ngosang/trackerslist/master/trackers_best.txt</span></span><br><span class="line">bt-tracker=http:<span class="regexp">//</span>p4p.arenabg.com:<span class="number">1337</span><span class="regexp">/announce,udp:/</span><span class="regexp">/tracker.opentrackr.org:1337/</span>announce,udp:<span class="regexp">//</span><span class="number">9</span>.rarbg.com:<span class="number">2810</span><span class="regexp">/announce,udp:/</span><span class="regexp">/tracker.openbittorrent.com:6969/</span>announce,udp:<span class="regexp">//</span>exodus.desync.com:<span class="number">6969</span><span class="regexp">/announce,http:/</span><span class="regexp">/openbittorrent.com:80/</span>announce,udp:<span class="regexp">//</span>www.torrent.eu.org:<span class="number">451</span><span class="regexp">/announce,udp:/</span><span class="regexp">/tracker.torrent.eu.org:451/</span>announce,udp:<span class="regexp">//</span>retracker.lanta-net.ru:<span class="number">2710</span><span class="regexp">/announce,udp:/</span><span class="regexp">/open.stealth.si:80/</span>announce,udp:<span class="regexp">//</span>wassermann.online:<span class="number">6969</span><span class="regexp">/announce,udp:/</span><span class="regexp">/vibe.sleepyinternetfun.xyz:1738/</span>announce,udp:<span class="regexp">//</span>vibe.community:<span class="number">6969</span><span class="regexp">/announce,udp:/</span><span class="regexp">/udp-tracker.shittyurl.org:6969/</span>announce,udp:<span class="regexp">//u</span>.wwwww.wtf:<span class="number">1</span><span class="regexp">/announce,udp:/</span><span class="regexp">/tracker1.bt.moack.co.kr:80/</span>announce,udp:<span class="regexp">//</span>tracker0.ufibox.com:<span class="number">6969</span><span class="regexp">/announce,udp:/</span><span class="regexp">/tracker.zerobytes.xyz:1337/</span>announce,udp:<span class="regexp">//</span>tracker.uw0.xyz:<span class="number">6969</span><span class="regexp">/announce,udp:/</span><span class="regexp">/tracker.tiny-vps.com:6969/</span>announce</span><br></pre></td></tr></table></figure>

<ol start="3">
<li><p>新建<code>aria2.session</code>用于存储会话，这个文件内容可以为空</p>
</li>
<li><p>在 Aria2 根目录启动 cmd 命令行，输入以下命令启动服务。</p>
</li>
</ol>
<figure class="highlight jboss-cli"><table><tr><td class="code"><pre><span class="line">aria2c <span class="params">--conf-path=</span><span class="string">./aria2.conf</span></span><br></pre></td></tr></table></figure>

<p><img src="https://img-blog.csdnimg.cn/img_convert/9d26ea3bd10a1978cd87b1a2e31ac393.png">
此时就会出现如图所示的情况，将程序窗口放在后台运行即可</p>
<ol start="5">
<li>浏览器访问<code>http://aria2c.com</code>会出现一个 UI 界面，点击添加将链接复制进去就可以使用了。</li>
</ol>
<p><img src="https://img-blog.csdnimg.cn/img_convert/7029e0f13d22fdb2a5e9562ec05cf386.png"></p>
<h2 id="自定义配置"><a href="#自定义配置" class="headerlink" title="自定义配置"></a>自定义配置</h2><p>修改<code>aria2.conf</code></p>
<ol>
<li>下载文件的保存路径</li>
</ol>
<figure class="highlight abnf"><table><tr><td class="code"><pre><span class="line"><span class="attribute">dir</span><span class="operator">=</span>.\Download</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>配置 Tracker 服务器，解决 BT 下载速度慢的问题</li>
</ol>
<figure class="highlight abnf"><table><tr><td class="code"><pre><span class="line"><span class="attribute">bt-tracker</span><span class="operator">=</span></span><br></pre></td></tr></table></figure>

<p>默认即可，不行在使用下面两个地址</p>
<ul>
<li>地址 1：<a href="https://trackerslist.com/#/zh">https://trackerslist.com/#/zh</a></li>
<li>地址 2：<a href="https://raw.githubusercontent.com/ngosang/trackerslist/master/trackers_best.txt">https://raw.githubusercontent.com/ngosang/trackerslist/master/trackers_best.txt</a></li>
</ul>
<h2 id="打包好的文件"><a href="#打包好的文件" class="headerlink" title="打包好的文件"></a>打包好的文件</h2><p>将Aria2和AriaNg使用Electron打包成Windows下可执行的程序。</p>
<blockquote>
<p>GitHub: <a href="https://github.com/jonssonyan/aria2-x">https://github.com/jonssonyan/aria2-x</a></p>
</blockquote>
]]></content>
      <categories>
        <category>实用工具</category>
      </categories>
      <tags>
        <tag>tool</tag>
      </tags>
  </entry>
  <entry>
    <title>前后端分离的权限管理系统设计和实现</title>
    <url>/2021/06/17/%E5%89%8D%E5%90%8E%E7%AB%AF%E5%88%86%E7%A6%BB%E7%9A%84%E6%9D%83%E9%99%90%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F%E8%AE%BE%E8%AE%A1%E5%92%8C%E5%AE%9E%E7%8E%B0/</url>
    <content><![CDATA[<meta name="referrer" content="no-referrer"/>


<span id="more"></span>

<h1 id="代码地址"><a href="#代码地址" class="headerlink" title="代码地址"></a>代码地址</h1><p>项目托管在GitHub上，使用Git拉取代码。</p>
<blockquote>
<p>前端:<a href="https://github.com/jonssonyan/authority-ui">https://github.com/jonssonyan/authority-ui</a></p>
</blockquote>
<blockquote>
<p>后端: <a href="https://github.com/jonssonyan/authority">https://github.com/jonssonyan/authority</a></p>
</blockquote>
<h1 id="相关视频"><a href="#相关视频" class="headerlink" title="相关视频"></a>相关视频</h1><p><a href="https://www.bilibili.com/video/BV1DK4y1S7h7">演示视频</a></p>
<p><a href="https://www.bilibili.com/video/BV1kV411s7N2">部署视频</a></p>
<h1 id="界面"><a href="#界面" class="headerlink" title="界面"></a>界面</h1><p><img src="https://files.mdnice.com/user/10819/7388721c-8349-48fb-ada0-6e4059f1a461.png" alt="界面"></p>
<h1 id="设计和实现"><a href="#设计和实现" class="headerlink" title="设计和实现"></a>设计和实现</h1><h2 id="技术栈"><a href="#技术栈" class="headerlink" title="技术栈"></a>技术栈</h2><p>前端: JavaScript、Vue.js Element axios</p>
<p>后端: Java、Spring Boot、Mybatis-plus、 Shiro 、JWT</p>
<p>部署: Docker</p>
<h2 id="数据库设计"><a href="#数据库设计" class="headerlink" title="数据库设计"></a>数据库设计</h2><p><img src="https://files.mdnice.com/user/10819/29a53101-0d10-4f44-ad01-13f6826d5182.png" alt="数据库设计"></p>
<h2 id="代码设计"><a href="#代码设计" class="headerlink" title="代码设计"></a>代码设计</h2><ol>
<li>动态权限控制</li>
</ol>
<p>以下是项目中的一处代码:</p>
<figure class="highlight less"><table><tr><td class="code"><pre><span class="line"><span class="variable">@RequiresRoles</span>(&#123;<span class="string">&quot;admin&quot;</span>&#125;)</span><br><span class="line"><span class="variable">@RequiresPermissions</span>(&#123;<span class="string">&quot;menuList:add&quot;</span>, <span class="string">&quot;menuList:update&quot;</span>&#125;)</span><br><span class="line">public Result <span class="built_in">saveOrUpdate</span>(<span class="variable">@RequestBody</span> MenuList menuList) &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>权限框架使用的是Shiro，通过Shiro的注解实现接口的权限，可以设置接口必须要有某个权限或者某个角色才可以访问。一个账户可以关联一个角色，一个角色可以关联多个权限，
通过数据库中的<code>user</code> <code>permission</code> <code>role</code> <code>role_permission</code>相互的关联实现动态权限控制。</p>
<ol start="2">
<li>接口安全</li>
</ol>
<p>通过JWT颁发token的方式实现前后端接口的安全。前端将token存档在Cookie中，每次请求接口是携带token。并通过Hibernate Validator实现参数校验。</p>
<ol start="3">
<li>无限层级分类设计</li>
</ol>
<p><code>category</code>表中的<code>parent_id</code>(父级id) <code>path</code>(搜索路径，例如1-) <code>level</code>(表示当前节点到根节点的距离或者层级)三个字段实现无限层级。</p>
<ol start="4">
<li>接口文档</li>
</ol>
<p>通过Swagger实现，接口文档地址为<code>localhost/IP:8888/authority/swagger-ui.html</code></p>
<h1 id="项目部署"><a href="#项目部署" class="headerlink" title="项目部署"></a>项目部署</h1><h2 id="打包项目"><a href="#打包项目" class="headerlink" title="打包项目"></a>打包项目</h2><p>前端使用npm包管理器，可以使用<code>npm run build</code>命令将前端项目打包，最终打包好的文件夹在 <code>dist</code> 文件夹下</p>
<p>后端使用Maven进行依赖管理，可以通过 <code>Maven</code> 将项目打成<code>.jar</code>的格式。</p>
<h2 id="上传文件至服务器"><a href="#上传文件至服务器" class="headerlink" title="上传文件至服务器"></a>上传文件至服务器</h2><p>在根目录新建 myDate 文件夹，里面存放上传的文件。如图所示，<code>authority.jar</code> 是后端文件，<code>dist</code> 是前端文件夹。</p>
<p><img src="https://files.mdnice.com/user/10819/17ad5efa-57bb-4a71-a225-c72b96eee979.png" alt="服务器文件"></p>
<h2 id="部署Docker"><a href="#部署Docker" class="headerlink" title="部署Docker"></a>部署Docker</h2><ol>
<li>安装Docker</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 安装 yum-utils 软件包</span></span><br><span class="line">yum install -y yum-utils</span><br><span class="line"><span class="comment"># 设置稳定的存储库（使用阿里云镜像）</span></span><br><span class="line">yum-config-manager --add-repo http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo</span><br><span class="line">yum makecache fast <span class="comment"># 更新缓存</span></span><br><span class="line"><span class="comment"># 安装最新版本的 Docker Engine 和容器，或转到下一步以安装特定版本</span></span><br><span class="line">yum install docker-ce docker-ce-cli containerd.io</span><br><span class="line"><span class="comment"># 启动 Docker</span></span><br><span class="line">systemctl start docker</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>设置Docker国内镜像</li>
</ol>
<p>Docker 默认的镜像源于国内而言是有些慢，所以可以配置一下国内的镜像源，提高一下 <code>docker pull</code> 命令的下载速度</p>
<blockquote>
<p>阿里云镜像服务参考：<a href="https://cr.console.aliyun.com/cn-shanghai/instances/mirrors">https://cr.console.aliyun.com/cn-shanghai/instances/mirrors</a></p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 创建目录</span></span><br><span class="line"><span class="built_in">mkdir</span> -p /etc/docker </span><br><span class="line"><span class="comment"># 添加163镜像到配置文件</span></span><br><span class="line"><span class="built_in">cat</span> &gt;/etc/docker/daemon.json &lt;&lt;<span class="string">EOF</span></span><br><span class="line"><span class="string">&#123;</span></span><br><span class="line"><span class="string"> &quot;registry-mirrors&quot;:[&quot;https://hub-mirror.c.163.com&quot;,&quot;https://docker.mirrors.ustc.edu.cn&quot;]</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string">EOF</span> </span><br><span class="line"><span class="comment"># 重新加载文件 重启docker 设置Docker开机自启</span></span><br><span class="line">systemctl daemon-reload &amp;&amp; systemctl restart docker &amp;&amp; systemctl <span class="built_in">enable</span> docker</span><br></pre></td></tr></table></figure>

<h2 id="部署MySQL"><a href="#部署MySQL" class="headerlink" title="部署MySQL"></a>部署MySQL</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 拉取 Mysql 5.7.31 镜像</span></span><br><span class="line">docker pull mysql:5.7.31</span><br><span class="line"><span class="comment"># 运行 Mysql 5.7.31</span></span><br><span class="line">docker run -d --name myMysql -p 9506:3306 -v /data/mysql:/var/lib/mysql -e MYSQL_ROOT_PASSWORD=123456 mysql:5.7.31</span><br></pre></td></tr></table></figure>

<p>参数解释:</p>
<ul>
<li><code>-d</code> 后台运行容器，并返回容器 ID</li>
<li><code>--name</code> 为容器指定一个名称</li>
<li><code>-p</code> 指定端口映射，格式为：主机(宿主)端口:容器端口</li>
<li><code>-v</code> 绑定一个卷，容器的 /var/lib/mysql 映射到 主机的目录 /data/mysql</li>
<li><code>-e MYSQL_ROOT_PASSWORD=123456</code> 设置环境变量，密码设置为 123456</li>
<li><code>mysql:5.7.31</code> 使用镜像 mysql:5.7.31</li>
</ul>
<p>部署好MySQL之后，导入数据库文件，SQL文件在<code>后端项目/src/main/resources/sql/</code>文件夹下。</p>
<h2 id="打包后端并运行为容器"><a href="#打包后端并运行为容器" class="headerlink" title="打包后端并运行为容器"></a>打包后端并运行为容器</h2><p>在 <code>jar</code> 包的同一级文件夹下新建 Dockerfile 文件，文件内容如下</p>
<figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line"><span class="keyword">FROM</span> java:<span class="number">8</span></span><br><span class="line"><span class="keyword">VOLUME</span><span class="language-bash"> /tmp</span></span><br><span class="line"><span class="keyword">ADD</span><span class="language-bash"> authority.jar authority.jar</span></span><br><span class="line"><span class="keyword">EXPOSE</span> <span class="number">8888</span></span><br><span class="line"><span class="keyword">ENTRYPOINT</span><span class="language-bash"> [<span class="string">&quot;java&quot;</span>,<span class="string">&quot;-jar&quot;</span>,<span class="string">&quot;/authority.jar&quot;</span>]</span></span><br></pre></td></tr></table></figure>

<p>参数解释:</p>
<ul>
<li><code>from java:8</code> 拉取一个 jdk 为 1.8 的 docker image</li>
<li><code>ADD</code> jar包添加至容器中</li>
<li><code>expose</code> 该容器暴露的端口是多少，就是 jar 在容器中以多少端口运行</li>
<li><code>ENTRYPOINT</code> 容器启动之后执行的命令，java -jar /authority.jar 即启动 jar</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 打包镜像</span></span><br><span class="line">docker build -t authority .</span><br><span class="line"><span class="comment"># 运行容器</span></span><br><span class="line">docker run -d -p 8888:8888 --name authority-8888 authority</span><br></pre></td></tr></table></figure>

<h2 id="打包前端并运行为容器"><a href="#打包前端并运行为容器" class="headerlink" title="打包前端并运行为容器"></a>打包前端并运行为容器</h2><p>在前端文件夹 dist 的同一级文件夹下新建 Dockerfile 文件，文件内容如下</p>
<figure class="highlight gradle"><table><tr><td class="code"><pre><span class="line"><span class="keyword">FROM</span> nginx:latest</span><br><span class="line"><span class="keyword">COPY</span> .<span class="regexp">/dist /u</span>sr<span class="regexp">/share/</span>nginx<span class="regexp">/html/</span></span><br><span class="line">EXPOSE <span class="number">80</span></span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 打包镜像</span></span><br><span class="line">docker build -t authority-ui .</span><br><span class="line"><span class="comment"># 运行容器</span></span><br><span class="line">docker run -d -p 80:80 --name authority-ui-80 authority-ui</span><br></pre></td></tr></table></figure>

<h2 id="最终效果"><a href="#最终效果" class="headerlink" title="最终效果"></a>最终效果</h2><p><img src="https://files.mdnice.com/user/10819/88f87bf7-b15e-495e-866d-a06ae1a88515.png" alt="最终效果"></p>
<ul>
<li><code>authority-ui--80</code> 前端容器</li>
<li><code>authority-8888</code> 后端容器</li>
<li><code>myMysql</code> 数据库容器</li>
</ul>
<p>打开浏览器访问服务器 <code>IP地址</code> 即可</p>
]]></content>
      <categories>
        <category>我的项目</category>
      </categories>
      <tags>
        <tag>vue.js</tag>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title>使用Scrapy框架爬取知网数据</title>
    <url>/2021/03/25/%E4%BD%BF%E7%94%A8Scrapy%E6%A1%86%E6%9E%B6%E7%88%AC%E5%8F%96%E7%9F%A5%E7%BD%91%E6%95%B0%E6%8D%AE/</url>
    <content><![CDATA[<meta name="referrer" content="no-referrer" />


<span id="more"></span>

<h1 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h1><ol>
<li>创建一个Scrapy项目</li>
<li>定义提取的Item</li>
<li>编写爬取网站的 spider 并提取 Item</li>
<li>编写 Item Pipeline 来存储提取到的Item(即数据)</li>
</ol>
<h1 id="安装scrapy"><a href="#安装scrapy" class="headerlink" title="安装scrapy"></a>安装scrapy</h1><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">pip install scrapy</span><br></pre></td></tr></table></figure>

<h1 id="新建项目"><a href="#新建项目" class="headerlink" title="新建项目"></a>新建项目</h1><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">创建项目：scrapy startproject xxx</span><br><span class="line">进入项目：cd xxx <span class="comment">#进入某个文件夹下</span></span><br><span class="line">创建爬虫：scrapy genspider xxx（爬虫名） xxx.com （爬取域）</span><br><span class="line">生成文件：scrapy crawl xxx -o xxx.json (生成某种类型的文件)</span><br><span class="line">运行爬虫：scrapy crawl XXX</span><br><span class="line">列出所有爬虫：scrapy <span class="built_in">list</span></span><br><span class="line">获得配置信息：scrapy settings [options]</span><br></pre></td></tr></table></figure>

<h1 id="目录结构"><a href="#目录结构" class="headerlink" title="目录结构"></a>目录结构</h1><p><img src="https://files.mdnice.com/user/10819/eb3bdf3d-b983-4362-8e66-c8a1dcb25ffe.png"></p>
<h1 id="全局配置-settings"><a href="#全局配置-settings" class="headerlink" title="全局配置 settings"></a>全局配置 settings</h1><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 默认是注释的，这个东西非常重要，如果不写很容易被判断为电脑，简单点写一个Mozilla/5.0即可</span></span><br><span class="line">USER_AGENT = <span class="string">&#x27;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/89.0.4389.90 Safari/537.36&#x27;</span></span><br><span class="line"><span class="comment"># 是否遵循机器人协议，默认是true，需要改为false，否则很多东西爬不了</span></span><br><span class="line">ROBOTSTXT_OBEY = <span class="literal">False</span></span><br><span class="line"><span class="comment"># 最大并发数，很好理解，就是同时允许开启多少个爬虫线程</span></span><br><span class="line">CONCURRENT_REQUESTS = <span class="number">32</span></span><br><span class="line"><span class="comment"># 下载延迟时间，单位是秒，控制爬虫爬取的频率，根据你的项目调整，不要太快也不要太慢，默认是3秒，即爬一个停3秒，设置为1秒性价比较高，如果要爬取的文件较多，写零点几秒也行</span></span><br><span class="line">DOWNLOAD_DELAY = <span class="number">3</span></span><br><span class="line"><span class="comment"># 是否保存COOKIES，默认关闭，开机可以记录爬取过程中的COOKIE，非常好用的一个参数</span></span><br><span class="line">COOKIES_ENABLED = <span class="literal">False</span></span><br><span class="line"><span class="comment"># 默认请求头，上面写了一个USER_AGENT，其实这个东西就是放在请求头里面的，这个东西可以根据你爬取的内容做相应设置</span></span><br><span class="line">DEFAULT_REQUEST_HEADERS = &#123;</span><br><span class="line">    <span class="string">&#x27;Accept&#x27;</span>: <span class="string">&#x27;text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;Accept-Language&#x27;</span>: <span class="string">&#x27;zh-CN,zh;q=0.9&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;User-Agent&#x27;</span>: <span class="string">&#x27;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/89.0.4389.90 Safari/537.36&#x27;</span>,</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment"># 项目管道，300为优先级，越低越爬取的优先度越高</span></span><br><span class="line">ITEM_PIPELINES = &#123;</span><br><span class="line">    <span class="string">&#x27;spider.pipelines.SpiderPipeline&#x27;</span>: <span class="number">300</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="定义数据结构-items"><a href="#定义数据结构-items" class="headerlink" title="定义数据结构 items"></a>定义数据结构 items</h1><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">SpiderItem</span>(scrapy.Item):</span><br><span class="line">    <span class="comment"># define the fields for your item here like:</span></span><br><span class="line">    <span class="comment"># name = scrapy.Field()</span></span><br><span class="line">    <span class="comment"># 需要取哪些内容，就创建哪些容器</span></span><br><span class="line">    <span class="comment"># 标题</span></span><br><span class="line">    title = scrapy.Field()</span><br><span class="line">    <span class="comment"># 作者</span></span><br><span class="line">    author = scrapy.Field()</span><br><span class="line">    <span class="comment"># 来源</span></span><br><span class="line">    source = scrapy.Field()</span><br></pre></td></tr></table></figure>

<h1 id="项目主程序"><a href="#项目主程序" class="headerlink" title="项目主程序"></a>项目主程序</h1><p>使用 MySQLdb 操作数据库</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">pip install MySQLdb</span><br></pre></td></tr></table></figure>

<p>安装不成功请使用离线安装方式，pypi：[<a href="https://pypi.org/project/mysqlclient/#files]">https://pypi.org/project/mysqlclient/#files]</a></p>
<p>选择对应的Python版本，下载.whl文件，并离线安装</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">pip install mysqlclient-<span class="number">2.0</span><span class="number">.3</span>-cp37-cp37m-win_amd64.whl</span><br></pre></td></tr></table></figure>

<p>以爬取知网文章标题、作者、隶属单位，并将结果保存至MySQL数据库为例</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">CnkiSpider</span>(scrapy.Spider):</span><br><span class="line">    name = <span class="string">&#x27;cnki&#x27;</span>  <span class="comment"># 定义爬虫名称</span></span><br><span class="line">    allowed_domains = [<span class="string">&#x27;cnki.com.cn&#x27;</span>]  <span class="comment"># 定义爬虫域</span></span><br><span class="line">    start_urls = [<span class="string">&#x27;http://search.cnki.com.cn/Search/ListResult&#x27;</span>]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">start_requests</span>(<span class="params">self</span>):</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> num <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>, <span class="number">10</span>):</span><br><span class="line">            form_data = &#123;<span class="string">&quot;searchType&quot;</span>: <span class="string">&quot;MulityTermsSearch&quot;</span>, <span class="string">&quot;ParamIsNullOrEmpty&quot;</span>: <span class="string">&quot;false&quot;</span>, <span class="string">&quot;Islegal&quot;</span>: <span class="string">&quot;false&quot;</span>,</span><br><span class="line">                         <span class="string">&quot;Content&quot;</span>: <span class="string">&quot;计算机&quot;</span>, <span class="string">&quot;Page&quot;</span>: <span class="built_in">str</span>(num)&#125;</span><br><span class="line">            <span class="keyword">for</span> url <span class="keyword">in</span> self.start_urls:</span><br><span class="line">                <span class="keyword">yield</span> scrapy.FormRequest(url=url, formdata=form_data, method=<span class="string">&#x27;POST&#x27;</span>, callback=self.parse)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">parse</span>(<span class="params">self, response</span>):</span><br><span class="line">        <span class="comment"># 打开数据库连接</span></span><br><span class="line">        db = MySQLdb.connect(<span class="string">&quot;localhost&quot;</span>, <span class="string">&quot;root&quot;</span>, <span class="string">&quot;123456&quot;</span>, <span class="string">&quot;cnki&quot;</span>, charset=<span class="string">&#x27;utf8&#x27;</span>, port=<span class="number">3306</span>)</span><br><span class="line">        <span class="comment"># 使用cursor()方法获取操作游标</span></span><br><span class="line">        cursor = db.cursor()</span><br><span class="line">        title = response.xpath(<span class="string">&#x27;//div[@class=&quot;list-item&quot;]/p[@class=&quot;tit clearfix&quot;]//a[1]/@title&#x27;</span>).extract()</span><br><span class="line">        <span class="keyword">for</span> item <span class="keyword">in</span> title:</span><br><span class="line">            sql = <span class="string">&quot;INSERT INTO article(title) VALUE (&#x27;%s&#x27;)&quot;</span> % (<span class="built_in">str</span>(item))</span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">                <span class="comment"># 执行sql语句</span></span><br><span class="line">                cursor.execute(sql)</span><br><span class="line">                <span class="comment"># 提交到数据库执行</span></span><br><span class="line">                db.commit()</span><br><span class="line">            <span class="keyword">except</span>:</span><br><span class="line">                <span class="comment"># Rollback in case there is any error</span></span><br><span class="line">                db.rollback()</span><br><span class="line">        author = response.xpath(<span class="string">&#x27;//div[@class=&quot;list-item&quot;]/p[@class=&quot;source&quot;]/span[1]/@title&#x27;</span>).extract()</span><br><span class="line">        <span class="keyword">for</span> item <span class="keyword">in</span> author:</span><br><span class="line">            sql1 = <span class="string">&quot;INSERT INTO author(`name`) VALUE (&#x27;%s&#x27;)&quot;</span> % (<span class="built_in">str</span>(item).split(<span class="string">&quot;;&quot;</span>)[<span class="number">0</span>])</span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">                <span class="comment"># 执行sql语句</span></span><br><span class="line">                cursor.execute(sql1)</span><br><span class="line">                <span class="comment"># 提交到数据库执行</span></span><br><span class="line">                db.commit()</span><br><span class="line">            <span class="keyword">except</span>:</span><br><span class="line">                <span class="comment"># Rollback in case there is any error</span></span><br><span class="line">                db.rollback()</span><br><span class="line">        affiliated = response.xpath(<span class="string">&#x27;//div[@class=&quot;list-item&quot;]/p[@class=&quot;source&quot;]/span[3]/@title&#x27;</span>).extract()</span><br><span class="line">        <span class="keyword">for</span> item <span class="keyword">in</span> affiliated:</span><br><span class="line">            sql3 = <span class="string">&quot;INSERT INTO affiliated(`name`) VALUE (&#x27;%s&#x27;)&quot;</span> % (<span class="built_in">str</span>(item))</span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">                <span class="comment"># 执行sql语句</span></span><br><span class="line">                cursor.execute(sql3)</span><br><span class="line">                <span class="comment"># 提交到数据库执行</span></span><br><span class="line">                db.commit()</span><br><span class="line">            <span class="keyword">except</span>:</span><br><span class="line">                <span class="comment"># Rollback in case there is any error</span></span><br><span class="line">                db.rollback()</span><br><span class="line">        source = response.xpath(<span class="string">&#x27;//div[@class=&quot;list-item&quot;]/p[@class=&quot;source&quot;]/a[1]/span/@title&#x27;</span>).extract()</span><br><span class="line">        <span class="keyword">for</span> item <span class="keyword">in</span> source:</span><br><span class="line">            sql2 = <span class="string">&quot;INSERT INTO source(`name`) VALUE (&#x27;%s&#x27;)&quot;</span> % (<span class="built_in">str</span>(item))</span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">                <span class="comment"># 执行sql语句</span></span><br><span class="line">                cursor.execute(sql2)</span><br><span class="line">                <span class="comment"># 提交到数据库执行</span></span><br><span class="line">                db.commit()</span><br><span class="line">            <span class="keyword">except</span>:</span><br><span class="line">                <span class="comment"># Rollback in case there is any error</span></span><br><span class="line">                db.rollback()</span><br><span class="line">        <span class="comment"># 关闭数据库连接</span></span><br><span class="line">        db.close()</span><br></pre></td></tr></table></figure>

<h1 id="数据处理-pipelines"><a href="#数据处理-pipelines" class="headerlink" title="数据处理 pipelines"></a>数据处理 pipelines</h1><p>以将爬取到的数据导出为excel为例</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">SpiderPipeline</span>:</span><br><span class="line">    <span class="comment"># 用来将item保存到输出结果中</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">process_item</span>(<span class="params">self, item, spider</span>):</span><br><span class="line">        self.exporter.export_item(item)</span><br><span class="line">        <span class="keyword">return</span> item</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 执行文件创建，然后初始化exporter，并启动start_exporting()，开始接收Item</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">open_spider</span>(<span class="params">self, spider</span>):</span><br><span class="line">        self.file = <span class="built_in">open</span>(<span class="string">&quot;/cnki_data.csv&quot;</span>, <span class="string">&quot;wb&quot;</span>)</span><br><span class="line">        <span class="comment"># self.exporter = CsvItemExporter(self.file,</span></span><br><span class="line">        <span class="comment">#                                 fields_to_export=[&quot;title&quot;])</span></span><br><span class="line">        self.exporter = CsvItemExporter(self.file,</span><br><span class="line">                                        fields_to_export=[<span class="string">&quot;title&quot;</span>, <span class="string">&quot;author&quot;</span>, <span class="string">&quot;source&quot;</span>])</span><br><span class="line">        self.exporter.start_exporting()</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 结束exporter的exporting，关闭文件流</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">close_spider</span>(<span class="params">self, spider</span>):</span><br><span class="line">        self.exporter.finish_exporting()</span><br><span class="line">        self.file.close()</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>网络爬虫</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>scrapy</tag>
      </tags>
  </entry>
</search>
